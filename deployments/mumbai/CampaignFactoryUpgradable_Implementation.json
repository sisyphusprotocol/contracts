{
  "address": "0x24D9c4C6628D0e32Ab4861A0027B7c2a606D6ee1",
  "abi": [
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "campaign",
          "type": "address"
        }
      ],
      "name": "CampaignUpKeepCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "campaign",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upkeepID",
          "type": "uint256"
        }
      ],
      "name": "CampaignUpKeepRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "campaign",
          "type": "address"
        }
      ],
      "name": "CampaignUpKeepWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "host",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        }
      ],
      "name": "EvCampaignCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ICampaign",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "EvCampaignUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "EvWhiteTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "EvWhiteUserSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "OnGoingCampaigns",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "campaign",
          "type": "address"
        }
      ],
      "name": "cancelUpKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodLength",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "campaignUri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "zero",
          "type": "bytes"
        }
      ],
      "name": "createCampaign",
      "outputs": [
        {
          "internalType": "address",
          "name": "campaign",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_campaign",
      "outputs": [
        {
          "internalType": "contract ICampaign",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_link",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_registry",
      "outputs": [
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICampaign",
          "name": "campaign_",
          "type": "address"
        },
        {
          "internalType": "contract LinkTokenInterface",
          "name": "link_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registrar_",
          "type": "address"
        },
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "keepUpRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "upKeepId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "modifyWhiteToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saveOwnerInAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "campaign",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "upKeepId",
              "type": "uint256"
            }
          ],
          "internalType": "struct CampaignFactoryStorage.UpKeepInfo",
          "name": "upKeepInfo",
          "type": "tuple"
        }
      ],
      "name": "setKeepUpRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICampaign",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "updateCampaignImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "campaign",
          "type": "address"
        }
      ],
      "name": "withdrawUpKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21f413d9ab30889cbaf6b7c65104f18d34e0d41fee7d1a3aa51e7d0e09c8f32c",
  "receipt": {
    "to": null,
    "from": "0x11F2241Bf12f1a640f78e5d1A0d3302D77fB5e78",
    "contractAddress": "0x24D9c4C6628D0e32Ab4861A0027B7c2a606D6ee1",
    "transactionIndex": 6,
    "gasUsed": "2268948",
    "logsBloom": "0x
    "blockHash": "0x8390663a945f5bbf2c2c7b051f9988ebe7c95dc4c32e895e8e7268f6cb25efe0",
    "transactionHash": "0x21f413d9ab30889cbaf6b7c65104f18d34e0d41fee7d1a3aa51e7d0e09c8f32c",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 29048891,
        "transactionHash": "0x21f413d9ab30889cbaf6b7c65104f18d34e0d41fee7d1a3aa51e7d0e09c8f32c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000011f2241bf12f1a640f78e5d1a0d3302d77fb5e78",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c1764ef54ac0000000000000000000000000000000000000000000000000021a4188d10e83fda00000000000000000000000000000000000000000000089c06aca5f1682c538900000000000000000000000000000000000000000000000021980128219393da00000000000000000000000000000000000000000000089c06b8bd565780ff89",
        "logIndex": 17,
        "blockHash": "0x8390663a945f5bbf2c2c7b051f9988ebe7c95dc4c32e895e8e7268f6cb25efe0"
      }
    ],
    "blockNumber": 29048891,
    "cumulativeGasUsed": "4945293",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "71d604f67ae9a5b9b6d08d942d7d7a4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaign\",\"type\":\"address\"}],\"name\":\"CampaignUpKeepCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaign\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepID\",\"type\":\"uint256\"}],\"name\":\"CampaignUpKeepRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaign\",\"type\":\"address\"}],\"name\":\"CampaignUpKeepWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"}],\"name\":\"EvCampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICampaign\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"EvCampaignUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"EvWhiteTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"EvWhiteUserSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OnGoingCampaigns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"campaign\",\"type\":\"address\"}],\"name\":\"cancelUpKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"campaignUri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"zero\",\"type\":\"bytes\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"campaign\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_campaign\",\"outputs\":[{\"internalType\":\"contract ICampaign\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_link\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_registry\",\"outputs\":[{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICampaign\",\"name\":\"campaign_\",\"type\":\"address\"},{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"link_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar_\",\"type\":\"address\"},{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepUpRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upKeepId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"modifyWhiteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveOwnerInAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"campaign\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"upKeepId\",\"type\":\"uint256\"}],\"internalType\":\"struct CampaignFactoryStorage.UpKeepInfo\",\"name\":\"upKeepInfo\",\"type\":\"tuple\"}],\"name\":\"setKeepUpRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICampaign\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"updateCampaignImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"campaign\",\"type\":\"address\"}],\"name\":\"withdrawUpKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelUpKeep(address)\":{\"details\":\"use in development\"},\"checkUpkeep(bytes)\":{\"details\":\"check Upkeep\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performUpkeep(bytes)\":{\"details\":\"two kind of perform 0: cancel upKeep of campaign 1: withdraw upKeep $link\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"saveOwnerInAdmin()\":{\"details\":\"compatible with hardhat deploy, maybe removed later\"},\"setKeepUpRecords(address,(uint256))\":{\"details\":\"use in development, manually edit data\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawUpKeep(address)\":{\"details\":\"use in development\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CampaignFactoryUpgradable.sol\":\"CampaignFactoryUpgradable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice config of the registry\\n * @dev only used in params and return values\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\n * being reimbursed for gas, measured in parts per billion\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\n * priced in MicroLink; can be used in conjunction with or independently of\\n * paymentPremiumPPB\\n * @member blockCountPerTurn number of blocks each oracle has during their turn to\\n * perform upkeep before it will be the next keeper's turn to submit\\n * @member checkGasLimit gas limit when checking for upkeep\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\n * be stale before switching to the fallback pricing\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\n * when calculating the payment ceiling for keepers\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\n * @member transcoder address of the transcoder contract\\n * @member registrar address of the registrar contract\\n */\\nstruct Config {\\n  uint32 paymentPremiumPPB;\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\n  uint24 blockCountPerTurn;\\n  uint32 checkGasLimit;\\n  uint24 stalenessSeconds;\\n  uint16 gasCeilingMultiplier;\\n  uint96 minUpkeepSpend;\\n  uint32 maxPerformGas;\\n  uint256 fallbackGasPrice;\\n  uint256 fallbackLinkPrice;\\n  address transcoder;\\n  address registrar;\\n}\\n\\n/**\\n * @notice state of the registry\\n * @dev only used in params and return values\\n * @member nonce used for ID generation\\n * @member ownerLinkBalance withdrawable balance of LINK by contract owner\\n * @member expectedLinkBalance the expected balance of LINK of the registry\\n * @member numUpkeeps total number of upkeeps on the registry\\n */\\nstruct State {\\n  uint32 nonce;\\n  uint96 ownerLinkBalance;\\n  uint256 expectedLinkBalance;\\n  uint256 numUpkeeps;\\n}\\n\\ninterface AutomationRegistryBaseInterface {\\n  function registerUpkeep(\\n    address target,\\n    uint32 gasLimit,\\n    address admin,\\n    bytes calldata checkData\\n  ) external returns (uint256 id);\\n\\n  function performUpkeep(uint256 id, bytes calldata performData) external returns (bool success);\\n\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function addFunds(uint256 id, uint96 amount) external;\\n\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\n\\n  function getUpkeep(uint256 id)\\n    external\\n    view\\n    returns (\\n      address target,\\n      uint32 executeGas,\\n      bytes memory checkData,\\n      uint96 balance,\\n      address lastKeeper,\\n      address admin,\\n      uint64 maxValidBlocknumber,\\n      uint96 amountSpent\\n    );\\n\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  function getKeeperInfo(address query)\\n    external\\n    view\\n    returns (\\n      address payee,\\n      bool active,\\n      uint96 balance\\n    );\\n\\n  function getState()\\n    external\\n    view\\n    returns (\\n      State memory,\\n      Config memory,\\n      address[] memory\\n    );\\n}\\n\\n/**\\n * @dev The view methods are not actually marked as view in the implementation\\n * but we want them to be easily queried off-chain. Solidity will not compile\\n * if we actually inherit from this interface, so we document it here.\\n */\\ninterface AutomationRegistryInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    view\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      int256 gasWei,\\n      int256 linkEth\\n    );\\n}\\n\\ninterface AutomationRegistryExecutableInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      uint256 adjustedGasWei,\\n      uint256 linkEth\\n    );\\n}\\n\",\"keccak256\":\"0xc61d747194f2efd476204f9cf138f4028166d4723960fd66c7d316625ebe3ff6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x20ba3c551439998a53313a63959be77ab70f14338a39592c7a6eb36e8bc3d148\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/CampaignFactoryStorage.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\nimport { AutomationRegistryInterface, State, Config } from '@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol';\\nimport { LinkTokenInterface } from '@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol';\\n\\nimport './interface/ICampaign.sol';\\n\\ncontract CampaignFactoryStorage {\\n  // White list mapping\\n  mapping(address => bool) public whiteUsers;\\n\\n  // White list token mapping, value is max amount for this token\\n  mapping(IERC20Upgradeable => uint256) public whiteTokens;\\n\\n  ICampaign public i_campaign;\\n\\n  // variable about chainLink\\n  LinkTokenInterface public i_link;\\n  address public registrar;\\n  AutomationRegistryInterface public i_registry;\\n\\n  struct UpKeepInfo {\\n    uint256 upKeepId;\\n  }\\n\\n  // campaign address => upkeepID\\n  mapping(address => UpKeepInfo) public keepUpRecords;\\n\\n  address[] public OnGoingCampaigns;\\n\\n  uint256[45] __gap;\\n}\\n\",\"keccak256\":\"0x665bc42cbea94491f6962dcccd10b858513fd54f20b9c0db5103a907d8e7ab63\",\"license\":\"BUSL-1.1\"},\"contracts/CampaignFactoryUpgradable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts/proxy/Clones.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport { AutomationRegistryInterface, State, Config } from '@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol';\\nimport { LinkTokenInterface } from '@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol';\\nimport '@chainlink/contracts/src/v0.8/AutomationCompatible.sol';\\nimport './interface/IKeeperRegistry.sol';\\nimport './CampaignFactoryStorage.sol';\\nimport './interface/ICampaignFactory.sol';\\nimport './Consts.sol';\\n\\ncontract CampaignFactoryUpgradable is\\n  CampaignFactoryStorage,\\n  ICampaignFactory,\\n  UUPSUpgradeable,\\n  OwnableUpgradeable,\\n  AutomationCompatible\\n{\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  function initialize(\\n    ICampaign campaign_,\\n    LinkTokenInterface link_,\\n    address registrar_,\\n    AutomationRegistryInterface registry_\\n  ) public initializer {\\n    i_campaign = campaign_;\\n    i_link = link_;\\n    registrar = registrar_;\\n    i_registry = registry_;\\n    __Ownable_init_unchained();\\n  }\\n\\n  function modifyWhiteToken(IERC20Upgradeable token, uint256 amount) external onlyOwner {\\n    whiteTokens[token] = amount;\\n    emit EvWhiteTokenSet(token, amount);\\n  }\\n\\n  function updateCampaignImplementation(ICampaign newImplementation) external onlyOwner {\\n    i_campaign = newImplementation;\\n    emit EvCampaignUpdated(newImplementation);\\n  }\\n\\n  function createCampaign(\\n    IERC20Upgradeable token,\\n    uint256 amount,\\n    string memory name,\\n    string memory symbol,\\n    uint256 startTime,\\n    uint256 totalPeriod,\\n    uint256 periodLength,\\n    string calldata campaignUri,\\n    // please set to 0x\\n    bytes calldata zero\\n  ) public override returns (address campaign) {\\n    require(amount <= whiteTokens[token], 'CampaignF: amount exceed cap');\\n    require(block.timestamp < startTime, 'CampaignF: start too soon');\\n    require(i_link.balanceOf(address(this)) >= uint256(Consts.MIN_LINK_AMOUNT), 'CampaignF: not enough $Link');\\n\\n    campaign = Clones.cloneDeterministic(\\n      address(i_campaign),\\n      keccak256(\\n        abi.encodePacked(\\n          Consts.SALT,\\n          msg.sender,\\n          token,\\n          amount,\\n          name,\\n          symbol,\\n          startTime,\\n          totalPeriod,\\n          periodLength,\\n          campaignUri\\n        )\\n      )\\n    );\\n\\n    ICampaign(campaign).initialize(msg.sender, token, amount, name, symbol, startTime, totalPeriod, periodLength, campaignUri);\\n\\n    // register chainLink keepUp\\n    _registerAndPredictID(\\n      string.concat('Sisyphus ', (Strings.toHexString(uint160(campaign), 20))),\\n      zero,\\n      address(campaign),\\n      Consts.UPKEEP_GAS_LIMIT,\\n      address(this),\\n      zero,\\n      Consts.MIN_LINK_AMOUNT,\\n      0\\n    );\\n\\n    emit EvCampaignCreated(msg.sender, address(campaign));\\n  }\\n\\n  function _registerAndPredictID(\\n    string memory name,\\n    bytes calldata encryptedEmail,\\n    address upkeepContract,\\n    uint32 gasLimit,\\n    address adminAddress,\\n    bytes calldata checkData,\\n    uint96 amount,\\n    uint8 source\\n  ) internal {\\n    (State memory state, Config memory _c, address[] memory _k) = i_registry.getState();\\n    uint256 oldNonce = state.nonce;\\n    bytes memory payload = abi.encode(\\n      name,\\n      encryptedEmail,\\n      upkeepContract,\\n      gasLimit,\\n      adminAddress,\\n      checkData,\\n      amount,\\n      source,\\n      address(this)\\n    );\\n\\n    i_link.transferAndCall(registrar, amount, bytes.concat(Consts.registerSig, payload));\\n\\n    (state, _c, _k) = i_registry.getState();\\n    uint256 newNonce = state.nonce;\\n    if (newNonce == oldNonce + 1) {\\n      uint256 upkeepID = uint256(\\n        keccak256(abi.encodePacked(blockhash(block.number - 1), address(i_registry), uint32(oldNonce)))\\n      );\\n      _saveUpKeep(upkeepContract, upkeepID);\\n    } else {\\n      revert('auto-approve disabled');\\n    }\\n  }\\n\\n  /**\\n   * @dev check Upkeep\\n   */\\n  function checkUpkeep(bytes calldata) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n    // travel the OnGoingCampaigns\\n    for (uint256 i = 0; i < OnGoingCampaigns.length; i++) {\\n      ICampaign campaign = ICampaign(OnGoingCampaigns[i]);\\n      (\\n        address _t,\\n        uint32 _e,\\n        bytes memory _c,\\n        uint96 balance,\\n        address _l,\\n        address _a,\\n        uint64 maxValid,\\n        uint96 _as\\n      ) = IKeeperRegistry(address(i_registry)).getUpkeep(keepUpRecords[address(campaign)].upKeepId);\\n\\n      // check whether it's time to cancel\\n      bool canceled = maxValid != Consts.UINT64_MAX;\\n      if (campaign.status() == Consts.CampaignStatus.SETTLED && !canceled) {\\n        upkeepNeeded = true;\\n        performData = abi.encode(address(campaign), uint256(0));\\n        return (upkeepNeeded, performData);\\n      }\\n\\n      // check whether it's time to withdraw after cancel\\n      if (block.number > maxValid + Consts.CANCELATION_DELAY && balance != uint96(0)) {\\n        upkeepNeeded = true;\\n        performData = abi.encode(address(campaign), uint256(1));\\n        return (upkeepNeeded, performData);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev two kind of perform\\n   * 0: cancel upKeep of campaign\\n   * 1: withdraw upKeep $link\\n   */\\n  function performUpkeep(bytes calldata performData) external override {\\n    (address campaign, uint256 kind) = abi.decode(performData, (address, uint256));\\n\\n    if (kind == 0) {\\n      // cancel keep up\\n      AutomationRegistryInterface(i_registry).cancelUpkeep(keepUpRecords[campaign].upKeepId);\\n\\n      emit CampaignUpKeepCancelled(campaign);\\n    } else if (kind == 1) {\\n      // withdraw fund\\n      IKeeperRegistry(address(i_registry)).withdrawFunds(keepUpRecords[campaign].upKeepId, address(this));\\n      emit CampaignUpKeepWithdrawal(campaign);\\n    }\\n  }\\n\\n  /**\\n   * @dev use in development\\n   */\\n\\n  function cancelUpKeep(address campaign) external onlyOwner {\\n    AutomationRegistryInterface(i_registry).cancelUpkeep(keepUpRecords[campaign].upKeepId);\\n  }\\n\\n  /**\\n   * @dev use in development\\n   */\\n  function withdrawUpKeep(address campaign) external onlyOwner {\\n    IKeeperRegistry(address(i_registry)).withdrawFunds(keepUpRecords[campaign].upKeepId, msg.sender);\\n  }\\n\\n  /**\\n   * @dev use in development, manually edit data\\n   */\\n  function setKeepUpRecords(address campaign, UpKeepInfo calldata upKeepInfo) external onlyOwner {\\n    keepUpRecords[campaign] = upKeepInfo;\\n  }\\n\\n  /**\\n   * @dev save upKeepId mapping, avoid stack too deep\\n   */\\n  function _saveUpKeep(address upkeepContract, uint256 upkeepID) private {\\n    // record up keep mapping\\n    keepUpRecords[upkeepContract].upKeepId = upkeepID;\\n    // just push, it doesn't matter too much not to pop.\\n    OnGoingCampaigns.push(upkeepContract);\\n\\n    emit CampaignUpKeepRegistered(upkeepContract, upkeepID);\\n  }\\n\\n  /**\\n   * @dev compatible with hardhat deploy, maybe removed later\\n   */\\n  function saveOwnerInAdmin() external {\\n    address o = owner();\\n    assembly {\\n      sstore(_ADMIN_SLOT, o)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6729d3cd78e96747b2ad1c8106b98bad004e7e9759cd17039b4b4bad9e93e25f\",\"license\":\"BUSL-1.1\"},\"contracts/Consts.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.15;\\n\\ninterface KeeperRegistrarInterface {\\n  function register(\\n    string memory name,\\n    bytes calldata encryptedEmail,\\n    address upkeepContract,\\n    uint32 gasLimit,\\n    address adminAddress,\\n    bytes calldata checkData,\\n    uint96 amount,\\n    uint8 source,\\n    address sender\\n  ) external;\\n}\\n\\nlibrary Consts {\\n  //\\n  uint256 public constant DECIMAL = 10**6;\\n  uint256 public constant PROTOCOL_FEE = 10**5;\\n  uint256 public constant HOST_REWARD = 2 * 10**5;\\n\\n  // challenge\\n  uint8 constant legalVoterRatio = 66;\\n  uint8 constant cheaterRatio = 30;\\n  uint8 constant challengerSuccessRatio = 60;\\n  uint8 constant successSharedRatio = 30;\\n  uint8 constant successProtocolRatio = 10;\\n  uint8 constant challengerFailRatio = 40;\\n  uint8 constant failSharedRatio = 75;\\n  uint8 constant failProtocolRatio = 25;\\n  uint8 constant SCALE = 100;\\n\\n  bytes32 public constant SALT = keccak256(abi.encode('Sisyphus Protocol'));\\n\\n  // tmp vitalik.eth\\n  address public constant PROTOCOL_RECIPIENT = 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045;\\n  address public constant UPKEEP_ADMIN = 0x11F2241Bf12f1a640f78e5d1A0d3302D77fB5e78;\\n\\n  // chainlink\\n  bytes4 public constant registerSig = KeeperRegistrarInterface.register.selector;\\n  // LinkSend\\n  uint96 public constant MIN_LINK_AMOUNT = 5000000000000000000;\\n  // upKeep GasLimit\\n  uint32 public constant UPKEEP_GAS_LIMIT = 5000000;\\n\\n  // upKeep Cancel Delay same as the number in KeeperRegistry\\n  uint256 public constant CANCELATION_DELAY = 50;\\n\\n  uint64 public constant UINT64_MAX = 2**64 - 1;\\n\\n  enum CampaignType {\\n    IN_VALID,\\n    DAILY,\\n    WEEKLY\\n  }\\n\\n  enum CampaignStatus {\\n    IN_VALID,\\n    NOT_START,\\n    ON_GOING,\\n    ENDED,\\n    SETTLED\\n  }\\n}\\n\",\"keccak256\":\"0xd3bd83b65bda5446c57ce6d2cbfd31de1e3daf1bc978b5893152874c02f6d27b\",\"license\":\"BUSL-1.1\"},\"contracts/interface/ICampaign.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport { Consts } from '../Consts.sol';\\n\\ninterface ICampaign {\\n  //for voted: true = voted; false = not voted;\\n  //for choice: true = think cheat; false = think not cheat;\\n  struct Voter {\\n    bool voted;\\n    bool choice;\\n  }\\n\\n  //for result: true = cheat; false = not cheat;\\n  //for state: true = over; false = working;\\n  //for legal: true = over 2/3; false = not enough voter;\\n  struct ChallengeRecord {\\n    uint256 challengerId;\\n    uint256 cheaterId;\\n    uint256 agreeCount;\\n    uint256 disagreeCount;\\n    uint256 challengeRiseTime;\\n    bool result;\\n    bool state;\\n    bool legal;\\n  }\\n\\n  struct TokenProperty {\\n    TokenStatus tokenStatus;\\n    uint256 pendingReward;\\n  }\\n\\n  enum TokenStatus {\\n    INVALID,\\n    EXIT,\\n    SIGNED,\\n    ADMITTED,\\n    ACHIEVED,\\n    FAILED,\\n    REKT\\n  }\\n\\n  struct Record {\\n    string contentUri;\\n  }\\n\\n  function initialize(\\n    address owner,\\n    IERC20Upgradeable token_,\\n    uint256 amount_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 startTime_,\\n    uint256 totalPeriod_,\\n    uint256 periodLength_,\\n    string memory campaignUri_\\n  ) external;\\n\\n  function status() external view returns (Consts.CampaignStatus);\\n\\n  function totalEpochsCount() external view returns (uint256);\\n\\n  function period() external view returns (uint256);\\n\\n  function currentEpoch() external view returns (uint256);\\n\\n  function getTokenProperties(uint256 tokenId) external view returns (TokenProperty memory);\\n\\n  // owner update content uri\\n  function setCampaignUri(string calldata newUri) external;\\n\\n  // user sign up the campaign\\n  function signUp() external;\\n\\n  // host allow user to participate\\n  function admit(uint256[] calldata) external;\\n\\n  // user check at a fixed frequency\\n  function checkIn(string calldata, uint256) external;\\n\\n  // settle the reward\\n  function settle() external;\\n\\n  // user claim reward after campaign ended\\n  function claim(uint256 tokenId) external;\\n\\n  function claimAndWithdraw(uint256 tokenId) external;\\n\\n  function withdraw() external;\\n\\n  function challenge(uint256, uint256) external;\\n\\n  function vote(\\n    uint256,\\n    uint256,\\n    bool\\n  ) external;\\n\\n  function judgement(uint256) external;\\n\\n  function forceEnd() external;\\n\\n  // epoch update event;\\n  event EpochUpdated(uint256 currentEpoch);\\n\\n  event EvCampaignUriSet(string newUri);\\n\\n  event EvSignUp(uint256 tokenId);\\n\\n  event EvRegisterSuccessfully(uint256 tokenId);\\n\\n  event EvCheckIn(uint256 epoch, uint256 tokenId, string contentUri);\\n\\n  event EvModifyRegistry(uint256[] tokenList, bool[] status);\\n\\n  // settle the campaign event\\n  event EvSettle(address user);\\n\\n  event EvClaimReward(uint256 tokenId, uint256 amount);\\n  // who fail\\n  event EvFailure(uint256 tokenId);\\n  // who success\\n  event EvSuccess(uint256 tokenId);\\n\\n  event EvWithDraw(address host, uint256 hostReward, uint256 protocolFee);\\n\\n  event EvChallenge(uint256 challengerId, uint256 cheaterId, uint256 challengeRecordId);\\n\\n  event EvVote(uint256 tokenId, uint256 challengeRecordId);\\n\\n  event EvJudgement(uint256 challengeRecordId);\\n\\n  event EvCheat(uint256 cheaterId);\\n}\\n\",\"keccak256\":\"0x7d6f4d4cd11dd7a1c360e9621efe46b36adbf2b9f477661f7cd2f4bc61699def\",\"license\":\"BUSL-1.1\"},\"contracts/interface/ICampaignFactory.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport { ICampaign } from './ICampaign.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\ninterface ICampaignFactory {\\n  function createCampaign(\\n    IERC20Upgradeable token,\\n    uint256 amount,\\n    string memory name,\\n    string memory symbol,\\n    uint256 startTime,\\n    uint256 totalPeriod,\\n    uint256 periodLength,\\n    string calldata campaignUri,\\n    bytes calldata zero\\n  ) external returns (address campaign);\\n\\n  event EvCampaignUpdated(ICampaign newImplementation);\\n  event EvCampaignCreated(address indexed host, address indexed campaignAddress);\\n  event EvWhiteUserSet(address indexed user, bool status);\\n  event EvWhiteTokenSet(IERC20Upgradeable indexed token, uint256 maxAmount);\\n  event CampaignUpKeepRegistered(address campaign, uint256 upkeepID);\\n  event CampaignUpKeepCancelled(address campaign);\\n  event CampaignUpKeepWithdrawal(address campaign);\\n}\\n\",\"keccak256\":\"0x5ddaaa76e52a63d38e27ac44f4eeadc5b40c87d4363d0b1f58aaf4ba72ca560c\",\"license\":\"BUSL-1.1\"},\"contracts/interface/IKeeperRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\ninterface IKeeperRegistry {\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function withdrawFunds(uint256 id, address to) external;\\n\\n  function getUpkeep(uint256 id)\\n    external\\n    view\\n    returns (\\n      address target,\\n      uint32 executeGas,\\n      bytes memory checkData,\\n      uint96 balance,\\n      address lastKeeper,\\n      address admin,\\n      uint64 maxValidBlocknumber,\\n      uint96 amountSpent\\n    );\\n}\\n\",\"keccak256\":\"0xda26a4a3020bc443138884e9806af181a1ae85cb2488cec7064d272010f41c0d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a08060405234610031573060805261283d908161003782396080518181816113800152818161148e01526119c70152f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c9081631307502c14611e4357508063144442e714611e0b5780631f70aa1c14611d665780632a66360614611d3f5780632b20e39714611d185780633659cfe6146119a05780634585e33b146117e35780634f1ef2861461143a57806352d1902d146113655780636e04ff0d146113065780636f93d620146112aa578063715018a61461123e57806377321c58146111c55780637d253aff1461119e57806380149449146110ee5780638a80d397146110aa5780638d3cb7e6146105ba5780638da5cb5b14610593578063af221bec1461056c578063aff4e79a14610534578063b33f9d38146104c5578063e32e8b3914610459578063f2fde38b146103b05763f8c8765e1461012957600080fd5b346103ad5760806003193601126103ad57610142611e7c565b602435906001600160a01b03908183168093036103a957604435908282168092036103a457606435918383168093036103a05760359485549460ff8660081c161595868097610393575b801561037c575b15610312578660017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083161789556102e4575b5073ffffffffffffffffffffffffffffffffffffffff199316836002541617600255826003541617600355816004541617600455600554161760055560ff825460081c161561027a576102183361206d565b610223575b50604051f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff81541690557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a13861021d565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101178755386101c6565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156101935750600160ff821614610193565b50600160ff82161061018c565b8580fd5b600080fd5b8380fd5b80fd5b50346103ad5760206003193601126103ad576103ca611e7c565b6103d2612015565b6001600160a01b038116156103ef576103ea9061206d565b604051f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346103ad5760406003193601126103ad57610473611e7c565b7f5f4c38db7b341414be18a675a08cd2c914f57fa3ac798db73bd0e0b5edc72c7660206001600160a01b03602435936104aa612015565b169283855260018252806040862055604051908152a2604051f35b50346103ad5760406003193601126103ad576104df611e7c565b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360112610530576001600160a01b039061051a612015565b1681526006602052604081206024359055604051f35b5080fd5b50346103ad5760206003193601126103ad5760406020916001600160a01b0361055b611e7c565b168152600683522054604051908152f35b50346103ad57806003193601126103ad5760206001600160a01b0360025416604051908152f35b50346103ad57806003193601126103ad5760206001600160a01b0360685416604051908152f35b50346103ad576101206003193601126103ad576105d5611e7c565b9060443567ffffffffffffffff8111610530576105f6903690600401611ff7565b9160643567ffffffffffffffff8111610dfd57610617903690600401611ff7565b9260e43567ffffffffffffffff81116103a957610638903690600401611e92565b9190926101043567ffffffffffffffff81116103a05761065c903690600401611e92565b9490936001600160a01b038316875260016020526040872054602435116110665760843542101561102257602460206001600160a01b0360035416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa8015611017578890610fdd575b674563918244f40000915010610f995760025460405190602080830152601160408301527f53697379706875732050726f746f636f6c00000000000000000000000000000060608301526060825281608081011067ffffffffffffffff608084011117610f835760378261080060e882888f8f908a908e6bffffffffffffffffffffffff198f60806001600160a01b039e016040528751602089012060a08901523360601b60c089015260601b1660d4870152602435878701526107a58151809260206101088a019101611f66565b85016107bc82518093602061010885019101611f66565b60843581830161010881019190915260a43561012882015260c4356101488201526101689584918701370101918201520360c8810160808501520160808301611ef0565b60a06080820151910120916bffffffffffffffffffffffff19604051917f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000835260601b1660148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201528af516978815610f3f57883b15610f3b576001600160a01b03928894926108fa610925936108e8604051998a9889987f703064d1000000000000000000000000000000000000000000000000000000008a523360048b015216602489015260243560448901526101206064890152610124880190611f9b565b90600319878303016084880152611f9b565b9160843560a486015260a43560c486015260c43560e4860152600319858403016101048601526122a4565b038183895af18015610dc257908491610f27575b5050604051908461094983611ed4565b602a83526040366020850137825115610f135760306020840153825160011015610f13576078602184015360295b60018111610e7f5750610e3b576109d7602960405180947f536973797068757320000000000000000000000000000000000000000000000060208301526109c78151809260208686019101611f66565b8101036009810185520183611ef0565b6004846001600160a01b0360055416604051928380927f1865c57d0000000000000000000000000000000000000000000000000000000082525afa908115610e3057610b6f93610ab8602094610b0e948a948a91610e14575b505197610a90604051958692610a538a8501976101208952610140860190611f9b565b94610a6c601f19968787820301604088015283836122a4565b926060860152624c4b4060808601523060a0860152858584030160c08601526122a4565b674563918244f4000060e08301528a6101008301523061012083015203908101845283611ef0565b610b1e60246001600160a01b0360035416936001600160a01b0360045416936040519687927f3659d666000000000000000000000000000000000000000000000000000000008a85015251809285850190611f66565b8101036004810186520184611ef0565b866040518096819582947f4000aea00000000000000000000000000000000000000000000000000000000084526004840152674563918244f400006024840152606060448401526064830190611f9b565b03925af18015610e0957610dcd575b50600554906040517f1865c57d00000000000000000000000000000000000000000000000000000000815283816004816001600160a01b0387165afa908115610dc2578491610d9e575b5063ffffffff809151169082167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111610d8a5760010103610d465760014310610d32577fffffffff00000000000000000000000000000000000000000000000000000000604051916bffffffffffffffffffffffff196020840194600019430140865260601b16604084015260e01b16605482015260388152610c6b81611ed4565b51902091808252600660205282604083205560075468010000000000000000811015610d1e57604060209483610cc88460017ffd178b9cd7ae1f7ffcc324ed72b5af3040500c49285c4806240607e04a17dc419601600755611fc0565b819291549060031b6001600160a01b03811b9283911b1691191617905581519084825286820152a180604051927facd63640134021f2a0e3727cb386f37eff4877f03025952b4d5dd67f1d4c9ac3339185a38152f35b602483634e487b7160e01b81526041600452fd5b602483634e487b7160e01b81526011600452fd5b606460405162461bcd60e51b815260206004820152601560248201527f6175746f2d617070726f76652064697361626c656400000000000000000000006044820152fd5b602485634e487b7160e01b81526011600452fd5b610dba91503d8086833e610db28183611ef0565b810190612313565b505038610bc8565b6040513d86823e3d90fd5b6020813d602011610e01575b81610de660209383611ef0565b81010312610dfd5751801515036105305738610b7e565b8280fd5b3d9150610dd9565b6040513d85823e3d90fd5b610e2891503d808c833e610db28183611ef0565b505038610a30565b6040513d87823e3d90fd5b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b906010600f82161015610eff578351821015610ee9577f3031323334353637383961626364656600000000000000000000000000000000600f82161a6020838601015360041c908015610ed55760001901610977565b602486634e487b7160e01b81526011600452fd5b634e487b7160e01b600052603260045260246000fd5b602486634e487b7160e01b81526032600452fd5b602485634e487b7160e01b81526032600452fd5b610f3090611ec0565b610dfd578238610939565b8780fd5b606460405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152fd5b634e487b7160e01b600052604160045260246000fd5b606460405162461bcd60e51b815260206004820152601b60248201527f43616d706169676e463a206e6f7420656e6f75676820244c696e6b00000000006044820152fd5b506020813d60201161100f575b81610ff760209383611ef0565b81010312610f3b57674563918244f4000090516106d6565b3d9150610fea565b6040513d8a823e3d90fd5b606460405162461bcd60e51b815260206004820152601960248201527f43616d706169676e463a20737461727420746f6f20736f6f6e000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e463a20616d6f756e742065786365656420636170000000006044820152fd5b50346103ad57806003193601126103ad576001600160a01b03606854167fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355604051f35b50346103ad5760206003193601126103ad5780611109611e7c565b611111612015565b6001600160a01b0380600554169116825260066020526040822054813b1561119a5782916024839260405194859384927fc804802200000000000000000000000000000000000000000000000000000000845260048401525af1801561118f5761117b5750604051f35b61118490611ec0565b6103ad57803861021d565b6040513d84823e3d90fd5b5050fd5b50346103ad57806003193601126103ad5760206001600160a01b0360035416604051908152f35b50346103ad5760206003193601126103ad577f34cfd2cac352320b9ae72ade3c0ccf4835c60b5aeccc74380b9c78f0fd99ec4c60206001600160a01b0361120a611e7c565b611212612015565b168073ffffffffffffffffffffffffffffffffffffffff196002541617600255604051908152a1604051f35b50346103ad57806003193601126103ad57611257612015565b60685473ffffffffffffffffffffffffffffffffffffffff19811660685560006001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346103ad5760206003193601126103ad57600435906007548210156103ad5760206001600160a01b038360076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015416604051908152f35b50346103ad5760206003193601126103ad5760043567ffffffffffffffff811161053057611338903690600401611e92565b50506113426124f0565b9061136160405192839215158352604060208401526040830190611f9b565b0390f35b50346103ad57806003193601126103ad576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036113d05760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b5060406003193601126103ad5761144f611e7c565b9060243567ffffffffffffffff8111610530573660238201121561053057611481903690602481600401359101611f2f565b916001600160a01b0392837f000000000000000000000000000000000000000000000000000000000000000016936114bb853014156120c4565b6114ea7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc958287541614612135565b6114f2612015565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115295750506103ea9192506121a6565b821691604051947f52d1902d0000000000000000000000000000000000000000000000000000000086526020958681600481885afa600091816117b4575b506115d6576084876040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b0361174a576115e4816121a6565b604051927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600085a2815115801590611742575b611627575b5050509050604051f35b61163083611ed4565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c858401527f206661696c6564000000000000000000000000000000000000000000000000006040840152803b156116d8576000828192876116c5979895519201905af43d156116cf573d6116a881611f13565b906116b66040519283611ef0565b8152600081933d92013e612260565b508038808061161d565b60609150612260565b6084856040519062461bcd60e51b82526004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b506001611618565b6084856040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918882813d83116117dc575b6117cb8183611ef0565b810103126103ad5750519038611567565b503d6117c1565b50346103ad57602080600319360112610530576004359067ffffffffffffffff8211610dfd576118196040923690600401611e92565b9080939181010312610dfd57828235926001600160a01b0390818516809503610dfd57830135806118e3575060055416838252600683526040822054813b15610dfd5782916024839260405194859384927fc804802200000000000000000000000000000000000000000000000000000000845260048401525af1801561118f576118cf575b50507faff860f486d079cb5c9e409ce38392d1b2bfbaf3feb98c17006cd1ec4e8a969191604051908152a1604051f35b6118d890611ec0565b610dfd57823861189f565b6001146118f4575b50505050604051f35b6005541683825260068352604082205490803b15610dfd576040517f744bfe61000000000000000000000000000000000000000000000000000000008152600481019290925230602483015282908290604490829084905af1801561118f5761198c575b50507f13115268ab8762c4f3ac567bf3b406763697b029819599563e47d083b3d3399e91604051908152a1388082816118eb565b61199590611ec0565b610dfd578238611958565b50346103ad57602090816003193601126103ad576119bc611e7c565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016906119f4823014156120c4565b611a237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614612135565b611a2b612015565b6040518581019181831067ffffffffffffffff841117610f83578260405285825260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014611a8757505050506103ea9192506121a6565b84939416936040517f52d1902d0000000000000000000000000000000000000000000000000000000081528781600481895afa60009181611ce9575b50611b32576084886040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b03611c7f57611b40836121a6565b604051937fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600086a2805115801590611c77575b611b84575b505050509050604051f35b611b8d84611ed4565b602784527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c868501527f206661696c6564000000000000000000000000000000000000000000000000006040850152823b15611c0d57611c02949592600092839251915af43d156116cf573d6116a881611f13565b508038808080611b79565b6084866040519062461bcd60e51b82526004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b506000611b74565b6084866040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918982813d8311611d11575b611d008183611ef0565b810103126103ad5750519038611ac3565b503d611cf6565b50346103ad57806003193601126103ad5760206001600160a01b0360045416604051908152f35b50346103ad57806003193601126103ad5760206001600160a01b0360055416604051908152f35b50346103ad5760206003193601126103ad5780611d81611e7c565b611d89612015565b6001600160a01b0380600554169116825260066020526040822054813b1561119a576040517f744bfe61000000000000000000000000000000000000000000000000000000008152600481019190915233602482015291908290604490829084905af1801561118f57611dfc5750604051f35b611e0590611ec0565b3861021d565b50346103ad5760206003193601126103ad5760406020916001600160a01b03611e32611e7c565b168152600183522054604051908152f35b9050346105305760206003193601126105305760ff60406020936001600160a01b03611e6d611e7c565b16815280855220541615158152f35b600435906001600160a01b03821682036103a457565b9181601f840112156103a45782359167ffffffffffffffff83116103a457602083818601950101116103a457565b67ffffffffffffffff8111610f8357604052565b6060810190811067ffffffffffffffff821117610f8357604052565b90601f601f19910116810190811067ffffffffffffffff821117610f8357604052565b67ffffffffffffffff8111610f8357601f01601f191660200190565b929192611f3b82611f13565b91611f496040519384611ef0565b8294818452818301116103a4578281602093846000960137010152565b918091926000905b828210611f86575011611f7f575050565b6000910152565b91508060209183015181860152018291611f6e565b90601f19601f602093611fb981518092818752878088019101611f66565b0116010190565b600754811015610ee95760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b9080601f830112156103a45781602061201293359101611f2f565b90565b6001600160a01b0360685416330361202957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b606854906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617606855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b156120cb57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561213c57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b156121f6576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc911673ffffffffffffffffffffffffffffffffffffffff19825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b9091901561226c575090565b81511561227c5750805190602001fd5b6122a09060405191829162461bcd60e51b8352602060048401526024830190611f9b565b0390fd5b601f8260209493601f19938186528686013760008582860101520116010190565b519063ffffffff821682036103a457565b51906bffffffffffffffffffffffff821682036103a457565b519062ffffff821682036103a457565b51906001600160a01b03821682036103a457565b90918183039261022084126103a457608084126103a4576040805167ffffffffffffffff9290916080830184811184821017610f83578152612354866122c5565b83527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff806020936123858589016122d6565b858201528288015183820152606088015160608201529761018091829101126103a45781519080820182811087821117610f835783526123c7608089016122c5565b82526123d560a089016122c5565b858301526123e560c089016122ef565b838301526123f560e089016122c5565b6060830152610100612408818a016122ef565b6080840152610120808a015161ffff811681036103a45760a085015261014091612433838c016122d6565b60c086015261016093612447858d016122c5565b60e08701528b0151908501526101a08a01519084015261246a6101c08a016122ff565b9083015261247b6101e089016122ff565b9082015295610200810151908582116103a4570182601f820112156103a4578051948511610f83578460051b9151946124b685840187611ef0565b855283808601928201019283116103a4578301905b8282106124d9575050505090565b8380916124e5846122ff565b8152019101906124cb565b6000906000906060809280600754926001600160a01b0360059080825416935b8681106125205750505050505050565b8161252a82611fc0565b90549060031b1c1680875260209060068252604090818920548251907fc7c3a19a00000000000000000000000000000000000000000000000000000000825260049081830152818b818c60249384915afa9182156127fd578c938d93612718575b5067ffffffffffffffff8093169286517f200d2ed2000000000000000000000000000000000000000000000000000000008152888184818a5afa90811561270c578f916126d3575b508b8110156126c157821490816126b7575b5061268b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcd831161267a57505060320143119081612662575b50612638575050506000198114610ed557600101612510565b985098995099505050505050508151938401526001908181850152835261265e83611ed4565b9190565b6bffffffffffffffffffffffff91501615153861261f565b60118d91634e487b7160e01b835252fd5b50505050979850989950995050505050508251948501528184015282526126b182611ed4565b60019190565b90508314386125e5565b838f602185634e487b7160e01b835252fd5b90508881813d8311612705575b6126ea8183611ef0565b8101031261270157518b81101561270157386125d3565b8e80fd5b503d6126e0565b8f8951903d90823e3d90fd5b935091503d808d853e61272b8185611ef0565b830192610100818503126127f957612742816122ff565b5061274e8782016122c5565b50858101519367ffffffffffffffff9485811161270157820181601f820112156127015780519161277e83611f13565b9061278b8a519283611ef0565b8382528a84840101116127f5579089806127a89493019101611f66565b6127b38b82016122d6565b906127c0608082016122ff565b506127cd60a082016122ff565b5060c081015194851685036127f15760e06127e891016122d6565b5092913861258b565b8d80fd5b8f80fd5b8c80fd5b85513d8e823e3d90fdfea264697066735822122000b768275b0d507d6dcc61de6c4961a9fc13bad251dd152d8f5baf8e9296f33c64736f6c634300080f0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081631307502c14611e4357508063144442e714611e0b5780631f70aa1c14611d665780632a66360614611d3f5780632b20e39714611d185780633659cfe6146119a05780634585e33b146117e35780634f1ef2861461143a57806352d1902d146113655780636e04ff0d146113065780636f93d620146112aa578063715018a61461123e57806377321c58146111c55780637d253aff1461119e57806380149449146110ee5780638a80d397146110aa5780638d3cb7e6146105ba5780638da5cb5b14610593578063af221bec1461056c578063aff4e79a14610534578063b33f9d38146104c5578063e32e8b3914610459578063f2fde38b146103b05763f8c8765e1461012957600080fd5b346103ad5760806003193601126103ad57610142611e7c565b602435906001600160a01b03908183168093036103a957604435908282168092036103a457606435918383168093036103a05760359485549460ff8660081c161595868097610393575b801561037c575b15610312578660017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083161789556102e4575b5073ffffffffffffffffffffffffffffffffffffffff199316836002541617600255826003541617600355816004541617600455600554161760055560ff825460081c161561027a576102183361206d565b610223575b50604051f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff81541690557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a13861021d565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101178755386101c6565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156101935750600160ff821614610193565b50600160ff82161061018c565b8580fd5b600080fd5b8380fd5b80fd5b50346103ad5760206003193601126103ad576103ca611e7c565b6103d2612015565b6001600160a01b038116156103ef576103ea9061206d565b604051f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346103ad5760406003193601126103ad57610473611e7c565b7f5f4c38db7b341414be18a675a08cd2c914f57fa3ac798db73bd0e0b5edc72c7660206001600160a01b03602435936104aa612015565b169283855260018252806040862055604051908152a2604051f35b50346103ad5760406003193601126103ad576104df611e7c565b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360112610530576001600160a01b039061051a612015565b1681526006602052604081206024359055604051f35b5080fd5b50346103ad5760206003193601126103ad5760406020916001600160a01b0361055b611e7c565b168152600683522054604051908152f35b50346103ad57806003193601126103ad5760206001600160a01b0360025416604051908152f35b50346103ad57806003193601126103ad5760206001600160a01b0360685416604051908152f35b50346103ad576101206003193601126103ad576105d5611e7c565b9060443567ffffffffffffffff8111610530576105f6903690600401611ff7565b9160643567ffffffffffffffff8111610dfd57610617903690600401611ff7565b9260e43567ffffffffffffffff81116103a957610638903690600401611e92565b9190926101043567ffffffffffffffff81116103a05761065c903690600401611e92565b9490936001600160a01b038316875260016020526040872054602435116110665760843542101561102257602460206001600160a01b0360035416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa8015611017578890610fdd575b674563918244f40000915010610f995760025460405190602080830152601160408301527f53697379706875732050726f746f636f6c00000000000000000000000000000060608301526060825281608081011067ffffffffffffffff608084011117610f835760378261080060e882888f8f908a908e6bffffffffffffffffffffffff198f60806001600160a01b039e016040528751602089012060a08901523360601b60c089015260601b1660d4870152602435878701526107a58151809260206101088a019101611f66565b85016107bc82518093602061010885019101611f66565b60843581830161010881019190915260a43561012882015260c4356101488201526101689584918701370101918201520360c8810160808501520160808301611ef0565b60a06080820151910120916bffffffffffffffffffffffff19604051917f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000835260601b1660148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201528af516978815610f3f57883b15610f3b576001600160a01b03928894926108fa610925936108e8604051998a9889987f703064d1000000000000000000000000000000000000000000000000000000008a523360048b015216602489015260243560448901526101206064890152610124880190611f9b565b90600319878303016084880152611f9b565b9160843560a486015260a43560c486015260c43560e4860152600319858403016101048601526122a4565b038183895af18015610dc257908491610f27575b5050604051908461094983611ed4565b602a83526040366020850137825115610f135760306020840153825160011015610f13576078602184015360295b60018111610e7f5750610e3b576109d7602960405180947f536973797068757320000000000000000000000000000000000000000000000060208301526109c78151809260208686019101611f66565b8101036009810185520183611ef0565b6004846001600160a01b0360055416604051928380927f1865c57d0000000000000000000000000000000000000000000000000000000082525afa908115610e3057610b6f93610ab8602094610b0e948a948a91610e14575b505197610a90604051958692610a538a8501976101208952610140860190611f9b565b94610a6c601f19968787820301604088015283836122a4565b926060860152624c4b4060808601523060a0860152858584030160c08601526122a4565b674563918244f4000060e08301528a6101008301523061012083015203908101845283611ef0565b610b1e60246001600160a01b0360035416936001600160a01b0360045416936040519687927f3659d666000000000000000000000000000000000000000000000000000000008a85015251809285850190611f66565b8101036004810186520184611ef0565b866040518096819582947f4000aea00000000000000000000000000000000000000000000000000000000084526004840152674563918244f400006024840152606060448401526064830190611f9b565b03925af18015610e0957610dcd575b50600554906040517f1865c57d00000000000000000000000000000000000000000000000000000000815283816004816001600160a01b0387165afa908115610dc2578491610d9e575b5063ffffffff809151169082167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111610d8a5760010103610d465760014310610d32577fffffffff00000000000000000000000000000000000000000000000000000000604051916bffffffffffffffffffffffff196020840194600019430140865260601b16604084015260e01b16605482015260388152610c6b81611ed4565b51902091808252600660205282604083205560075468010000000000000000811015610d1e57604060209483610cc88460017ffd178b9cd7ae1f7ffcc324ed72b5af3040500c49285c4806240607e04a17dc419601600755611fc0565b819291549060031b6001600160a01b03811b9283911b1691191617905581519084825286820152a180604051927facd63640134021f2a0e3727cb386f37eff4877f03025952b4d5dd67f1d4c9ac3339185a38152f35b602483634e487b7160e01b81526041600452fd5b602483634e487b7160e01b81526011600452fd5b606460405162461bcd60e51b815260206004820152601560248201527f6175746f2d617070726f76652064697361626c656400000000000000000000006044820152fd5b602485634e487b7160e01b81526011600452fd5b610dba91503d8086833e610db28183611ef0565b810190612313565b505038610bc8565b6040513d86823e3d90fd5b6020813d602011610e01575b81610de660209383611ef0565b81010312610dfd5751801515036105305738610b7e565b8280fd5b3d9150610dd9565b6040513d85823e3d90fd5b610e2891503d808c833e610db28183611ef0565b505038610a30565b6040513d87823e3d90fd5b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b906010600f82161015610eff578351821015610ee9577f3031323334353637383961626364656600000000000000000000000000000000600f82161a6020838601015360041c908015610ed55760001901610977565b602486634e487b7160e01b81526011600452fd5b634e487b7160e01b600052603260045260246000fd5b602486634e487b7160e01b81526032600452fd5b602485634e487b7160e01b81526032600452fd5b610f3090611ec0565b610dfd578238610939565b8780fd5b606460405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152fd5b634e487b7160e01b600052604160045260246000fd5b606460405162461bcd60e51b815260206004820152601b60248201527f43616d706169676e463a206e6f7420656e6f75676820244c696e6b00000000006044820152fd5b506020813d60201161100f575b81610ff760209383611ef0565b81010312610f3b57674563918244f4000090516106d6565b3d9150610fea565b6040513d8a823e3d90fd5b606460405162461bcd60e51b815260206004820152601960248201527f43616d706169676e463a20737461727420746f6f20736f6f6e000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e463a20616d6f756e742065786365656420636170000000006044820152fd5b50346103ad57806003193601126103ad576001600160a01b03606854167fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355604051f35b50346103ad5760206003193601126103ad5780611109611e7c565b611111612015565b6001600160a01b0380600554169116825260066020526040822054813b1561119a5782916024839260405194859384927fc804802200000000000000000000000000000000000000000000000000000000845260048401525af1801561118f5761117b5750604051f35b61118490611ec0565b6103ad57803861021d565b6040513d84823e3d90fd5b5050fd5b50346103ad57806003193601126103ad5760206001600160a01b0360035416604051908152f35b50346103ad5760206003193601126103ad577f34cfd2cac352320b9ae72ade3c0ccf4835c60b5aeccc74380b9c78f0fd99ec4c60206001600160a01b0361120a611e7c565b611212612015565b168073ffffffffffffffffffffffffffffffffffffffff196002541617600255604051908152a1604051f35b50346103ad57806003193601126103ad57611257612015565b60685473ffffffffffffffffffffffffffffffffffffffff19811660685560006001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346103ad5760206003193601126103ad57600435906007548210156103ad5760206001600160a01b038360076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015416604051908152f35b50346103ad5760206003193601126103ad5760043567ffffffffffffffff811161053057611338903690600401611e92565b50506113426124f0565b9061136160405192839215158352604060208401526040830190611f9b565b0390f35b50346103ad57806003193601126103ad576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036113d05760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b5060406003193601126103ad5761144f611e7c565b9060243567ffffffffffffffff8111610530573660238201121561053057611481903690602481600401359101611f2f565b916001600160a01b0392837f000000000000000000000000000000000000000000000000000000000000000016936114bb853014156120c4565b6114ea7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc958287541614612135565b6114f2612015565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115295750506103ea9192506121a6565b821691604051947f52d1902d0000000000000000000000000000000000000000000000000000000086526020958681600481885afa600091816117b4575b506115d6576084876040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b0361174a576115e4816121a6565b604051927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600085a2815115801590611742575b611627575b5050509050604051f35b61163083611ed4565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c858401527f206661696c6564000000000000000000000000000000000000000000000000006040840152803b156116d8576000828192876116c5979895519201905af43d156116cf573d6116a881611f13565b906116b66040519283611ef0565b8152600081933d92013e612260565b508038808061161d565b60609150612260565b6084856040519062461bcd60e51b82526004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b506001611618565b6084856040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918882813d83116117dc575b6117cb8183611ef0565b810103126103ad5750519038611567565b503d6117c1565b50346103ad57602080600319360112610530576004359067ffffffffffffffff8211610dfd576118196040923690600401611e92565b9080939181010312610dfd57828235926001600160a01b0390818516809503610dfd57830135806118e3575060055416838252600683526040822054813b15610dfd5782916024839260405194859384927fc804802200000000000000000000000000000000000000000000000000000000845260048401525af1801561118f576118cf575b50507faff860f486d079cb5c9e409ce38392d1b2bfbaf3feb98c17006cd1ec4e8a969191604051908152a1604051f35b6118d890611ec0565b610dfd57823861189f565b6001146118f4575b50505050604051f35b6005541683825260068352604082205490803b15610dfd576040517f744bfe61000000000000000000000000000000000000000000000000000000008152600481019290925230602483015282908290604490829084905af1801561118f5761198c575b50507f13115268ab8762c4f3ac567bf3b406763697b029819599563e47d083b3d3399e91604051908152a1388082816118eb565b61199590611ec0565b610dfd578238611958565b50346103ad57602090816003193601126103ad576119bc611e7c565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016906119f4823014156120c4565b611a237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614612135565b611a2b612015565b6040518581019181831067ffffffffffffffff841117610f83578260405285825260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014611a8757505050506103ea9192506121a6565b84939416936040517f52d1902d0000000000000000000000000000000000000000000000000000000081528781600481895afa60009181611ce9575b50611b32576084886040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b03611c7f57611b40836121a6565b604051937fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600086a2805115801590611c77575b611b84575b505050509050604051f35b611b8d84611ed4565b602784527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c868501527f206661696c6564000000000000000000000000000000000000000000000000006040850152823b15611c0d57611c02949592600092839251915af43d156116cf573d6116a881611f13565b508038808080611b79565b6084866040519062461bcd60e51b82526004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b506000611b74565b6084866040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918982813d8311611d11575b611d008183611ef0565b810103126103ad5750519038611ac3565b503d611cf6565b50346103ad57806003193601126103ad5760206001600160a01b0360045416604051908152f35b50346103ad57806003193601126103ad5760206001600160a01b0360055416604051908152f35b50346103ad5760206003193601126103ad5780611d81611e7c565b611d89612015565b6001600160a01b0380600554169116825260066020526040822054813b1561119a576040517f744bfe61000000000000000000000000000000000000000000000000000000008152600481019190915233602482015291908290604490829084905af1801561118f57611dfc5750604051f35b611e0590611ec0565b3861021d565b50346103ad5760206003193601126103ad5760406020916001600160a01b03611e32611e7c565b168152600183522054604051908152f35b9050346105305760206003193601126105305760ff60406020936001600160a01b03611e6d611e7c565b16815280855220541615158152f35b600435906001600160a01b03821682036103a457565b9181601f840112156103a45782359167ffffffffffffffff83116103a457602083818601950101116103a457565b67ffffffffffffffff8111610f8357604052565b6060810190811067ffffffffffffffff821117610f8357604052565b90601f601f19910116810190811067ffffffffffffffff821117610f8357604052565b67ffffffffffffffff8111610f8357601f01601f191660200190565b929192611f3b82611f13565b91611f496040519384611ef0565b8294818452818301116103a4578281602093846000960137010152565b918091926000905b828210611f86575011611f7f575050565b6000910152565b91508060209183015181860152018291611f6e565b90601f19601f602093611fb981518092818752878088019101611f66565b0116010190565b600754811015610ee95760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b9080601f830112156103a45781602061201293359101611f2f565b90565b6001600160a01b0360685416330361202957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b606854906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617606855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b156120cb57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561213c57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b156121f6576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc911673ffffffffffffffffffffffffffffffffffffffff19825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b9091901561226c575090565b81511561227c5750805190602001fd5b6122a09060405191829162461bcd60e51b8352602060048401526024830190611f9b565b0390fd5b601f8260209493601f19938186528686013760008582860101520116010190565b519063ffffffff821682036103a457565b51906bffffffffffffffffffffffff821682036103a457565b519062ffffff821682036103a457565b51906001600160a01b03821682036103a457565b90918183039261022084126103a457608084126103a4576040805167ffffffffffffffff9290916080830184811184821017610f83578152612354866122c5565b83527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff806020936123858589016122d6565b858201528288015183820152606088015160608201529761018091829101126103a45781519080820182811087821117610f835783526123c7608089016122c5565b82526123d560a089016122c5565b858301526123e560c089016122ef565b838301526123f560e089016122c5565b6060830152610100612408818a016122ef565b6080840152610120808a015161ffff811681036103a45760a085015261014091612433838c016122d6565b60c086015261016093612447858d016122c5565b60e08701528b0151908501526101a08a01519084015261246a6101c08a016122ff565b9083015261247b6101e089016122ff565b9082015295610200810151908582116103a4570182601f820112156103a4578051948511610f83578460051b9151946124b685840187611ef0565b855283808601928201019283116103a4578301905b8282106124d9575050505090565b8380916124e5846122ff565b8152019101906124cb565b6000906000906060809280600754926001600160a01b0360059080825416935b8681106125205750505050505050565b8161252a82611fc0565b90549060031b1c1680875260209060068252604090818920548251907fc7c3a19a00000000000000000000000000000000000000000000000000000000825260049081830152818b818c60249384915afa9182156127fd578c938d93612718575b5067ffffffffffffffff8093169286517f200d2ed2000000000000000000000000000000000000000000000000000000008152888184818a5afa90811561270c578f916126d3575b508b8110156126c157821490816126b7575b5061268b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcd831161267a57505060320143119081612662575b50612638575050506000198114610ed557600101612510565b985098995099505050505050508151938401526001908181850152835261265e83611ed4565b9190565b6bffffffffffffffffffffffff91501615153861261f565b60118d91634e487b7160e01b835252fd5b50505050979850989950995050505050508251948501528184015282526126b182611ed4565b60019190565b90508314386125e5565b838f602185634e487b7160e01b835252fd5b90508881813d8311612705575b6126ea8183611ef0565b8101031261270157518b81101561270157386125d3565b8e80fd5b503d6126e0565b8f8951903d90823e3d90fd5b935091503d808d853e61272b8185611ef0565b830192610100818503126127f957612742816122ff565b5061274e8782016122c5565b50858101519367ffffffffffffffff9485811161270157820181601f820112156127015780519161277e83611f13565b9061278b8a519283611ef0565b8382528a84840101116127f5579089806127a89493019101611f66565b6127b38b82016122d6565b906127c0608082016122ff565b506127cd60a082016122ff565b5060c081015194851685036127f15760e06127e891016122d6565b5092913861258b565b8d80fd5b8f80fd5b8c80fd5b85513d8e823e3d90fdfea264697066735822122000b768275b0d507d6dcc61de6c4961a9fc13bad251dd152d8f5baf8e9296f33c64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelUpKeep(address)": {
        "details": "use in development"
      },
      "checkUpkeep(bytes)": {
        "details": "check Upkeep"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "details": "two kind of perform 0: cancel upKeep of campaign 1: withdraw upKeep $link"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "saveOwnerInAdmin()": {
        "details": "compatible with hardhat deploy, maybe removed later"
      },
      "setKeepUpRecords(address,(uint256))": {
        "details": "use in development, manually edit data"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawUpKeep(address)": {
        "details": "use in development"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5707,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "whiteUsers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5712,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "whiteTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20Upgradeable)686,t_uint256)"
      },
      {
        "astId": 5715,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "i_campaign",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ICampaign)7059"
      },
      {
        "astId": 5718,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "i_link",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LinkTokenInterface)325"
      },
      {
        "astId": 5720,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "registrar",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5723,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "i_registry",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AutomationRegistryInterface)210"
      },
      {
        "astId": 5731,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "keepUpRecords",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(UpKeepInfo)5726_storage)"
      },
      {
        "astId": 5734,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "OnGoingCampaigns",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5738,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 464,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "_initialized",
        "offset": 0,
        "slot": "53",
        "type": "t_uint8"
      },
      {
        "astId": 467,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "_initializing",
        "offset": 1,
        "slot": "53",
        "type": "t_bool"
      },
      {
        "astId": 2340,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 336,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "_owner",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 456,
        "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AutomationRegistryInterface)210": {
        "encoding": "inplace",
        "label": "contract AutomationRegistryInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ICampaign)7059": {
        "encoding": "inplace",
        "label": "contract ICampaign",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)686": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)325": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UpKeepInfo)5726_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CampaignFactoryStorage.UpKeepInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UpKeepInfo)5726_storage"
      },
      "t_mapping(t_contract(IERC20Upgradeable)686,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)686",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UpKeepInfo)5726_storage": {
        "encoding": "inplace",
        "label": "struct CampaignFactoryStorage.UpKeepInfo",
        "members": [
          {
            "astId": 5725,
            "contract": "contracts/CampaignFactoryUpgradable.sol:CampaignFactoryUpgradable",
            "label": "upKeepId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}