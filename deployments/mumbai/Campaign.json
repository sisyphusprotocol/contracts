{
  "address": "0x800E663Cd1f29dbbca23F460743B6A8e4a6f4DF2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRenderer",
          "name": "render_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentEpoch",
          "type": "uint256"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "EvCampaignUriSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cheaterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        }
      ],
      "name": "EvChallenge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cheaterId",
          "type": "uint256"
        }
      ],
      "name": "EvCheat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentUri",
          "type": "string"
        }
      ],
      "name": "EvCheckIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EvClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EvFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        }
      ],
      "name": "EvJudgement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenList",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "status",
          "type": "bool[]"
        }
      ],
      "name": "EvModifyRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EvRegisterSuccessfully",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "EvSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EvSignUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EvSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        }
      ],
      "name": "EvVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "host",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hostReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "EvWithDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_challengeIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_idx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "allowlists",
          "type": "uint256[]"
        }
      ],
      "name": "admit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cheaterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengeJudgedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challengeRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "challengerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cheaterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "agreeCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disagreeCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "challengeRiseTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "legal",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheatCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenProperties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ICampaign.TokenStatus",
              "name": "tokenStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "pendingReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICampaign.TokenProperty",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hostReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTime_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPeriod_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodLength_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "campaignUri_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        }
      ],
      "name": "judgement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEpochEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "lists",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "targetStatuses",
          "type": "bool[]"
        }
      ],
      "name": "modifyRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "string",
          "name": "contentUri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "render",
      "outputs": [
        {
          "internalType": "contract IRenderer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "setCampaignUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum Consts.CampaignStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "successTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEpochsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "choice",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "choice",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9dbf5aed56dfe201dfc64a0492f75418b56b4a64dd923a832ccc6abba92301d",
  "receipt": {
    "to": null,
    "from": "0x11F2241Bf12f1a640f78e5d1A0d3302D77fB5e78",
    "contractAddress": "0x800E663Cd1f29dbbca23F460743B6A8e4a6f4DF2",
    "transactionIndex": 7,
    "gasUsed": "4121067",
    "logsBloom": "0x
    "blockHash": "0x2cf2c199eefc04e69555dd521a59c878e556a2499b440f4f2311326423cda11f",
    "transactionHash": "0xf9dbf5aed56dfe201dfc64a0492f75418b56b4a64dd923a832ccc6abba92301d",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 29118733,
        "transactionHash": "0xf9dbf5aed56dfe201dfc64a0492f75418b56b4a64dd923a832ccc6abba92301d",
        "address": "0x800E663Cd1f29dbbca23F460743B6A8e4a6f4DF2",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 15,
        "blockHash": "0x2cf2c199eefc04e69555dd521a59c878e556a2499b440f4f2311326423cda11f"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 29118733,
        "transactionHash": "0xf9dbf5aed56dfe201dfc64a0492f75418b56b4a64dd923a832ccc6abba92301d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000011f2241bf12f1a640f78e5d1a0d3302d77fb5e78",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000015f62205f22500000000000000000000000000000000000000000000000000284a58ca6394c7da0000000000000000000000000000000000000000000008acde2f4ad3c3e3de4f000000000000000000000000000000000000000000000000283462a85da2a2da0000000000000000000000000000000000000000000008acde4540f5c9d6034f",
        "logIndex": 16,
        "blockHash": "0x2cf2c199eefc04e69555dd521a59c878e556a2499b440f4f2311326423cda11f"
      }
    ],
    "blockNumber": 29118733,
    "cumulativeGasUsed": "5725129",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x389A9a9097766E58DaAc092d0A358f8Ac3F820cB"
  ],
  "numDeployments": 9,
  "solcInputHash": "549f2d2e77c3f1a127a35f8e8eddb501",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRenderer\",\"name\":\"render_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"EvCampaignUriSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cheaterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"}],\"name\":\"EvChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cheaterId\",\"type\":\"uint256\"}],\"name\":\"EvCheat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentUri\",\"type\":\"string\"}],\"name\":\"EvCheckIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EvFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"}],\"name\":\"EvJudgement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenList\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"status\",\"type\":\"bool[]\"}],\"name\":\"EvModifyRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EvRegisterSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"EvSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EvSignUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EvSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"}],\"name\":\"EvVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hostReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"EvWithDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_challengeIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_idx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"allowlists\",\"type\":\"uint256[]\"}],\"name\":\"admit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cheaterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeJudgedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengeRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"challengerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cheaterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agreeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disagreeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengeRiseTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"legal\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheatCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenProperties\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ICampaign.TokenStatus\",\"name\":\"tokenStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ICampaign.TokenProperty\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hostReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLength_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"campaignUri_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"}],\"name\":\"judgement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lists\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"targetStatuses\",\"type\":\"bool[]\"}],\"name\":\"modifyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"contentUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"render\",\"outputs\":[{\"internalType\":\"contract IRenderer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setCampaignUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum Consts.CampaignStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEpochsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"for implementation of erc1167 implementation\",\"kind\":\"dev\",\"methods\":{\"admit(uint256[])\":{\"details\":\"campaign owner admit several address to participate this campaign\",\"params\":{\"allowlists\":\"allowed tokenId array\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"checkIn(string,uint256)\":{\"details\":\"user check in\",\"params\":{\"contentUri\":\"string of ipfs uri or other decentralize storage\"}},\"claim(uint256)\":{\"details\":\"user claim reward after campaign settled\"},\"claimAndWithdraw(uint256)\":{\"details\":\"host who participate the campaign claim reward and withdraw host reward\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getTokenProperties(uint256)\":{\"details\":\"read Token properties\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"modifyRegistry(uint256[],bool[])\":{\"details\":\"once campaign owner admit some address by mistakecan modify via this function but more gas-expensive\",\"params\":{\"lists\":\"modified tokenId list array\",\"targetStatuses\":\"corresponding status array\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"settle()\":{\"details\":\"everyone can call the function to settle reward\"},\"signUp()\":{\"details\":\"user stake token and want to participate this campaign\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"host withdraw host reward\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Campaign.sol\":\"Campaign\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"contracts/Campaign.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts/utils/Base64.sol';\\nimport '@chainlink/contracts/src/v0.8/AutomationCompatible.sol';\\n\\nimport './interface/ICampaign.sol';\\nimport './interface/IRenderer.sol';\\n\\nimport { Consts } from './Consts.sol';\\nimport { CampaignBase } from './CampaignBase.sol';\\n\\n/// @dev for implementation of erc1167 implementation\\ncontract Campaign is CampaignBase {\\n  // implementation cannot be initialize\\n  constructor(IRenderer render_) CampaignBase(render_) initializer {}\\n}\\n\",\"keccak256\":\"0x86bfede851e2263aba0094076a1002a23e4956ef88c2e0838ed92deee3a3eac4\",\"license\":\"BUSL-1.1\"},\"contracts/CampaignBase.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts/utils/Base64.sol';\\nimport '@chainlink/contracts/src/v0.8/AutomationCompatible.sol';\\n\\nimport './interface/ICampaign.sol';\\nimport './interface/IRenderer.sol';\\n\\nimport { Consts } from './Consts.sol';\\n\\nimport 'hardhat/console.sol';\\n\\n// TODO: merkle tree root to valid user, don't use enumerable\\ncontract CampaignBase is ICampaign, OwnableUpgradeable, ERC721Upgradeable, AutomationCompatible {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  IRenderer public immutable render;\\n\\n  IERC20Upgradeable public targetToken;\\n  uint256 public requiredAmount;\\n  Consts.CampaignStatus public override status;\\n\\n  string public campaignUri;\\n  uint256 public startTime;\\n  uint256 public override totalEpochsCount;\\n  uint256 public override period;\\n\\n  uint256 public lastEpochEndTime;\\n  uint256 public override currentEpoch;\\n\\n  uint256 public _idx;\\n  uint256 public _challengeIdx;\\n  uint256 public challengeJudgedCount;\\n  uint256 public cheatCount;\\n\\n  uint256 public sharedReward;\\n  uint256 public hostReward;\\n  uint256 public protocolFee;\\n  uint256 public successTokensCount;\\n\\n  // epoch => tokenId => Record\\n  mapping(uint256 => mapping(uint256 => Record)) public records;\\n\\n  // tokenId => token status\\n  mapping(uint256 => TokenProperty) private s_properties;\\n\\n  //challengeRecordId => tokenId => voter\\n  mapping(uint256 => mapping(uint256 => Voter)) public voters;\\n\\n  //challengeRecordId => ChallengeRecord\\n  mapping(uint256 => ChallengeRecord) public challengeRecords;\\n\\n  constructor(IRenderer render_) {\\n    render = render_;\\n  }\\n\\n  function initialize(\\n    address owner,\\n    IERC20Upgradeable token_,\\n    uint256 amount_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 startTime_,\\n    uint256 totalPeriod_,\\n    uint256 periodLength_,\\n    string memory campaignUri_\\n  ) public override initializer {\\n    require(address(token_) != address(0), 'Campaign: invalid token');\\n    require(amount_ != 0, 'Campaign: invalid amount');\\n\\n    _transferOwnership(owner);\\n    __ERC721_init_unchained(name_, symbol_);\\n\\n    targetToken = token_;\\n    requiredAmount = amount_;\\n    startTime = startTime_;\\n    lastEpochEndTime = startTime_;\\n    totalEpochsCount = totalPeriod_;\\n    period = periodLength_;\\n    campaignUri = campaignUri_;\\n  }\\n\\n  function setCampaignUri(string calldata newUri) external override onlyOwner {\\n    campaignUri = newUri;\\n    emit EvCampaignUriSet(campaignUri);\\n  }\\n\\n  //\\n  /**\\n   * @dev user stake token and want to participate this campaign\\n   */\\n  function signUp() external override onlyNotStarted {\\n    require(balanceOf(msg.sender) == 0, 'Campaign: already signed');\\n\\n    IERC20Upgradeable(targetToken).safeTransferFrom(msg.sender, address(this), requiredAmount);\\n\\n    uint256 tokenId = _idx;\\n    _idx += 1;\\n\\n    _safeMint(msg.sender, tokenId);\\n\\n    s_properties[tokenId].tokenStatus = TokenStatus.SIGNED;\\n    s_properties[tokenId].pendingReward = requiredAmount;\\n\\n    emit EvSignUp(tokenId);\\n  }\\n\\n  /**\\n   * @dev campaign owner admit several address to participate this campaign\\n   * @param allowlists allowed tokenId array\\n   */\\n  function admit(uint256[] calldata allowlists) external onlyNotStarted onlyOwner {\\n    for (uint256 i = 0; i < allowlists.length; i++) {\\n      uint256 tokenId = allowlists[i];\\n\\n      TokenProperty memory property = s_properties[tokenId];\\n\\n      require(property.pendingReward == requiredAmount, 'Campaign: stake not match');\\n      require(property.tokenStatus == TokenStatus.SIGNED, 'Campaign: not signed up');\\n\\n      s_properties[tokenId].tokenStatus = TokenStatus.ADMITTED;\\n\\n      emit EvRegisterSuccessfully(tokenId);\\n    }\\n  }\\n\\n  /**\\n   * @dev once campaign owner admit some address by mistake\\n   * @dev can modify via this function but more gas-expensive\\n   * @param lists modified tokenId list array\\n   * @param targetStatuses corresponding status array\\n   */\\n  function modifyRegistry(uint256[] calldata lists, bool[] calldata targetStatuses) external onlyNotStarted onlyOwner {\\n    for (uint256 i = 1; i < lists.length; i++) {\\n      uint256 tokenId = lists[i];\\n      bool targetStatus = targetStatuses[i];\\n      if (targetStatus) {\\n        // require(s_properties[tokenId].tokenStatus == TokenStatus.SIGNED, 'Campaign: not signed');\\n        s_properties[tokenId].tokenStatus = TokenStatus.ADMITTED;\\n      } else {\\n        // require(s_properties[tokenId].tokenStatus == TokenStatus.ADMITTED, 'Campaign: not admitted');\\n        s_properties[tokenId].tokenStatus = TokenStatus.SIGNED;\\n      }\\n    }\\n    emit EvModifyRegistry(lists, targetStatuses);\\n  }\\n\\n  /**\\n   * @dev user check in\\n   * @param contentUri string of ipfs uri or other decentralize storage\\n   */\\n  function checkIn(string calldata contentUri, uint256 tokenId)\\n    external\\n    override\\n    onlyTokenHolder(tokenId)\\n    onlyStarted\\n    onlyAdmitted(tokenId)\\n  {\\n    _checkEpoch();\\n    records[currentEpoch][tokenId] = Record(contentUri);\\n\\n    emit EvCheckIn(currentEpoch, tokenId, contentUri);\\n  }\\n\\n  function challenge(\\n    uint256 challengerId,\\n    uint256 cheaterId,\\n    uint256 epoch\\n  )\\n    external\\n    override\\n    onlyTokenHolder(challengerId)\\n    onlyStarted\\n    onlyAdmitted(challengerId)\\n    onlyAdmitted(cheaterId)\\n    onlyChallengeAllowed\\n  {\\n    require(challengerId != cheaterId, 'Campaign: cannot challenge self');\\n    uint256 challengeRecordId = _challengeIdx;\\n    _challengeIdx += 1;\\n\\n    challengeRecords[challengeRecordId].challengerId = challengerId;\\n    challengeRecords[challengeRecordId].cheaterId = cheaterId;\\n    challengeRecords[challengeRecordId].challengeRiseTime = block.timestamp;\\n    challengeRecords[challengeRecordId].epoch = epoch;\\n\\n    emit EvChallenge(challengerId, cheaterId, challengeRecordId);\\n  }\\n\\n  function vote(\\n    uint256 tokenId,\\n    uint256 challengeRecordId,\\n    bool choice\\n  )\\n    external\\n    override\\n    onlyTokenHolder(tokenId)\\n    onlyStarted\\n    onlyAdmitted(tokenId)\\n    onlyChallengeExist(challengeRecordId)\\n    onlyChallengeNotEnded(challengeRecordId)\\n  {\\n    require(\\n      tokenId != challengeRecords[challengeRecordId].challengerId && tokenId != challengeRecords[challengeRecordId].cheaterId,\\n      'Challenge: involved cannot vote'\\n    );\\n\\n    voters[challengeRecordId][tokenId].voted = true;\\n    voters[challengeRecordId][tokenId].choice = choice;\\n\\n    if (choice == true) {\\n      challengeRecords[challengeRecordId].agreeCount += 1;\\n    } else {\\n      challengeRecords[challengeRecordId].disagreeCount += 1;\\n    }\\n\\n    emit EvVote(tokenId, challengeRecordId);\\n  }\\n\\n  function judgement(uint256 challengeRecordId)\\n    external\\n    override\\n    onlyChallengeEnded(challengeRecordId)\\n    onlyChallengeExist(challengeRecordId)\\n    onlyNotJudged(challengeRecordId)\\n  {\\n    uint256 _challengerId = challengeRecords[challengeRecordId].challengerId;\\n    uint256 _cheaterId = challengeRecords[challengeRecordId].cheaterId;\\n    uint256 _count = challengeRecords[challengeRecordId].agreeCount + challengeRecords[challengeRecordId].disagreeCount;\\n\\n    /// @dev _idx subtract 2 since the challenger and cheater cannot vote\\n    require(_count > ((_idx - 2) * Consts.legalVoterRatio) / Consts.SCALE, 'Challenge: not enough voter');\\n\\n    challengeJudgedCount += 1;\\n\\n    bool _result = (challengeRecords[challengeRecordId].agreeCount > challengeRecords[challengeRecordId].disagreeCount);\\n    challengeRecords[challengeRecordId].result = _result;\\n    challengeRecords[challengeRecordId].state = true;\\n\\n    if (_result) {\\n      s_properties[_cheaterId].tokenStatus = TokenStatus.FAILED;\\n\\n      uint256 _tranReward = s_properties[_cheaterId].pendingReward;\\n      s_properties[_cheaterId].pendingReward = 0;\\n      s_properties[challengeRecords[challengeRecordId].challengerId].pendingReward +=\\n        (_tranReward * Consts.challengerSuccessRatio) /\\n        Consts.SCALE;\\n      sharedReward += (_tranReward * Consts.successSharedRatio) / Consts.SCALE;\\n      protocolFee += (_tranReward * Consts.successProtocolRatio) / Consts.SCALE;\\n\\n      cheatCount += 1;\\n\\n      emit EvFailure(_cheaterId);\\n      emit EvCheat(_cheaterId);\\n    } else {\\n      uint256 _tranReward = ((s_properties[_challengerId].pendingReward) * Consts.challengerFailRatio) / Consts.SCALE;\\n      s_properties[challengeRecords[challengeRecordId].challengerId].pendingReward =\\n        ((s_properties[challengeRecords[challengeRecordId].challengerId].pendingReward) *\\n          (Consts.SCALE - Consts.challengerFailRatio)) /\\n        Consts.SCALE;\\n      sharedReward += (_tranReward * Consts.failSharedRatio) / Consts.SCALE;\\n      protocolFee += (_tranReward * Consts.failProtocolRatio) / Consts.SCALE;\\n    }\\n\\n    emit EvJudgement(challengeRecordId);\\n  }\\n\\n  function forceEnd() external onlyEnoughCheater onlyAllJudged {\\n    _forceSettle();\\n  }\\n\\n  /**\\n   * @dev everyone can call the function to settle reward\\n   */\\n  function settle() external override {\\n    _settle();\\n  }\\n\\n  /**\\n   * @dev user claim reward after campaign settled\\n   */\\n  function claim(uint256 tokenId) external override onlyTokenHolder(tokenId) onlyAllJudged {\\n    _claim(tokenId);\\n  }\\n\\n  /**\\n   * @dev host who participate the campaign claim reward and withdraw host reward\\n   */\\n  function claimAndWithdraw(uint256 tokenId) external override onlyOwner onlyTokenHolder(tokenId) onlyAllJudged {\\n    _claim(tokenId);\\n    _withdraw();\\n  }\\n\\n  /**\\n   * @dev host withdraw host reward\\n   */\\n  function withdraw() external override onlyOwner onlySettled {\\n    _withdraw();\\n  }\\n\\n  /**\\n   * @dev\\n   */\\n  function checkUpkeep(\\n    bytes calldata /* checkData */\\n  ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n    // check whether the campaign end\\n    if (block.timestamp > startTime + totalEpochsCount * period) {\\n      upkeepNeeded = true;\\n      performData = abi.encode(uint256(0));\\n      return (upkeepNeeded, performData);\\n      // check whether it's time to update epoch\\n    } else if (block.timestamp > lastEpochEndTime + period) {\\n      upkeepNeeded = true;\\n      performData = abi.encode(uint256(1));\\n      return (upkeepNeeded, performData);\\n    }\\n  }\\n\\n  /**\\n   *\\n   */\\n  function performUpkeep(bytes calldata performData) external override {\\n    uint256 kind = abi.decode(performData, (uint256));\\n    if (kind == 0) {\\n      _settle();\\n    } else if (kind == 1) {\\n      _checkEpoch();\\n    } else {\\n      revert('Nothing To DO');\\n    }\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    string memory metadata = Base64.encode(\\n      bytes(\\n        string.concat(\\n          '{\\\"name\\\": \\\"',\\n          name(),\\n          '\\\",\\\"description\\\":\\\"',\\n          '',\\n          '\\\",\\\"image\\\":\\\"',\\n          'data:image/svg+xml;base64,',\\n          Base64.encode(bytes(render.renderTokenById(tokenId))),\\n          '\\\"}'\\n        )\\n      )\\n    );\\n\\n    return string.concat('data:application/json;base64,', metadata);\\n  }\\n\\n  /**\\n   * @dev read Token properties\\n   */\\n  function getTokenProperties(uint256 tokenId) external view override returns (TokenProperty memory) {\\n    return s_properties[tokenId];\\n  }\\n\\n  /**\\n   * @dev\\n   */\\n  function _claim(uint256 tokenId) private {\\n    if (status != Consts.CampaignStatus.SETTLED) {\\n      _settle();\\n    }\\n\\n    uint256 reward = s_properties[tokenId].pendingReward == 0\\n      ? 0\\n      : s_properties[tokenId].pendingReward + sharedReward / successTokensCount;\\n\\n    IERC20Upgradeable(targetToken).safeTransfer(msg.sender, reward);\\n\\n    s_properties[tokenId].pendingReward = 0;\\n\\n    emit EvClaimReward(tokenId, reward);\\n  }\\n\\n  /**\\n   * @dev host withdraw host reward\\n   */\\n  function _withdraw() private {\\n    uint256 reward = hostReward;\\n    hostReward = 0;\\n\\n    IERC20Upgradeable(targetToken).safeTransfer(msg.sender, reward);\\n\\n    IERC20Upgradeable(targetToken).safeTransfer(Consts.PROTOCOL_RECIPIENT, protocolFee);\\n\\n    emit EvWithDraw(msg.sender, reward, protocolFee);\\n  }\\n\\n  /**\\n   * @dev someone will call the function to settle the campaign\\n   */\\n  function _settle() private onlyEnded {\\n    successTokensCount = _idx;\\n    for (uint256 tokenId = 0; tokenId < _idx; tokenId++) {\\n      for (uint256 j = 0; j < totalEpochsCount; j++) {\\n        string memory content = records[j][tokenId].contentUri;\\n        if (bytes(content).length == 0) {\\n          uint256 penalty = s_properties[tokenId].pendingReward;\\n          hostReward += (penalty * Consts.HOST_REWARD) / Consts.DECIMAL;\\n          protocolFee += (penalty * Consts.PROTOCOL_FEE) / Consts.DECIMAL;\\n          sharedReward += penalty - hostReward - protocolFee;\\n          s_properties[tokenId].pendingReward = 0;\\n          s_properties[tokenId].tokenStatus = TokenStatus.FAILED;\\n          successTokensCount = successTokensCount - 1;\\n          emit EvFailure(tokenId);\\n          break;\\n        }\\n      }\\n      emit EvSuccess(tokenId);\\n    }\\n    // If nobody success, sharedReward come to protocol\\n    if (successTokensCount == 0) {\\n      protocolFee += sharedReward;\\n      sharedReward = 0;\\n    }\\n    status = Consts.CampaignStatus.SETTLED;\\n\\n    emit EvSettle(msg.sender);\\n  }\\n\\n  function _forceSettle() private onlyEnoughCheater {\\n    successTokensCount = _idx;\\n    for (uint256 tokenId = 0; tokenId < _idx; tokenId++) {\\n      for (uint256 j = 0; j < totalEpochsCount; j++) {\\n        string memory content = records[j][tokenId].contentUri;\\n        if (bytes(content).length == 0) {\\n          uint256 penalty = s_properties[tokenId].pendingReward;\\n          hostReward += (penalty * Consts.HOST_REWARD) / Consts.DECIMAL;\\n          protocolFee += (penalty * Consts.PROTOCOL_FEE) / Consts.DECIMAL;\\n          sharedReward += penalty - hostReward - protocolFee;\\n          s_properties[tokenId].pendingReward = 0;\\n          successTokensCount = successTokensCount - 1;\\n          emit EvFailure(tokenId);\\n          break;\\n        }\\n      }\\n      emit EvSuccess(tokenId);\\n    }\\n    // If nobody success, sharedReward come to protocol\\n    if (successTokensCount == 0) {\\n      protocolFee += sharedReward;\\n      sharedReward = 0;\\n    }\\n    status = Consts.CampaignStatus.SETTLED;\\n\\n    emit EvSettle(msg.sender);\\n  }\\n\\n  function _checkEpoch() private {\\n    if (block.timestamp > lastEpochEndTime + period) {\\n      uint256 n = (block.timestamp - lastEpochEndTime) / period;\\n      currentEpoch += n;\\n      lastEpochEndTime += period * n;\\n    }\\n    emit EpochUpdated(currentEpoch);\\n\\n    require(currentEpoch < totalEpochsCount, 'Campaign: checkEpoch too late');\\n  }\\n\\n  /// @dev Do not allow transfer\\n  function _beforeTokenTransfer(\\n    address from,\\n    address,\\n    uint256\\n  ) internal pure override {\\n    require(from == address(0), 'Campaign: Could not transfer');\\n  }\\n\\n  function _readTokenHolder(uint256 tokenId) private view {\\n    require(ownerOf(tokenId) == msg.sender, 'Campaign: not token holder');\\n  }\\n\\n  function _getAdmitted(uint256 tokenId) internal view {\\n    require(s_properties[tokenId].tokenStatus == TokenStatus.ADMITTED, 'Campaign: not admitted');\\n  }\\n\\n  function _readChallengeExist(uint256 challengeRecordId) private view {\\n    require(challengeRecordId < _challengeIdx, 'ChallengeRecord: not exist');\\n  }\\n\\n  function _checkSettled() private view {\\n    require(status == Consts.CampaignStatus.SETTLED, 'Campaign: not settled');\\n  }\\n\\n  function _checkEnded() private view {\\n    require(block.timestamp > startTime + totalEpochsCount * period, 'Campaign: not ended');\\n  }\\n\\n  function _checkNotStarted() private view {\\n    require(block.timestamp < startTime, 'Campaign: already started');\\n  }\\n\\n  function _checkStarted() private view {\\n    require(block.timestamp >= startTime, 'Campaign: not start');\\n  }\\n\\n  function _checkAllJudged() private view {\\n    require(_challengeIdx == challengeJudgedCount, 'Challenge: not all judged');\\n  }\\n\\n  function _checkEnoughCheater() private view {\\n    require(cheatCount >= (_idx * Consts.cheaterRatio) / Consts.SCALE, 'Campaign: not enough cheater');\\n  }\\n\\n  modifier onlyTokenHolder(uint256 tokenId) {\\n    _readTokenHolder(tokenId);\\n    _;\\n  }\\n\\n  modifier onlySettled() {\\n    _checkSettled();\\n    _;\\n  }\\n\\n  modifier onlyEnded() {\\n    _checkEnded();\\n    _;\\n  }\\n\\n  modifier onlyStarted() {\\n    _checkStarted();\\n    _;\\n  }\\n\\n  modifier onlyNotStarted() {\\n    _checkNotStarted();\\n    _;\\n  }\\n\\n  modifier onlyAdmitted(uint256 tokenId) {\\n    _getAdmitted(tokenId);\\n    _;\\n  }\\n\\n  modifier onlyChallengeExist(uint256 challengeRecordId) {\\n    _readChallengeExist(challengeRecordId);\\n    _;\\n  }\\n\\n  modifier onlyChallengeNotEnded(uint256 challengeRecordId) {\\n    require(block.timestamp < challengeRecords[challengeRecordId].challengeRiseTime + 7 days, 'Challenge: ended');\\n    _;\\n  }\\n\\n  modifier onlyChallengeEnded(uint256 challengeRecordId) {\\n    require(block.timestamp >= challengeRecords[challengeRecordId].challengeRiseTime + 7 days, 'Challenge: not ended');\\n    _;\\n  }\\n\\n  modifier onlyChallengeAllowed() {\\n    require(block.timestamp <= startTime + totalEpochsCount * period + 1 days, 'Challenge: start challenge too late');\\n    _;\\n  }\\n\\n  modifier onlyNotJudged(uint256 challengeRecordId) {\\n    require(challengeRecords[challengeRecordId].state == false, 'Challenge: already judged');\\n    _;\\n  }\\n\\n  modifier onlyAllJudged() {\\n    _checkAllJudged();\\n    _;\\n  }\\n\\n  modifier onlyEnoughCheater() {\\n    _checkEnoughCheater();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x4e85573b08f1e895062fcd477d26f32ee707866adee554f22f629233470e0b1d\",\"license\":\"BUSL-1.1\"},\"contracts/Consts.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.15;\\n\\ninterface KeeperRegistrarInterface {\\n  function register(\\n    string memory name,\\n    bytes calldata encryptedEmail,\\n    address upkeepContract,\\n    uint32 gasLimit,\\n    address adminAddress,\\n    bytes calldata checkData,\\n    uint96 amount,\\n    uint8 source,\\n    address sender\\n  ) external;\\n}\\n\\nlibrary Consts {\\n  //\\n  uint256 public constant DECIMAL = 10**6;\\n  uint256 public constant PROTOCOL_FEE = 10**5;\\n  uint256 public constant HOST_REWARD = 2 * 10**5;\\n\\n  /// @dev challenge related constant, in percent\\n  /// @dev minimal required vote ratio for a valid challenge judgement\\n  uint8 public constant legalVoterRatio = 66;\\n  /// @dev the campaign exit if enough people are challenged as cheater\\n  uint8 public constant cheaterRatio = 30;\\n  /// @dev if challenge success, how many shared to challenger\\n  uint8 public constant challengerSuccessRatio = 60;\\n  /// @dev if challenge success, how many shared to voter\\n  uint8 public constant successSharedRatio = 30;\\n  /// @dev if challenge success, how many shared to protocol\\n  uint8 public constant successProtocolRatio = 10;\\n  /// @dev if challenge fail, how many decrease\\n  uint8 public constant challengerFailRatio = 40;\\n  /// @dev if challenge fail, how many shared to voter\\n  uint8 public constant failSharedRatio = 75;\\n  /// @dev if challenge success, how many shared to protocol\\n  uint8 public constant failProtocolRatio = 25;\\n  uint8 public constant SCALE = 100;\\n\\n  bytes32 public constant SALT = keccak256(abi.encode('Sisyphus Protocol'));\\n\\n  // tmp vitalik.eth\\n  address public constant PROTOCOL_RECIPIENT = 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045;\\n  address public constant UPKEEP_ADMIN = 0x11F2241Bf12f1a640f78e5d1A0d3302D77fB5e78;\\n\\n  // chainlink\\n  bytes4 public constant registerSig = KeeperRegistrarInterface.register.selector;\\n  // LinkSend\\n  uint96 public constant MIN_LINK_AMOUNT = 5000000000000000000;\\n  // upKeep GasLimit\\n  uint32 public constant UPKEEP_GAS_LIMIT = 5000000;\\n\\n  // upKeep Cancel Delay same as the number in KeeperRegistry\\n  uint256 public constant CANCELATION_DELAY = 50;\\n\\n  uint64 public constant UINT64_MAX = 2**64 - 1;\\n\\n  enum CampaignType {\\n    IN_VALID,\\n    DAILY,\\n    WEEKLY\\n  }\\n\\n  enum CampaignStatus {\\n    IN_VALID,\\n    NOT_START,\\n    ON_GOING,\\n    ENDED,\\n    SETTLED\\n  }\\n}\\n\",\"keccak256\":\"0xc8e3d12b91caa7da8f9466d2fd6ad70eff0be96a9de3df7e345cb34cde6a14fd\",\"license\":\"BUSL-1.1\"},\"contracts/interface/ICampaign.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport { Consts } from '../Consts.sol';\\n\\ninterface ICampaign {\\n  //for voted: true = voted; false = not voted;\\n  //for choice: true = think cheat; false = think not cheat;\\n  struct Voter {\\n    bool voted;\\n    bool choice;\\n  }\\n\\n  //for result: true = cheat; false = not cheat;\\n  //for state: true = over; false = working;\\n  //for legal: true = over 2/3; false = not enough voter;\\n  struct ChallengeRecord {\\n    uint256 challengerId;\\n    uint256 cheaterId;\\n    uint256 epoch;\\n    uint256 agreeCount;\\n    uint256 disagreeCount;\\n    uint256 challengeRiseTime;\\n    bool result;\\n    bool state;\\n    bool legal;\\n  }\\n\\n  struct TokenProperty {\\n    TokenStatus tokenStatus;\\n    uint256 pendingReward;\\n  }\\n\\n  enum TokenStatus {\\n    INVALID,\\n    EXIT,\\n    SIGNED,\\n    ADMITTED,\\n    ACHIEVED,\\n    FAILED,\\n    REKT\\n  }\\n\\n  struct Record {\\n    string contentUri;\\n  }\\n\\n  function initialize(\\n    address owner,\\n    IERC20Upgradeable token_,\\n    uint256 amount_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 startTime_,\\n    uint256 totalPeriod_,\\n    uint256 periodLength_,\\n    string memory campaignUri_\\n  ) external;\\n\\n  function status() external view returns (Consts.CampaignStatus);\\n\\n  function totalEpochsCount() external view returns (uint256);\\n\\n  function period() external view returns (uint256);\\n\\n  function currentEpoch() external view returns (uint256);\\n\\n  function getTokenProperties(uint256 tokenId) external view returns (TokenProperty memory);\\n\\n  // owner update content uri\\n  function setCampaignUri(string calldata newUri) external;\\n\\n  // user sign up the campaign\\n  function signUp() external;\\n\\n  // host allow user to participate\\n  function admit(uint256[] calldata) external;\\n\\n  // user check at a fixed frequency\\n  function checkIn(string calldata, uint256) external;\\n\\n  // settle the reward\\n  function settle() external;\\n\\n  // user claim reward after campaign ended\\n  function claim(uint256 tokenId) external;\\n\\n  function claimAndWithdraw(uint256 tokenId) external;\\n\\n  function withdraw() external;\\n\\n  function challenge(\\n    uint256,\\n    uint256,\\n    uint256\\n  ) external;\\n\\n  function vote(\\n    uint256,\\n    uint256,\\n    bool\\n  ) external;\\n\\n  function judgement(uint256) external;\\n\\n  function forceEnd() external;\\n\\n  // epoch update event;\\n  event EpochUpdated(uint256 currentEpoch);\\n\\n  event EvCampaignUriSet(string newUri);\\n\\n  event EvSignUp(uint256 tokenId);\\n\\n  event EvRegisterSuccessfully(uint256 tokenId);\\n\\n  event EvCheckIn(uint256 epoch, uint256 tokenId, string contentUri);\\n\\n  event EvModifyRegistry(uint256[] tokenList, bool[] status);\\n\\n  // settle the campaign event\\n  event EvSettle(address user);\\n\\n  event EvClaimReward(uint256 tokenId, uint256 amount);\\n  // who fail\\n  event EvFailure(uint256 tokenId);\\n  // who success\\n  event EvSuccess(uint256 tokenId);\\n\\n  event EvWithDraw(address host, uint256 hostReward, uint256 protocolFee);\\n\\n  event EvChallenge(uint256 challengerId, uint256 cheaterId, uint256 challengeRecordId);\\n\\n  event EvVote(uint256 tokenId, uint256 challengeRecordId);\\n\\n  event EvJudgement(uint256 challengeRecordId);\\n\\n  event EvCheat(uint256 cheaterId);\\n}\\n\",\"keccak256\":\"0xde93bb5fd8ec080be1dc0ac74ed3f4a262240e58fc12c5442e424eccc1ef855c\",\"license\":\"BUSL-1.1\"},\"contracts/interface/IRenderer.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\ninterface IRenderer {\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1a955e4bfaeac19da74a96edae00a556d52ee3d99886fefd11340acb7fe9ebc4\",\"license\":\"BUSL-1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200018557601f62004adc38819003918201601f19168301916001600160401b038311848410176200018a578084926020946040528339810103126200018557516001600160a01b0381168103620001855760805260005460ff8160081c16159081809262000177575b80156200015e575b15620001025760ff19811660011760005581620000ef575b50620000b3575b60405161493b9081620001a182396080518181816106b0015261075a0152f35b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a162000093565b61ffff191661010117600055386200008c565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015620000745750600160ff82161462000074565b50600160ff8216106200006c565b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146130cb5750806306fdde03146130a7578063081812fc14613089578063095ea7b314612ee35780630c0b2bdd14612d5857806311da60b414612b6a5780631a597548146129eb5780631fc6e29614612839578063200d2ed21461280f57806323b872dd146127eb57806327e61c2514612405578063280058ee146123e7578063327107f7146123c0578063379607f5146123a05780633ccfd60b1461232557806342842e0e146122f25780634585e33b1461205c57806348b9ef401461203e5780634edea11114611fb95780634ee0ab0d14611dbb5780636352211e14611d8c5780636a18ff7a14611b515780636e04ff0d14611af75780636efcaab514611a51578063703064d11461132e57806370a082311461130357806370f42df8146112e5578063715018a614611278578063766718081461125a57806378e979251461123c57806384e335011461121e5780638da5cb5b146111f75780639397f8e214610fd057806395d89b4114610f0257806396bc743414610ee45780639cc8525d14610e93578063a22cb46514610db8578063b0e21e8a14610d9a578063b6f625e614610d7c578063b88d4fde14610cfb578063bf96ae6314610a48578063bfa6f912146109ba578063c771766d1461099c578063c87b56dd146106f2578063d5d22165146106d4578063d607497a14610690578063db4988121461044c578063dfa447ce1461042e578063e86a530914610410578063e985e9c5146103b9578063ef78d4fd1461039b578063f2fde38b146102f8578063f62b46c9146102b95763fba00cbd1461027157600080fd5b346102b45761027f36613512565b9060005260dc6020526040600020906000526020526040806000205460ff8251918181161515835260081c1615156020820152f35b600080fd5b346102b45760206003193601126102b4576102ee6004356102d8613528565b6102e1816146a4565b6102e9614858565b6141d6565b6102f661451a565b005b346102b45760206003193601126102b4576103116131f4565b610319613528565b6001600160a01b03811615610331576102f690613580565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346102b45760006003193601126102b457602060cf54604051908152f35b346102b45760406003193601126102b4576103d26131f4565b6103da61320a565b906001600160a01b03809116600052609c60205260406000209116600052602052602060ff604060002054166040519015158152f35b346102b45760006003193601126102b457602060d254604051908152f35b346102b45760006003193601126102b457602060d754604051908152f35b346102b4576020806003193601126102b45767ffffffffffffffff906004358281116102b457610480903690600401613286565b91909261048b613528565b821161067a5760cc916104a7816104a285546132b4565b613cea565b6000601f82116001146105f957819293946000926105ee575b50506000198260011b9260031b1c19161782555b6040519181835260009181546104e9816132b4565b92838387015260019182811690816000146105a5575060011461052f575b7f9554c0ad8824b12a4301321d81a1a6d3be9e533b040fe09a8d7dfeaccb27618186860387a1005b600090815293507f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe5b83851061059157505050508101604001817f9554c0ad8824b12a4301321d81a1a6d3be9e533b040fe09a8d7dfeaccb2761818480610507565b805486860160400152938201938101610558565b9050869550604093507f9554c0ad8824b12a4301321d81a1a6d3be9e533b040fe09a8d7dfeaccb2761819694925060ff1991501682840152151560051b82010191928480610507565b0135905084806104c0565b601f19821694846000527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe9160005b878110610663575083600195969710610649575b505050811b0182556104d4565b60001960f88560031b161c1991013516905584808061063c565b909285600181928686013581550194019101610628565b634e487b7160e01b600052604160045260246000fd5b346102b45760006003193601126102b45760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102b45760006003193601126102b457602060d454604051908152f35b346102b4576020806003193601126102b45760405161071b81610714816132ee565b038261347e565b604051907fa2d6c6da00000000000000000000000000000000000000000000000000000000825260043560048301526000826024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa91821561099057600092610907575b50610898606261079d61089d94614021565b926040519384917f7b226e616d65223a202200000000000000000000000000000000000000000000888401526107dc815180928a602a8701910161319a565b82017f222c226465736372697074696f6e223a22000000000000000000000000000000602a8201527f222c22696d616765223a22000000000000000000000000000000000000000000603b8201527f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000006046820152610863825180938a60608501910161319a565b017f227d000000000000000000000000000000000000000000000000000000000000606082015203604281018452018261347e565b614021565b906108ef603d60405180947f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000858301526108df8151809287868601910161319a565b810103601d81018552018361347e565b6109036040519282849384528301906131cf565b0390f35b91503d806000843e610919818461347e565b82019183818403126102b45780519067ffffffffffffffff82116102b457019180601f840112156102b457825192610950846134a1565b9161095e604051938461347e565b8483528585830101116102b45761079d8261098761089d9660629489806108989801910161319a565b9450505061078b565b6040513d6000823e3d90fd5b346102b45760006003193601126102b457602060d054604051908152f35b346102b45760206003193601126102b45760043560005260dd602052610120604060002060ff815491600181015490600281015460038201546004830154916006600585015494015494604051978852602088015260408701526060860152608085015260a0840152818116151560c0840152818160081c16151560e084015260101c161515610100820152f35b346102b45760006003193601126102b457610a616147b9565b610a6a336135d7565b610cb7576001600160a01b0360c9541660ca5490604051906020917f23b872dd0000000000000000000000000000000000000000000000000000000083820152602493338583015230604483015260648201526064815260a081019181831067ffffffffffffffff841117610ca257610ae592604052613d5b565b60d25460011992838211610c09576001820160d25560405193610b0785613446565b600085523315610c6057610b318360005260996020526001600160a01b0360406000205416151590565b610c1d5733600052609a84526040600020918254918211610c0957507fcd169e01d559b6d336962db715a67dc5fd03521032de891b679200894ec219f394610bdc926001610bd793019055836000526099855260406000203373ffffffffffffffffffffffffffffffffffffffff19825416179055833360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a48333613ada565b613781565b8060005260db82526040600020600260ff1982541617905560ca54600160406000200155604051908152a1005b634e487b7160e01b60005260116004526000fd5b606484601c846040519262461bcd60e51b845260048401528201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152fd5b606482856040519162461bcd60e51b83528160048401528201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b84634e487b7160e01b60005260416004526000fd5b606460405162461bcd60e51b815260206004820152601860248201527f43616d706169676e3a20616c7265616479207369676e656400000000000000006044820152fd5b346102b45760806003193601126102b457610d146131f4565b610d1c61320a565b906064359060443567ffffffffffffffff83116102b457366023840112156102b4576102f693610d59610bd79436906024816004013591016134bd565b92610d6c610d6784336137f7565b613710565b610d7783838361387c565b613c70565b346102b45760006003193601126102b457602060ce54604051908152f35b346102b45760006003193601126102b457602060d854604051908152f35b346102b45760406003193601126102b457610dd16131f4565b60243590811515908183036102b4576001600160a01b031691823314610e4f57610e219033600052609c60205260406000208460005260205260406000209060ff60ff1983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b606460405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b346102b457610ea136613512565b9060005260da602052604060002090600052602052610903610714610ed0604060002060405192838092613393565b6040519182916020835260208301906131cf565b346102b45760006003193601126102b457602060d654604051908152f35b346102b45760006003193601126102b4576040516000609854610f24816132b4565b80845290600190818116908115610fa95750600114610f4e575b61090384610ed08186038261347e565b6098600090815292507f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8145b828410610f91575050508101602001610ed082610f3e565b80546020858701810191909152909301928101610f79565b60ff191660208087019190915292151560051b85019092019250610ed09150839050610f3e565b346102b45760406003193601126102b45767ffffffffffffffff6004358181116102b457611002903690600401613286565b6024359161100f836146a4565b611017614809565b61102083614703565b6110286145d5565b6040516020948582018281108282111761067a5760405261104a3685856134bd565b825260d15460005260da8652604060002085600052865260406000209151805191821161067a5761107b83546132b4565b601f81116111b1575b508690601f831160011461111d57947f0de15cde05bed13731732bfe8f1ff5a69a8be94505d2e381f23997b07af8dd85979694601f199484601f95849560809a600092611112575b50506000198260011b9260031b1c19161790555b60d1549560405198899788528701526060604087015281606087015286860137600085828601015201168101030190a1005b015190508c806110cc565b90601f1983169184600052886000209260005b81811061119a575094600185899560809a957f0de15cde05bed13731732bfe8f1ff5a69a8be94505d2e381f23997b07af8dd859d9c9a95601f99601f199b10611181575b505050811b0190556110e0565b015160001960f88460031b161c191690558c8080611174565b92938a600181928786015181550195019301611130565b8360005287600020601f840160051c8101918985106111ed575b601f0160051c01905b8181106111e15750611084565b600081556001016111d4565b90915081906111cb565b346102b45760006003193601126102b45760206001600160a01b0360335416604051908152f35b346102b45760006003193601126102b457602060d554604051908152f35b346102b45760006003193601126102b457602060cd54604051908152f35b346102b45760006003193601126102b457602060d154604051908152f35b346102b45760006003193601126102b457611291613528565b600060335473ffffffffffffffffffffffffffffffffffffffff198116603355816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b346102b45760006003193601126102b457602060d954604051908152f35b346102b45760206003193601126102b45760206113266113216131f4565b6135d7565b604051908152f35b346102b4576101206003193601126102b4576113486131f4565b602435906001600160a01b03821682036102b45760643567ffffffffffffffff81116102b45761137c9036906004016134f4565b9060843567ffffffffffffffff81116102b45761139d9036906004016134f4565b926101043567ffffffffffffffff81116102b4576113bf9036906004016134f4565b926000549260ff8460081c161593848095611a44575b8015611a2d575b156119c35784600160ff19831617600055611994575b506001600160a01b03831615611950576044351561190c5761141390613580565b60ff60005460081c16156118a25780519067ffffffffffffffff821161067a5781906114406097546132b4565b601f81116117f6575b50602090601f831160011461176f57600092611764575b50506000198260011b9260031b1c1916176097555b835167ffffffffffffffff811161067a576114916098546132b4565b601f81116116c1575b506020601f82116001146116325781906001600160a01b03949596600092611627575b50506000198260011b9260031b1c1916176098555b1673ffffffffffffffffffffffffffffffffffffffff1960c954161760c95560443560ca5560a4358060cd5560d05560c43560ce5560e43560cf55815167ffffffffffffffff811161067a5761152d816104a260cc546132b4565b602092601f82116001146115a5579281929360009261159a575b50506000198260011b9260031b1c19161760cc555b61156257005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b015190508380611547565b601f1982169360cc6000527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe9160005b86811061160f57508360019596106115f6575b505050811b0160cc5561155c565b015160001960f88460031b161c191690558380806115e8565b919260206001819286850151815501940192016115d5565b0151905086806114bd565b601f1982169560986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8149660005b8181106116a95750916001600160a01b0395969791846001959410611690575b505050811b016098556114d2565b015160001960f88460031b161c19169055868080611682565b83830151895560019098019760209384019301611662565b6098600052601f820160051c7f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81401906020831061173c575b601f0160051c7f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81401905b818110611730575061149a565b60008155600101611723565b7f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81491506116f9565b015190508680611460565b915060976000527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9916000601f198516905b8181106117de57509084600195949392106117c5575b505050811b01609755611475565b015160001960f88460031b161c191690558680806117b7565b929360206001819287860151815501950193016117a1565b9091506097600052601f830160051c7f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9016020841061187b575b90601f849392910160051c7f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff901905b81811061186c5750611449565b6000815584935060010161185f565b507f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9611830565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152601860248201527f43616d706169676e3a20696e76616c696420616d6f756e7400000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601760248201527f43616d706169676e3a20696e76616c696420746f6b656e0000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117600055866113f2565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156113dc5750600160ff8216146113dc565b50600160ff8216106113d5565b346102b45760006003193601126102b457604051600060cc54611a73816132b4565b80845290600190818116908115610fa95750600114611a9c5761090384610ed08186038261347e565b60cc600090815292507f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe5b828410611adf575050508101602001610ed082610f3e565b80546020858701810191909152909301928101611ac7565b346102b45760206003193601126102b45760043567ffffffffffffffff81116102b457611b28903690600401613286565b5050611b32613fab565b90610903604051928392151583526040602084015260408301906131cf565b346102b45760606003193601126102b4576004356024803590604435908115158092036102b457611b81846146a4565b611b89614809565b611b9284614703565b611b9b8361476a565b8260005260209160dd835260056040600020015462093a80198111611d775762093a8001421015611d34578360005260dd835260406000205485141580611d22575b15611cdf576001908460005260dc8452604060002086600052845260406000208260ff198254161790558460005260dc845260406000208660005284526040600020805461ff001961ff008460081b16911617905514600014611c90578260005260dd82526003604060002001908154906001198211610c09575060010190557fe412d87c65a2ecd9a42cbdcd9b35239448cd2ec046dbe0d6af0eee194ec6173e9260409290915b8351928352820152a1005b8260005260dd82526004604060002001908154906001198211610c09575060010190557fe412d87c65a2ecd9a42cbdcd9b35239448cd2ec046dbe0d6af0eee194ec6173e926040929091611c85565b606483601f846040519262461bcd60e51b845260048401528201527f4368616c6c656e67653a20696e766f6c7665642063616e6e6f7420766f7465006044820152fd5b50600160406000200154851415611bdd565b6064836010846040519262461bcd60e51b845260048401528201527f4368616c6c656e67653a20656e646564000000000000000000000000000000006044820152fd5b82634e487b7160e01b60005260116004526000fd5b346102b45760206003193601126102b4576020611daa6004356136ac565b6001600160a01b0360405191168152f35b346102b45760006003193601126102b457611dd46148a9565b611ddc614858565b611de46148a9565b60d280549060d99182556000905b8054821015611f5d5760005b60ce54811015611f525780600052602060da81526040600020846000528152610714611e34604060002060405192838092613393565b5115611e495750611e4490613ee7565b611dfe565b919280915060005260db808352600190611eac8260406000200154611ea7620f424080611e7584613f1c565b0490611e8460d7928354613870565b809255611e9084613f34565b0492611e9f60d8948554613870565b809455613865565b613865565b611eb960d6918254613870565b90558260005283526000816040822001558454908110611f3c57611f36926000197f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820992018655604051838152a15b7f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3556020604051838152a1613ee7565b90611df2565b634e487b7160e01b600052601160045260246000fd5b5090611f3690611f07565b825415611f9e575b600460ff1960cb54161760cb557f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f16020604051338152a1005b611fac60d65460d854613870565b60d855600060d655611f65565b346102b45760206003193601126102b45760006020604051611fda8161342a565b828152015260043560005260db6020526040600020604051611ffb8161342a565b60ff8254169060078210156120285760206001604094848452015491019081528251918252516020820152f35b634e487b7160e01b600052602160045260246000fd5b346102b45760006003193601126102b457602060ca54604051908152f35b346102b4576020806003193601126102b45760043567ffffffffffffffff81116102b45761208f82913690600401613286565b90809291810103126102b457358061229e575060cd546120bf60ce916120b9835460cf5490613f78565b90613870565b42111561225a5760d280549260d99384556000915b80548310156121fc5760005b84548110156121f1578060005260da83526040600020846000528352610714612113604060002060405192838092613393565b51156121275761212290613ee7565b6120e0565b50918060005260db908183526001916121528360406000200154611ea7620f424080611e7584613f1c565b61215f60d6918254613870565b90558160005283526000826040822001556040600020600560ff198254161790558554918210611f3c576000196121eb920186557f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820983604051838152a15b7f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b35583604051838152a1613ee7565b916120d4565b50916121eb906121bd565b509150507f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f191541561223f575b600460ff1960cb54161760cb55604051338152a1005b61224d60d65460d854613870565b60d855600060d655612229565b6064826040519062461bcd60e51b82526004820152601360248201527f43616d706169676e3a206e6f7420656e646564000000000000000000000000006044820152fd5b6001036122ae57506102f66145d5565b6064906040519062461bcd60e51b82526004820152600d60248201527f4e6f7468696e6720546f20444f000000000000000000000000000000000000006044820152fd5b346102b4576102f6610bd761230636613251565b906040519261231484613446565b60008452610d6c610d6784336137f7565b346102b45760006003193601126102b45761233e613528565b60ff60cb541660058110156120285760040361235c576102f661451a565b606460405162461bcd60e51b815260206004820152601560248201527f43616d706169676e3a206e6f7420736574746c656400000000000000000000006044820152fd5b346102b45760206003193601126102b4576102f66004356102e1816146a4565b346102b45760006003193601126102b45760206001600160a01b0360c95416604051908152f35b346102b45760006003193601126102b457602060d354604051908152f35b346102b4576020806003193601126102b457600435908160005260dd9182825260056040600020015462093a80198111611f3c5762093a800142106127a75761244d8161476a565b8060005282825260ff60066040600020015460081c1661276357806000528282526040600020549260019081604060002001549461249c60036040600020015460046040600020015490613870565b9060d2549260028410611f3c57600119809401916000199383850460421184151516611f3c5760649360420284900410156127205760d454858111611f3c57860160d45586600052818852600360406000200154600460406000200154106125188160066040600020019060ff60ff1983541691151516179055565b6040600020600601805461ff0019166101001790551561264e5750600088815260db885260408120805460ff19166005178155860180549190559283918361255f84613f4c565b049088600052895260406000205460005260db895261258687604060002001918254613870565b905561259e8361259584613f62565b0460d654613870565b60d65504600a1182151516611f3c57600a6125bd92020460d854613870565b60d85560d554908111611f3c577f3caa68ace909b33d20e5ff96e9c98e4f6b20d3490307a1c09b28bea2e71893d6947f7bd432623a7ded907d0b1d373f5979fadde9c0f579f29ae990736e560c2a1aaa9285920160d5557f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820982604051838152a1604051908152a15b604051908152a1005b91975093925060005260db8552816040600020015480820460281181151516611f3c576028879102049283928560005281875260406000205460005260db87528761269f8260406000200154613f4c565b049186600052875260406000205460005260db875260406000200155048115159080604b118216611f3c576126db86604b85020460d654613870565b60d65560191116611f3c577f3caa68ace909b33d20e5ff96e9c98e4f6b20d3490307a1c09b28bea2e71893d693601961271892020460d854613870565b60d855612645565b82886040519062461bcd60e51b82526004820152601b60248201527f4368616c6c656e67653a206e6f7420656e6f75676820766f74657200000000006044820152fd5b6064826040519062461bcd60e51b82526004820152601960248201527f4368616c6c656e67653a20616c7265616479206a7564676564000000000000006044820152fd5b6064826040519062461bcd60e51b82526004820152601460248201527f4368616c6c656e67653a206e6f7420656e6465640000000000000000000000006044820152fd5b346102b4576102f66127fc36613251565b9161280a610d6784336137f7565b61387c565b346102b45760006003193601126102b45760ff60cb54166040516005821015612028576020918152f35b346102b45760606003193601126102b457600435602435612859826146a4565b612861614809565b61286a82614703565b61287381614703565b61288860cd546120b960ce5460cf5490613f78565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeae7f8111611f3c57620151800142116129815780821461293d5760d354916001198311611f3c578260609260017f41b86b8e6a50d1879c8fe4ff449470156b8c2b6c02117dafd10625d300e4aacd950160d3558160005260dd60205282604060002055806001604060002001554260056040600020015560443560026040600020015560405192835260208301526040820152a1005b606460405162461bcd60e51b815260206004820152601f60248201527f43616d706169676e3a2063616e6e6f74206368616c6c656e67652073656c66006044820152fd5b608460405162461bcd60e51b815260206004820152602360248201527f4368616c6c656e67653a207374617274206368616c6c656e676520746f6f206c60448201527f61746500000000000000000000000000000000000000000000000000000000006064820152fd5b346102b4576020806003193601126102b45760043567ffffffffffffffff81116102b457612a1d903690600401613220565b612a256147b9565b612a2d613528565b60005b818110612a3957005b612a44818385613ef6565b358060005260db8086526040600020604051612a5f8161342a565b60ff825416600792838210156120285760019183520154808983015260ca5403612b2657519081101561202857600203612ae25785827f0898a2d0f11ee389113f47ac39e4c57338d20de87eab1ff9bcce61256c868c8592612add959460005282526040600020600360ff19825416179055604051908152a1613ee7565b612a30565b6064866040519062461bcd60e51b82526004820152601760248201527f43616d706169676e3a206e6f74207369676e65642075700000000000000000006044820152fd5b6064886040519062461bcd60e51b82526004820152601960248201527f43616d706169676e3a207374616b65206e6f74206d61746368000000000000006044820152fd5b346102b45760006003193601126102b45760cd54612b9260ce916120b9835460cf5490613f78565b421115612d145760d29081549160d99283556000905b8054821015612cd45760005b8354811015612cc95780600052602060da81526040600020846000528152610714612be9604060002060405192838092613393565b5115612bfe5750612bf990613ee7565b612bb4565b919280915060005260db808352600190612c2a8260406000200154611ea7620f424080611e7584613f1c565b612c3760d6918254613870565b90558260005283526000816040822001556040600020600560ff198254161790558554908110611f3c57612cc3926000197f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820992018755604051838152a17f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3556020604051838152a1613ee7565b90612ba8565b5090612cc390611f07565b835415611f9e57600460ff1960cb54161760cb557f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f16020604051338152a1005b606460405162461bcd60e51b815260206004820152601360248201527f43616d706169676e3a206e6f7420656e646564000000000000000000000000006044820152fd5b346102b45760406003193601126102b45767ffffffffffffffff6004358181116102b457612d8a903690600401613220565b90916024359081116102b457612da4903690600401613220565b612daf9391936147b9565b612db7613528565b600191825b848110612e78575060405193604085528060408601527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116102b45760059392931b809160608601378301916080606084019382602095606088840301878901525201949260005b828110612e53577e896c158ae8c63b50648f3ace621592a536dc686bb71ea91e8c1a75207e26fd86880387a1005b90919293958635908115158092036102b4579081528201958201939291908301612e25565b612e83818684613ef6565b3590612e90818589613ef6565b359182151583036102b457612ec19215612ec65760005260db6020526040600020600360ff19825416179055613ee7565b612dbc565b60005260db6020526040600020600260ff19825416179055613ee7565b346102b45760406003193601126102b457612efc6131f4565b6001600160a01b03906024358280612f13836136ac565b1692169180831461301f57803314908115612ffa575b5015612f9057600092818452609b602052604084208373ffffffffffffffffffffffffffffffffffffffff19825416179055612f64826136ac565b1691604051927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258585a4f35b608460405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152fd5b9050600052609c60205260406000203360005260205260ff6040600020541684612f29565b608460405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152fd5b346102b45760206003193601126102b4576020611daa6004356136ce565b346102b45760006003193601126102b457610903604051610ed081610714816132ee565b346102b45760206003193601126102b457600435907fffffffff0000000000000000000000000000000000000000000000000000000082168092036102b457817f80ac58cd0000000000000000000000000000000000000000000000000000000060209314908115613170575b8115613146575b5015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150148361313f565b7f5b5e139f0000000000000000000000000000000000000000000000000000000081149150613138565b918091926000905b8282106131ba5750116131b3575050565b6000910152565b915080602091830151818601520182916131a2565b90601f19601f6020936131ed8151809281875287808801910161319a565b0116010190565b600435906001600160a01b03821682036102b457565b602435906001600160a01b03821682036102b457565b9181601f840112156102b45782359167ffffffffffffffff83116102b4576020808501948460051b0101116102b457565b60031960609101126102b4576001600160a01b039060043582811681036102b4579160243590811681036102b4579060443590565b9181601f840112156102b45782359167ffffffffffffffff83116102b457602083818601950101116102b457565b90600182811c921680156132e4575b60208310146132ce57565b634e487b7160e01b600052602260045260246000fd5b91607f16916132c3565b609754600092916132fe826132b4565b80825291600190818116908115613375575060011461331c57505050565b9192935060976000527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9916000925b84841061335d57505060209250010190565b8054602085850181019190915290930192810161334b565b9050602094955060ff1991509291921683830152151560051b010190565b90600092918054916133a4836132b4565b91828252600193848116908160001461340657506001146133c6575b50505050565b90919394506000526020928360002092846000945b8386106133f25750505050010190388080806133c0565b8054858701830152940193859082016133db565b915050602094955060ff199193501683830152151560051b010190388080806133c0565b6040810190811067ffffffffffffffff82111761067a57604052565b6020810190811067ffffffffffffffff82111761067a57604052565b6080810190811067ffffffffffffffff82111761067a57604052565b90601f601f19910116810190811067ffffffffffffffff82111761067a57604052565b67ffffffffffffffff811161067a57601f01601f191660200190565b9291926134c9826134a1565b916134d7604051938461347e565b8294818452818301116102b4578281602093846000960137010152565b9080601f830112156102b45781602061350f933591016134bd565b90565b60031960409101126102b4576004359060243590565b6001600160a01b0360335416330361353c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b6001600160a01b031680156135f757600052609a60205260406000205490565b608460405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152fd5b1561366857565b606460405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152fd5b60005260996020526001600160a01b036040600020541661350f811515613661565b6136f66136f18260005260996020526001600160a01b0360406000205416151590565b613661565b600052609b6020526001600160a01b036040600020541690565b1561371757565b608460405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152fd5b1561378857565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b0390fd5b906001600160a01b03808061380b846136ac565b1693169183831493841561383e575b508315613828575b50505090565b613834919293506136ce565b1614388080613822565b909350600052609c60205260406000208260005260205260ff60406000205416923861381a565b818110611f3c570390565b81198111611f3c570190565b613885836136ac565b916001600160a01b0392838093169283911603613a405782169182156139d7578161399357600090848252609b602052604082209073ffffffffffffffffffffffffffffffffffffffff19918281541690556138e0866136ac565b16908583604051937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258286a4838352609a6020526040832080546001811061397f57600019019055848352609a602052604083208054600119811161397f5760010190558583526099602052604083208054909116851790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4565b602485634e487b7160e01b81526011600452fd5b606460405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e3a20436f756c64206e6f74207472616e73666572000000006044820152fd5b608460405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152fd5b3d15613ad5573d90613abb826134a1565b91613ac9604051938461347e565b82523d6000602084013e565b606090565b9091600091803b15613c6757613b466020916001600160a01b0393856040519586809581947f150b7a02000000000000000000000000000000000000000000000000000000009b8c845233600485015285602485015260448401526080606484015260848301906131cf565b0393165af190829082613c00575b5050613bda57613b62613aaa565b80519081613bd55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000161490565b909192506020813d8211613c5f575b81613c1c6020938361347e565b81010312613c5b5751907fffffffff0000000000000000000000000000000000000000000000000000000082168203613c585750903880613b54565b80fd5b5080fd5b3d9150613c0f565b50505050600190565b91926000929190813b15613ce057602091613b4691856040519586809581947f150b7a02000000000000000000000000000000000000000000000000000000009b8c84523360048501526001600160a01b03809516602485015260448401526080606484015260848301906131cf565b5050505050600190565b601f8111613cf6575050565b60009060cc82527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe906020601f850160051c83019410613d51575b601f0160051c01915b828110613d4657505050565b818155600101613d3a565b9092508290613d31565b6001600160a01b031690604051613d718161342a565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484830152803b15613e635790613dc69160008481959282888195519301915af1613dc0613aaa565b90613ea7565b805180613dd35750505050565b81849181010312613c5b5782015190811591821503613c585750613df9578080806133c0565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6064846040519062461bcd60e51b82526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b90919015613eb3575090565b815115613ec35750805190602001fd5b6137f39060405191829162461bcd60e51b83526020600484015260248301906131cf565b6000198114611f3c5760010190565b9190811015613f065760051b0190565b634e487b7160e01b600052603260045260246000fd5b62030d40908060001904821181151516611f3c570290565b620186a0908060001904821181151516611f3c570290565b8060001904603c1181151516611f3c57603c0290565b8060001904601e1181151516611f3c57601e0290565b8060001904821181151516611f3c570290565b8115613f95570490565b634e487b7160e01b600052601260045260246000fd5b6000606060cd54613fc660ce54916120b960cf548094613f78565b421115613fee57505050604051906000602083015260208252613fe88261342a565b60019190565b613ffe9060d09492939454613870565b421161400657565b915050604051906001602083015260208252613fe88261342a565b8051156141c257604051906060820182811067ffffffffffffffff82111761067a57604052604082527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208301527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408301528051907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8211611f3c57600390816002809401046001907f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81118216611f3c57841b94939061411d614107876134a1565b96614115604051988961347e565b8088526134a1565b601f1960208801910136823794839284518501935b84811061417157505050505051068060011461415e57600214614153575090565b600019603d91015390565b5060011981603d60001981940153015390565b866004919892939495980191858351603f9082828260121c16890101518453828282600c1c16890101518385015382828260061c168901015187850153168601015188820153019693929190614132565b506040516141cf81613446565b6000815290565b60ff60cb541660059081811015612028576004809103614284575b505060407f7cb904b3cfc4c896696085c26766cebf2de422ae3864a0112b5e2fd9ec1efaf891600081815260db602052600183822001541560001461426557805b614249826001600160a01b0360c9541633906144c5565b82815260db6020526001848220015582519182526020820152a1565b61427e600184832001546120b960d65460d95490613f8b565b90614232565b60cd939193549261429f60ce946120b9865460cf5490613f78565b4211156144815760d29081549160d99283556000945b81548610156143f95760005b87548110156143ec5780600052602060da81526040806000208960005282526107146142f582600020835192838092613393565b511561430b57505061430690613ee7565b6142c1565b90915087600098939594985260db80835260019061433a82846000200154611ea7620f424080611e7584613f1c565b61434760d6918254613870565b90558460005283526000818382200155816000208b60ff1982541617905586549081106143d757600019018655518281526143cf92917f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820991a17f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3556020604051838152a1613ee7565b9490916142b5565b601188634e487b7160e01b6000525260246000fd5b509190946143cf90611f07565b96505091907f7cb904b3cfc4c896696085c26766cebf2de422ae3864a0112b5e2fd9ec1efaf89450604093505415614466575b60ff1960cb54161760cb557f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f160208351338152a1916141f1565b61447460d65460d854613870565b60d855600060d65561442c565b60648260206040519162461bcd60e51b8352820152601360248201527f43616d706169676e3a206e6f7420656e646564000000000000000000000000006044820152fd5b614518926001600160a01b03604051937fa9059cbb00000000000000000000000000000000000000000000000000000000602086015216602484015260448301526044825261451382613462565b613d5b565b565b7f7a1c31090abe490bfd8379cbbaeef735a3e3c87ee34925f16d0fa3ff4e061155606060d754600060d7556145be6001600160a01b03614560838260c9541633906144c5565b60c9541660d85490604051917fa9059cbb00000000000000000000000000000000000000000000000000000000602084015273d8da6bf26964af9d7eed9e03e53415d37aa96045602484015260448301526044825261451382613462565b60d8546040519133835260208301526040820152a1565b60d05460cf54906145e68282613870565b421161466b575b505060d1547fb33a1f54dde4e0082c45281b338d78b2c4b5be163b6ffffa5d0d6d1050ba5a586020604051838152a160ce54111561462757565b606460405162461bcd60e51b815260206004820152601d60248201527f43616d706169676e3a20636865636b45706f636820746f6f206c6174650000006044820152fd5b6120b98261468561469a946146808542613865565b613f8b565b906146928260d154613870565b60d155613f78565b60d05538806145ed565b6146ad906136ac565b6001600160a01b03339116036146bf57565b606460405162461bcd60e51b815260206004820152601a60248201527f43616d706169676e3a206e6f7420746f6b656e20686f6c6465720000000000006044820152fd5b60005260db60205260ff6040600020541660078110156120285760030361472657565b606460405162461bcd60e51b815260206004820152601660248201527f43616d706169676e3a206e6f742061646d6974746564000000000000000000006044820152fd5b60d354111561477557565b606460405162461bcd60e51b815260206004820152601a60248201527f4368616c6c656e67655265636f72643a206e6f742065786973740000000000006044820152fd5b60cd544210156147c557565b606460405162461bcd60e51b815260206004820152601960248201527f43616d706169676e3a20616c72656164792073746172746564000000000000006044820152fd5b60cd54421061481457565b606460405162461bcd60e51b815260206004820152601360248201527f43616d706169676e3a206e6f74207374617274000000000000000000000000006044820152fd5b60d35460d4540361486557565b606460405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e67653a206e6f7420616c6c206a7564676564000000000000006044820152fd5b60d55460646148b960d254613f62565b04116148c157565b606460405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e3a206e6f7420656e6f7567682063686561746572000000006044820152fdfea26469706673582212204e0612d07f47b6b00ed853f7fcd27ac69c6a71b40d1d577403f9f4a38aba633864736f6c634300080f0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146130cb5750806306fdde03146130a7578063081812fc14613089578063095ea7b314612ee35780630c0b2bdd14612d5857806311da60b414612b6a5780631a597548146129eb5780631fc6e29614612839578063200d2ed21461280f57806323b872dd146127eb57806327e61c2514612405578063280058ee146123e7578063327107f7146123c0578063379607f5146123a05780633ccfd60b1461232557806342842e0e146122f25780634585e33b1461205c57806348b9ef401461203e5780634edea11114611fb95780634ee0ab0d14611dbb5780636352211e14611d8c5780636a18ff7a14611b515780636e04ff0d14611af75780636efcaab514611a51578063703064d11461132e57806370a082311461130357806370f42df8146112e5578063715018a614611278578063766718081461125a57806378e979251461123c57806384e335011461121e5780638da5cb5b146111f75780639397f8e214610fd057806395d89b4114610f0257806396bc743414610ee45780639cc8525d14610e93578063a22cb46514610db8578063b0e21e8a14610d9a578063b6f625e614610d7c578063b88d4fde14610cfb578063bf96ae6314610a48578063bfa6f912146109ba578063c771766d1461099c578063c87b56dd146106f2578063d5d22165146106d4578063d607497a14610690578063db4988121461044c578063dfa447ce1461042e578063e86a530914610410578063e985e9c5146103b9578063ef78d4fd1461039b578063f2fde38b146102f8578063f62b46c9146102b95763fba00cbd1461027157600080fd5b346102b45761027f36613512565b9060005260dc6020526040600020906000526020526040806000205460ff8251918181161515835260081c1615156020820152f35b600080fd5b346102b45760206003193601126102b4576102ee6004356102d8613528565b6102e1816146a4565b6102e9614858565b6141d6565b6102f661451a565b005b346102b45760206003193601126102b4576103116131f4565b610319613528565b6001600160a01b03811615610331576102f690613580565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346102b45760006003193601126102b457602060cf54604051908152f35b346102b45760406003193601126102b4576103d26131f4565b6103da61320a565b906001600160a01b03809116600052609c60205260406000209116600052602052602060ff604060002054166040519015158152f35b346102b45760006003193601126102b457602060d254604051908152f35b346102b45760006003193601126102b457602060d754604051908152f35b346102b4576020806003193601126102b45767ffffffffffffffff906004358281116102b457610480903690600401613286565b91909261048b613528565b821161067a5760cc916104a7816104a285546132b4565b613cea565b6000601f82116001146105f957819293946000926105ee575b50506000198260011b9260031b1c19161782555b6040519181835260009181546104e9816132b4565b92838387015260019182811690816000146105a5575060011461052f575b7f9554c0ad8824b12a4301321d81a1a6d3be9e533b040fe09a8d7dfeaccb27618186860387a1005b600090815293507f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe5b83851061059157505050508101604001817f9554c0ad8824b12a4301321d81a1a6d3be9e533b040fe09a8d7dfeaccb2761818480610507565b805486860160400152938201938101610558565b9050869550604093507f9554c0ad8824b12a4301321d81a1a6d3be9e533b040fe09a8d7dfeaccb2761819694925060ff1991501682840152151560051b82010191928480610507565b0135905084806104c0565b601f19821694846000527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe9160005b878110610663575083600195969710610649575b505050811b0182556104d4565b60001960f88560031b161c1991013516905584808061063c565b909285600181928686013581550194019101610628565b634e487b7160e01b600052604160045260246000fd5b346102b45760006003193601126102b45760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102b45760006003193601126102b457602060d454604051908152f35b346102b4576020806003193601126102b45760405161071b81610714816132ee565b038261347e565b604051907fa2d6c6da00000000000000000000000000000000000000000000000000000000825260043560048301526000826024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa91821561099057600092610907575b50610898606261079d61089d94614021565b926040519384917f7b226e616d65223a202200000000000000000000000000000000000000000000888401526107dc815180928a602a8701910161319a565b82017f222c226465736372697074696f6e223a22000000000000000000000000000000602a8201527f222c22696d616765223a22000000000000000000000000000000000000000000603b8201527f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000006046820152610863825180938a60608501910161319a565b017f227d000000000000000000000000000000000000000000000000000000000000606082015203604281018452018261347e565b614021565b906108ef603d60405180947f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000858301526108df8151809287868601910161319a565b810103601d81018552018361347e565b6109036040519282849384528301906131cf565b0390f35b91503d806000843e610919818461347e565b82019183818403126102b45780519067ffffffffffffffff82116102b457019180601f840112156102b457825192610950846134a1565b9161095e604051938461347e565b8483528585830101116102b45761079d8261098761089d9660629489806108989801910161319a565b9450505061078b565b6040513d6000823e3d90fd5b346102b45760006003193601126102b457602060d054604051908152f35b346102b45760206003193601126102b45760043560005260dd602052610120604060002060ff815491600181015490600281015460038201546004830154916006600585015494015494604051978852602088015260408701526060860152608085015260a0840152818116151560c0840152818160081c16151560e084015260101c161515610100820152f35b346102b45760006003193601126102b457610a616147b9565b610a6a336135d7565b610cb7576001600160a01b0360c9541660ca5490604051906020917f23b872dd0000000000000000000000000000000000000000000000000000000083820152602493338583015230604483015260648201526064815260a081019181831067ffffffffffffffff841117610ca257610ae592604052613d5b565b60d25460011992838211610c09576001820160d25560405193610b0785613446565b600085523315610c6057610b318360005260996020526001600160a01b0360406000205416151590565b610c1d5733600052609a84526040600020918254918211610c0957507fcd169e01d559b6d336962db715a67dc5fd03521032de891b679200894ec219f394610bdc926001610bd793019055836000526099855260406000203373ffffffffffffffffffffffffffffffffffffffff19825416179055833360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a48333613ada565b613781565b8060005260db82526040600020600260ff1982541617905560ca54600160406000200155604051908152a1005b634e487b7160e01b60005260116004526000fd5b606484601c846040519262461bcd60e51b845260048401528201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152fd5b606482856040519162461bcd60e51b83528160048401528201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b84634e487b7160e01b60005260416004526000fd5b606460405162461bcd60e51b815260206004820152601860248201527f43616d706169676e3a20616c7265616479207369676e656400000000000000006044820152fd5b346102b45760806003193601126102b457610d146131f4565b610d1c61320a565b906064359060443567ffffffffffffffff83116102b457366023840112156102b4576102f693610d59610bd79436906024816004013591016134bd565b92610d6c610d6784336137f7565b613710565b610d7783838361387c565b613c70565b346102b45760006003193601126102b457602060ce54604051908152f35b346102b45760006003193601126102b457602060d854604051908152f35b346102b45760406003193601126102b457610dd16131f4565b60243590811515908183036102b4576001600160a01b031691823314610e4f57610e219033600052609c60205260406000208460005260205260406000209060ff60ff1983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b606460405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b346102b457610ea136613512565b9060005260da602052604060002090600052602052610903610714610ed0604060002060405192838092613393565b6040519182916020835260208301906131cf565b346102b45760006003193601126102b457602060d654604051908152f35b346102b45760006003193601126102b4576040516000609854610f24816132b4565b80845290600190818116908115610fa95750600114610f4e575b61090384610ed08186038261347e565b6098600090815292507f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8145b828410610f91575050508101602001610ed082610f3e565b80546020858701810191909152909301928101610f79565b60ff191660208087019190915292151560051b85019092019250610ed09150839050610f3e565b346102b45760406003193601126102b45767ffffffffffffffff6004358181116102b457611002903690600401613286565b6024359161100f836146a4565b611017614809565b61102083614703565b6110286145d5565b6040516020948582018281108282111761067a5760405261104a3685856134bd565b825260d15460005260da8652604060002085600052865260406000209151805191821161067a5761107b83546132b4565b601f81116111b1575b508690601f831160011461111d57947f0de15cde05bed13731732bfe8f1ff5a69a8be94505d2e381f23997b07af8dd85979694601f199484601f95849560809a600092611112575b50506000198260011b9260031b1c19161790555b60d1549560405198899788528701526060604087015281606087015286860137600085828601015201168101030190a1005b015190508c806110cc565b90601f1983169184600052886000209260005b81811061119a575094600185899560809a957f0de15cde05bed13731732bfe8f1ff5a69a8be94505d2e381f23997b07af8dd859d9c9a95601f99601f199b10611181575b505050811b0190556110e0565b015160001960f88460031b161c191690558c8080611174565b92938a600181928786015181550195019301611130565b8360005287600020601f840160051c8101918985106111ed575b601f0160051c01905b8181106111e15750611084565b600081556001016111d4565b90915081906111cb565b346102b45760006003193601126102b45760206001600160a01b0360335416604051908152f35b346102b45760006003193601126102b457602060d554604051908152f35b346102b45760006003193601126102b457602060cd54604051908152f35b346102b45760006003193601126102b457602060d154604051908152f35b346102b45760006003193601126102b457611291613528565b600060335473ffffffffffffffffffffffffffffffffffffffff198116603355816001600160a01b0360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b346102b45760006003193601126102b457602060d954604051908152f35b346102b45760206003193601126102b45760206113266113216131f4565b6135d7565b604051908152f35b346102b4576101206003193601126102b4576113486131f4565b602435906001600160a01b03821682036102b45760643567ffffffffffffffff81116102b45761137c9036906004016134f4565b9060843567ffffffffffffffff81116102b45761139d9036906004016134f4565b926101043567ffffffffffffffff81116102b4576113bf9036906004016134f4565b926000549260ff8460081c161593848095611a44575b8015611a2d575b156119c35784600160ff19831617600055611994575b506001600160a01b03831615611950576044351561190c5761141390613580565b60ff60005460081c16156118a25780519067ffffffffffffffff821161067a5781906114406097546132b4565b601f81116117f6575b50602090601f831160011461176f57600092611764575b50506000198260011b9260031b1c1916176097555b835167ffffffffffffffff811161067a576114916098546132b4565b601f81116116c1575b506020601f82116001146116325781906001600160a01b03949596600092611627575b50506000198260011b9260031b1c1916176098555b1673ffffffffffffffffffffffffffffffffffffffff1960c954161760c95560443560ca5560a4358060cd5560d05560c43560ce5560e43560cf55815167ffffffffffffffff811161067a5761152d816104a260cc546132b4565b602092601f82116001146115a5579281929360009261159a575b50506000198260011b9260031b1c19161760cc555b61156257005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b015190508380611547565b601f1982169360cc6000527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe9160005b86811061160f57508360019596106115f6575b505050811b0160cc5561155c565b015160001960f88460031b161c191690558380806115e8565b919260206001819286850151815501940192016115d5565b0151905086806114bd565b601f1982169560986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8149660005b8181106116a95750916001600160a01b0395969791846001959410611690575b505050811b016098556114d2565b015160001960f88460031b161c19169055868080611682565b83830151895560019098019760209384019301611662565b6098600052601f820160051c7f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81401906020831061173c575b601f0160051c7f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81401905b818110611730575061149a565b60008155600101611723565b7f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81491506116f9565b015190508680611460565b915060976000527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9916000601f198516905b8181106117de57509084600195949392106117c5575b505050811b01609755611475565b015160001960f88460031b161c191690558680806117b7565b929360206001819287860151815501950193016117a1565b9091506097600052601f830160051c7f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9016020841061187b575b90601f849392910160051c7f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff901905b81811061186c5750611449565b6000815584935060010161185f565b507f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9611830565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152601860248201527f43616d706169676e3a20696e76616c696420616d6f756e7400000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601760248201527f43616d706169676e3a20696e76616c696420746f6b656e0000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117600055866113f2565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156113dc5750600160ff8216146113dc565b50600160ff8216106113d5565b346102b45760006003193601126102b457604051600060cc54611a73816132b4565b80845290600190818116908115610fa95750600114611a9c5761090384610ed08186038261347e565b60cc600090815292507f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe5b828410611adf575050508101602001610ed082610f3e565b80546020858701810191909152909301928101611ac7565b346102b45760206003193601126102b45760043567ffffffffffffffff81116102b457611b28903690600401613286565b5050611b32613fab565b90610903604051928392151583526040602084015260408301906131cf565b346102b45760606003193601126102b4576004356024803590604435908115158092036102b457611b81846146a4565b611b89614809565b611b9284614703565b611b9b8361476a565b8260005260209160dd835260056040600020015462093a80198111611d775762093a8001421015611d34578360005260dd835260406000205485141580611d22575b15611cdf576001908460005260dc8452604060002086600052845260406000208260ff198254161790558460005260dc845260406000208660005284526040600020805461ff001961ff008460081b16911617905514600014611c90578260005260dd82526003604060002001908154906001198211610c09575060010190557fe412d87c65a2ecd9a42cbdcd9b35239448cd2ec046dbe0d6af0eee194ec6173e9260409290915b8351928352820152a1005b8260005260dd82526004604060002001908154906001198211610c09575060010190557fe412d87c65a2ecd9a42cbdcd9b35239448cd2ec046dbe0d6af0eee194ec6173e926040929091611c85565b606483601f846040519262461bcd60e51b845260048401528201527f4368616c6c656e67653a20696e766f6c7665642063616e6e6f7420766f7465006044820152fd5b50600160406000200154851415611bdd565b6064836010846040519262461bcd60e51b845260048401528201527f4368616c6c656e67653a20656e646564000000000000000000000000000000006044820152fd5b82634e487b7160e01b60005260116004526000fd5b346102b45760206003193601126102b4576020611daa6004356136ac565b6001600160a01b0360405191168152f35b346102b45760006003193601126102b457611dd46148a9565b611ddc614858565b611de46148a9565b60d280549060d99182556000905b8054821015611f5d5760005b60ce54811015611f525780600052602060da81526040600020846000528152610714611e34604060002060405192838092613393565b5115611e495750611e4490613ee7565b611dfe565b919280915060005260db808352600190611eac8260406000200154611ea7620f424080611e7584613f1c565b0490611e8460d7928354613870565b809255611e9084613f34565b0492611e9f60d8948554613870565b809455613865565b613865565b611eb960d6918254613870565b90558260005283526000816040822001558454908110611f3c57611f36926000197f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820992018655604051838152a15b7f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3556020604051838152a1613ee7565b90611df2565b634e487b7160e01b600052601160045260246000fd5b5090611f3690611f07565b825415611f9e575b600460ff1960cb54161760cb557f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f16020604051338152a1005b611fac60d65460d854613870565b60d855600060d655611f65565b346102b45760206003193601126102b45760006020604051611fda8161342a565b828152015260043560005260db6020526040600020604051611ffb8161342a565b60ff8254169060078210156120285760206001604094848452015491019081528251918252516020820152f35b634e487b7160e01b600052602160045260246000fd5b346102b45760006003193601126102b457602060ca54604051908152f35b346102b4576020806003193601126102b45760043567ffffffffffffffff81116102b45761208f82913690600401613286565b90809291810103126102b457358061229e575060cd546120bf60ce916120b9835460cf5490613f78565b90613870565b42111561225a5760d280549260d99384556000915b80548310156121fc5760005b84548110156121f1578060005260da83526040600020846000528352610714612113604060002060405192838092613393565b51156121275761212290613ee7565b6120e0565b50918060005260db908183526001916121528360406000200154611ea7620f424080611e7584613f1c565b61215f60d6918254613870565b90558160005283526000826040822001556040600020600560ff198254161790558554918210611f3c576000196121eb920186557f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820983604051838152a15b7f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b35583604051838152a1613ee7565b916120d4565b50916121eb906121bd565b509150507f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f191541561223f575b600460ff1960cb54161760cb55604051338152a1005b61224d60d65460d854613870565b60d855600060d655612229565b6064826040519062461bcd60e51b82526004820152601360248201527f43616d706169676e3a206e6f7420656e646564000000000000000000000000006044820152fd5b6001036122ae57506102f66145d5565b6064906040519062461bcd60e51b82526004820152600d60248201527f4e6f7468696e6720546f20444f000000000000000000000000000000000000006044820152fd5b346102b4576102f6610bd761230636613251565b906040519261231484613446565b60008452610d6c610d6784336137f7565b346102b45760006003193601126102b45761233e613528565b60ff60cb541660058110156120285760040361235c576102f661451a565b606460405162461bcd60e51b815260206004820152601560248201527f43616d706169676e3a206e6f7420736574746c656400000000000000000000006044820152fd5b346102b45760206003193601126102b4576102f66004356102e1816146a4565b346102b45760006003193601126102b45760206001600160a01b0360c95416604051908152f35b346102b45760006003193601126102b457602060d354604051908152f35b346102b4576020806003193601126102b457600435908160005260dd9182825260056040600020015462093a80198111611f3c5762093a800142106127a75761244d8161476a565b8060005282825260ff60066040600020015460081c1661276357806000528282526040600020549260019081604060002001549461249c60036040600020015460046040600020015490613870565b9060d2549260028410611f3c57600119809401916000199383850460421184151516611f3c5760649360420284900410156127205760d454858111611f3c57860160d45586600052818852600360406000200154600460406000200154106125188160066040600020019060ff60ff1983541691151516179055565b6040600020600601805461ff0019166101001790551561264e5750600088815260db885260408120805460ff19166005178155860180549190559283918361255f84613f4c565b049088600052895260406000205460005260db895261258687604060002001918254613870565b905561259e8361259584613f62565b0460d654613870565b60d65504600a1182151516611f3c57600a6125bd92020460d854613870565b60d85560d554908111611f3c577f3caa68ace909b33d20e5ff96e9c98e4f6b20d3490307a1c09b28bea2e71893d6947f7bd432623a7ded907d0b1d373f5979fadde9c0f579f29ae990736e560c2a1aaa9285920160d5557f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820982604051838152a1604051908152a15b604051908152a1005b91975093925060005260db8552816040600020015480820460281181151516611f3c576028879102049283928560005281875260406000205460005260db87528761269f8260406000200154613f4c565b049186600052875260406000205460005260db875260406000200155048115159080604b118216611f3c576126db86604b85020460d654613870565b60d65560191116611f3c577f3caa68ace909b33d20e5ff96e9c98e4f6b20d3490307a1c09b28bea2e71893d693601961271892020460d854613870565b60d855612645565b82886040519062461bcd60e51b82526004820152601b60248201527f4368616c6c656e67653a206e6f7420656e6f75676820766f74657200000000006044820152fd5b6064826040519062461bcd60e51b82526004820152601960248201527f4368616c6c656e67653a20616c7265616479206a7564676564000000000000006044820152fd5b6064826040519062461bcd60e51b82526004820152601460248201527f4368616c6c656e67653a206e6f7420656e6465640000000000000000000000006044820152fd5b346102b4576102f66127fc36613251565b9161280a610d6784336137f7565b61387c565b346102b45760006003193601126102b45760ff60cb54166040516005821015612028576020918152f35b346102b45760606003193601126102b457600435602435612859826146a4565b612861614809565b61286a82614703565b61287381614703565b61288860cd546120b960ce5460cf5490613f78565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeae7f8111611f3c57620151800142116129815780821461293d5760d354916001198311611f3c578260609260017f41b86b8e6a50d1879c8fe4ff449470156b8c2b6c02117dafd10625d300e4aacd950160d3558160005260dd60205282604060002055806001604060002001554260056040600020015560443560026040600020015560405192835260208301526040820152a1005b606460405162461bcd60e51b815260206004820152601f60248201527f43616d706169676e3a2063616e6e6f74206368616c6c656e67652073656c66006044820152fd5b608460405162461bcd60e51b815260206004820152602360248201527f4368616c6c656e67653a207374617274206368616c6c656e676520746f6f206c60448201527f61746500000000000000000000000000000000000000000000000000000000006064820152fd5b346102b4576020806003193601126102b45760043567ffffffffffffffff81116102b457612a1d903690600401613220565b612a256147b9565b612a2d613528565b60005b818110612a3957005b612a44818385613ef6565b358060005260db8086526040600020604051612a5f8161342a565b60ff825416600792838210156120285760019183520154808983015260ca5403612b2657519081101561202857600203612ae25785827f0898a2d0f11ee389113f47ac39e4c57338d20de87eab1ff9bcce61256c868c8592612add959460005282526040600020600360ff19825416179055604051908152a1613ee7565b612a30565b6064866040519062461bcd60e51b82526004820152601760248201527f43616d706169676e3a206e6f74207369676e65642075700000000000000000006044820152fd5b6064886040519062461bcd60e51b82526004820152601960248201527f43616d706169676e3a207374616b65206e6f74206d61746368000000000000006044820152fd5b346102b45760006003193601126102b45760cd54612b9260ce916120b9835460cf5490613f78565b421115612d145760d29081549160d99283556000905b8054821015612cd45760005b8354811015612cc95780600052602060da81526040600020846000528152610714612be9604060002060405192838092613393565b5115612bfe5750612bf990613ee7565b612bb4565b919280915060005260db808352600190612c2a8260406000200154611ea7620f424080611e7584613f1c565b612c3760d6918254613870565b90558260005283526000816040822001556040600020600560ff198254161790558554908110611f3c57612cc3926000197f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820992018755604051838152a17f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3556020604051838152a1613ee7565b90612ba8565b5090612cc390611f07565b835415611f9e57600460ff1960cb54161760cb557f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f16020604051338152a1005b606460405162461bcd60e51b815260206004820152601360248201527f43616d706169676e3a206e6f7420656e646564000000000000000000000000006044820152fd5b346102b45760406003193601126102b45767ffffffffffffffff6004358181116102b457612d8a903690600401613220565b90916024359081116102b457612da4903690600401613220565b612daf9391936147b9565b612db7613528565b600191825b848110612e78575060405193604085528060408601527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116102b45760059392931b809160608601378301916080606084019382602095606088840301878901525201949260005b828110612e53577e896c158ae8c63b50648f3ace621592a536dc686bb71ea91e8c1a75207e26fd86880387a1005b90919293958635908115158092036102b4579081528201958201939291908301612e25565b612e83818684613ef6565b3590612e90818589613ef6565b359182151583036102b457612ec19215612ec65760005260db6020526040600020600360ff19825416179055613ee7565b612dbc565b60005260db6020526040600020600260ff19825416179055613ee7565b346102b45760406003193601126102b457612efc6131f4565b6001600160a01b03906024358280612f13836136ac565b1692169180831461301f57803314908115612ffa575b5015612f9057600092818452609b602052604084208373ffffffffffffffffffffffffffffffffffffffff19825416179055612f64826136ac565b1691604051927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258585a4f35b608460405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152fd5b9050600052609c60205260406000203360005260205260ff6040600020541684612f29565b608460405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152fd5b346102b45760206003193601126102b4576020611daa6004356136ce565b346102b45760006003193601126102b457610903604051610ed081610714816132ee565b346102b45760206003193601126102b457600435907fffffffff0000000000000000000000000000000000000000000000000000000082168092036102b457817f80ac58cd0000000000000000000000000000000000000000000000000000000060209314908115613170575b8115613146575b5015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150148361313f565b7f5b5e139f0000000000000000000000000000000000000000000000000000000081149150613138565b918091926000905b8282106131ba5750116131b3575050565b6000910152565b915080602091830151818601520182916131a2565b90601f19601f6020936131ed8151809281875287808801910161319a565b0116010190565b600435906001600160a01b03821682036102b457565b602435906001600160a01b03821682036102b457565b9181601f840112156102b45782359167ffffffffffffffff83116102b4576020808501948460051b0101116102b457565b60031960609101126102b4576001600160a01b039060043582811681036102b4579160243590811681036102b4579060443590565b9181601f840112156102b45782359167ffffffffffffffff83116102b457602083818601950101116102b457565b90600182811c921680156132e4575b60208310146132ce57565b634e487b7160e01b600052602260045260246000fd5b91607f16916132c3565b609754600092916132fe826132b4565b80825291600190818116908115613375575060011461331c57505050565b9192935060976000527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9916000925b84841061335d57505060209250010190565b8054602085850181019190915290930192810161334b565b9050602094955060ff1991509291921683830152151560051b010190565b90600092918054916133a4836132b4565b91828252600193848116908160001461340657506001146133c6575b50505050565b90919394506000526020928360002092846000945b8386106133f25750505050010190388080806133c0565b8054858701830152940193859082016133db565b915050602094955060ff199193501683830152151560051b010190388080806133c0565b6040810190811067ffffffffffffffff82111761067a57604052565b6020810190811067ffffffffffffffff82111761067a57604052565b6080810190811067ffffffffffffffff82111761067a57604052565b90601f601f19910116810190811067ffffffffffffffff82111761067a57604052565b67ffffffffffffffff811161067a57601f01601f191660200190565b9291926134c9826134a1565b916134d7604051938461347e565b8294818452818301116102b4578281602093846000960137010152565b9080601f830112156102b45781602061350f933591016134bd565b90565b60031960409101126102b4576004359060243590565b6001600160a01b0360335416330361353c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b6001600160a01b031680156135f757600052609a60205260406000205490565b608460405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152fd5b1561366857565b606460405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152fd5b60005260996020526001600160a01b036040600020541661350f811515613661565b6136f66136f18260005260996020526001600160a01b0360406000205416151590565b613661565b600052609b6020526001600160a01b036040600020541690565b1561371757565b608460405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152fd5b1561378857565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b0390fd5b906001600160a01b03808061380b846136ac565b1693169183831493841561383e575b508315613828575b50505090565b613834919293506136ce565b1614388080613822565b909350600052609c60205260406000208260005260205260ff60406000205416923861381a565b818110611f3c570390565b81198111611f3c570190565b613885836136ac565b916001600160a01b0392838093169283911603613a405782169182156139d7578161399357600090848252609b602052604082209073ffffffffffffffffffffffffffffffffffffffff19918281541690556138e0866136ac565b16908583604051937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258286a4838352609a6020526040832080546001811061397f57600019019055848352609a602052604083208054600119811161397f5760010190558583526099602052604083208054909116851790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4565b602485634e487b7160e01b81526011600452fd5b606460405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e3a20436f756c64206e6f74207472616e73666572000000006044820152fd5b608460405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152fd5b3d15613ad5573d90613abb826134a1565b91613ac9604051938461347e565b82523d6000602084013e565b606090565b9091600091803b15613c6757613b466020916001600160a01b0393856040519586809581947f150b7a02000000000000000000000000000000000000000000000000000000009b8c845233600485015285602485015260448401526080606484015260848301906131cf565b0393165af190829082613c00575b5050613bda57613b62613aaa565b80519081613bd55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000161490565b909192506020813d8211613c5f575b81613c1c6020938361347e565b81010312613c5b5751907fffffffff0000000000000000000000000000000000000000000000000000000082168203613c585750903880613b54565b80fd5b5080fd5b3d9150613c0f565b50505050600190565b91926000929190813b15613ce057602091613b4691856040519586809581947f150b7a02000000000000000000000000000000000000000000000000000000009b8c84523360048501526001600160a01b03809516602485015260448401526080606484015260848301906131cf565b5050505050600190565b601f8111613cf6575050565b60009060cc82527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe906020601f850160051c83019410613d51575b601f0160051c01915b828110613d4657505050565b818155600101613d3a565b9092508290613d31565b6001600160a01b031690604051613d718161342a565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484830152803b15613e635790613dc69160008481959282888195519301915af1613dc0613aaa565b90613ea7565b805180613dd35750505050565b81849181010312613c5b5782015190811591821503613c585750613df9578080806133c0565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6064846040519062461bcd60e51b82526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b90919015613eb3575090565b815115613ec35750805190602001fd5b6137f39060405191829162461bcd60e51b83526020600484015260248301906131cf565b6000198114611f3c5760010190565b9190811015613f065760051b0190565b634e487b7160e01b600052603260045260246000fd5b62030d40908060001904821181151516611f3c570290565b620186a0908060001904821181151516611f3c570290565b8060001904603c1181151516611f3c57603c0290565b8060001904601e1181151516611f3c57601e0290565b8060001904821181151516611f3c570290565b8115613f95570490565b634e487b7160e01b600052601260045260246000fd5b6000606060cd54613fc660ce54916120b960cf548094613f78565b421115613fee57505050604051906000602083015260208252613fe88261342a565b60019190565b613ffe9060d09492939454613870565b421161400657565b915050604051906001602083015260208252613fe88261342a565b8051156141c257604051906060820182811067ffffffffffffffff82111761067a57604052604082527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208301527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408301528051907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8211611f3c57600390816002809401046001907f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81118216611f3c57841b94939061411d614107876134a1565b96614115604051988961347e565b8088526134a1565b601f1960208801910136823794839284518501935b84811061417157505050505051068060011461415e57600214614153575090565b600019603d91015390565b5060011981603d60001981940153015390565b866004919892939495980191858351603f9082828260121c16890101518453828282600c1c16890101518385015382828260061c168901015187850153168601015188820153019693929190614132565b506040516141cf81613446565b6000815290565b60ff60cb541660059081811015612028576004809103614284575b505060407f7cb904b3cfc4c896696085c26766cebf2de422ae3864a0112b5e2fd9ec1efaf891600081815260db602052600183822001541560001461426557805b614249826001600160a01b0360c9541633906144c5565b82815260db6020526001848220015582519182526020820152a1565b61427e600184832001546120b960d65460d95490613f8b565b90614232565b60cd939193549261429f60ce946120b9865460cf5490613f78565b4211156144815760d29081549160d99283556000945b81548610156143f95760005b87548110156143ec5780600052602060da81526040806000208960005282526107146142f582600020835192838092613393565b511561430b57505061430690613ee7565b6142c1565b90915087600098939594985260db80835260019061433a82846000200154611ea7620f424080611e7584613f1c565b61434760d6918254613870565b90558460005283526000818382200155816000208b60ff1982541617905586549081106143d757600019018655518281526143cf92917f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a7820991a17f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3556020604051838152a1613ee7565b9490916142b5565b601188634e487b7160e01b6000525260246000fd5b509190946143cf90611f07565b96505091907f7cb904b3cfc4c896696085c26766cebf2de422ae3864a0112b5e2fd9ec1efaf89450604093505415614466575b60ff1960cb54161760cb557f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f160208351338152a1916141f1565b61447460d65460d854613870565b60d855600060d65561442c565b60648260206040519162461bcd60e51b8352820152601360248201527f43616d706169676e3a206e6f7420656e646564000000000000000000000000006044820152fd5b614518926001600160a01b03604051937fa9059cbb00000000000000000000000000000000000000000000000000000000602086015216602484015260448301526044825261451382613462565b613d5b565b565b7f7a1c31090abe490bfd8379cbbaeef735a3e3c87ee34925f16d0fa3ff4e061155606060d754600060d7556145be6001600160a01b03614560838260c9541633906144c5565b60c9541660d85490604051917fa9059cbb00000000000000000000000000000000000000000000000000000000602084015273d8da6bf26964af9d7eed9e03e53415d37aa96045602484015260448301526044825261451382613462565b60d8546040519133835260208301526040820152a1565b60d05460cf54906145e68282613870565b421161466b575b505060d1547fb33a1f54dde4e0082c45281b338d78b2c4b5be163b6ffffa5d0d6d1050ba5a586020604051838152a160ce54111561462757565b606460405162461bcd60e51b815260206004820152601d60248201527f43616d706169676e3a20636865636b45706f636820746f6f206c6174650000006044820152fd5b6120b98261468561469a946146808542613865565b613f8b565b906146928260d154613870565b60d155613f78565b60d05538806145ed565b6146ad906136ac565b6001600160a01b03339116036146bf57565b606460405162461bcd60e51b815260206004820152601a60248201527f43616d706169676e3a206e6f7420746f6b656e20686f6c6465720000000000006044820152fd5b60005260db60205260ff6040600020541660078110156120285760030361472657565b606460405162461bcd60e51b815260206004820152601660248201527f43616d706169676e3a206e6f742061646d6974746564000000000000000000006044820152fd5b60d354111561477557565b606460405162461bcd60e51b815260206004820152601a60248201527f4368616c6c656e67655265636f72643a206e6f742065786973740000000000006044820152fd5b60cd544210156147c557565b606460405162461bcd60e51b815260206004820152601960248201527f43616d706169676e3a20616c72656164792073746172746564000000000000006044820152fd5b60cd54421061481457565b606460405162461bcd60e51b815260206004820152601360248201527f43616d706169676e3a206e6f74207374617274000000000000000000000000006044820152fd5b60d35460d4540361486557565b606460405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e67653a206e6f7420616c6c206a7564676564000000000000006044820152fd5b60d55460646148b960d254613f62565b04116148c157565b606460405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e3a206e6f7420656e6f7567682063686561746572000000006044820152fdfea26469706673582212204e0612d07f47b6b00ed853f7fcd27ac69c6a71b40d1d577403f9f4a38aba633864736f6c634300080f0033",
  "devdoc": {
    "details": "for implementation of erc1167 implementation",
    "kind": "dev",
    "methods": {
      "admit(uint256[])": {
        "details": "campaign owner admit several address to participate this campaign",
        "params": {
          "allowlists": "allowed tokenId array"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "checkIn(string,uint256)": {
        "details": "user check in",
        "params": {
          "contentUri": "string of ipfs uri or other decentralize storage"
        }
      },
      "claim(uint256)": {
        "details": "user claim reward after campaign settled"
      },
      "claimAndWithdraw(uint256)": {
        "details": "host who participate the campaign claim reward and withdraw host reward"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getTokenProperties(uint256)": {
        "details": "read Token properties"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "modifyRegistry(uint256[],bool[])": {
        "details": "once campaign owner admit some address by mistakecan modify via this function but more gas-expensive",
        "params": {
          "lists": "modified tokenId list array",
          "targetStatuses": "corresponding status array"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "settle()": {
        "details": "everyone can call the function to settle reward"
      },
      "signUp()": {
        "details": "user stake token and want to participate this campaign"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "host withdraw host reward"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 464,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 467,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2340,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 336,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 456,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2610,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1032,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 1034,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 1038,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1042,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1046,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1052,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1894,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 4003,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "targetToken",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20Upgradeable)686"
      },
      {
        "astId": 4005,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "requiredAmount",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 4009,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "status",
        "offset": 0,
        "slot": "203",
        "type": "t_enum(CampaignStatus)6614"
      },
      {
        "astId": 4011,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "campaignUri",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 4013,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "startTime",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 4016,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalEpochsCount",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 4019,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "period",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 4021,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "lastEpochEndTime",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 4024,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "currentEpoch",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 4026,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_idx",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 4028,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_challengeIdx",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 4030,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "challengeJudgedCount",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 4032,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "cheatCount",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 4034,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "sharedReward",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 4036,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "hostReward",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 4038,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "protocolFee",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 4040,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "successTokensCount",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 4047,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "records",
        "offset": 0,
        "slot": "218",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Record)6951_storage))"
      },
      {
        "astId": 4052,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "s_properties",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_uint256,t_struct(TokenProperty)6940_storage)"
      },
      {
        "astId": 4059,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "voters",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Voter)6915_storage))"
      },
      {
        "astId": 4064,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "challengeRecords",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_uint256,t_struct(ChallengeRecord)6934_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)686": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_enum(CampaignStatus)6614": {
        "encoding": "inplace",
        "label": "enum Consts.CampaignStatus",
        "numberOfBytes": "1"
      },
      "t_enum(TokenStatus)6948": {
        "encoding": "inplace",
        "label": "enum ICampaign.TokenStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Record)6951_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct ICampaign.Record))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Record)6951_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Voter)6915_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct ICampaign.Voter))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Voter)6915_storage)"
      },
      "t_mapping(t_uint256,t_struct(ChallengeRecord)6934_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICampaign.ChallengeRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(ChallengeRecord)6934_storage"
      },
      "t_mapping(t_uint256,t_struct(Record)6951_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICampaign.Record)",
        "numberOfBytes": "32",
        "value": "t_struct(Record)6951_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenProperty)6940_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICampaign.TokenProperty)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenProperty)6940_storage"
      },
      "t_mapping(t_uint256,t_struct(Voter)6915_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICampaign.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)6915_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChallengeRecord)6934_storage": {
        "encoding": "inplace",
        "label": "struct ICampaign.ChallengeRecord",
        "members": [
          {
            "astId": 6917,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "challengerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6919,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "cheaterId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6921,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "epoch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6923,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "agreeCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6925,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "disagreeCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6927,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "challengeRiseTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6929,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "result",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 6931,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "state",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 6933,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "legal",
            "offset": 2,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Record)6951_storage": {
        "encoding": "inplace",
        "label": "struct ICampaign.Record",
        "members": [
          {
            "astId": 6950,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "contentUri",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenProperty)6940_storage": {
        "encoding": "inplace",
        "label": "struct ICampaign.TokenProperty",
        "members": [
          {
            "astId": 6937,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "tokenStatus",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TokenStatus)6948"
          },
          {
            "astId": 6939,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "pendingReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)6915_storage": {
        "encoding": "inplace",
        "label": "struct ICampaign.Voter",
        "members": [
          {
            "astId": 6912,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "voted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6914,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "choice",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}