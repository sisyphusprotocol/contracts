{
  "address": "0x0A848614a0676D959b8F5881603111a9Bae234cf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "EvCampaignUriSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cheaterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        }
      ],
      "name": "EvChallenge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cheaterId",
          "type": "uint256"
        }
      ],
      "name": "EvCheat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentUri",
          "type": "string"
        }
      ],
      "name": "EvCheckIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EvClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EvFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        }
      ],
      "name": "EvJudgement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenList",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "status",
          "type": "bool[]"
        }
      ],
      "name": "EvModifyRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EvRegisterSuccessfully",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "EvSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EvSignUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EvSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        }
      ],
      "name": "EvVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "host",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hostReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "EvWithDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_challengeIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_idx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "allowlists",
          "type": "uint256[]"
        }
      ],
      "name": "admit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cheaterId",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengeJudgedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challengeRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "challengerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cheaterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "agreeCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disagreeCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "challengeRiseTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "legal",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheatCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hostReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTime_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPeriod_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodLength_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "campaignUri_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        }
      ],
      "name": "judgement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEpochEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "lists",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "targetStatuses",
          "type": "bool[]"
        }
      ],
      "name": "modifyRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "properties",
      "outputs": [
        {
          "internalType": "enum Campaign.TokenStatus",
          "name": "tokenStatus",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "string",
          "name": "contentUri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "setCampaignUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum Consts.CampaignStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "successTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEpochsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "challengeRecordId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "choice",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "choice",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x260d1feffbe51096e20ea4b42c169827097a3d710dc1cd151c28dee43b78ed7e",
  "receipt": {
    "to": null,
    "from": "0x11F2241Bf12f1a640f78e5d1A0d3302D77fB5e78",
    "contractAddress": "0x0A848614a0676D959b8F5881603111a9Bae234cf",
    "transactionIndex": 3,
    "gasUsed": "3752378",
    "logsBloom": "0x
    "blockHash": "0x636a12ab2b8618b01249c5ce0d8ee8812f837a3e607e2d22d33c56ef6e66cc77",
    "transactionHash": "0x260d1feffbe51096e20ea4b42c169827097a3d710dc1cd151c28dee43b78ed7e",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 28989078,
        "transactionHash": "0x260d1feffbe51096e20ea4b42c169827097a3d710dc1cd151c28dee43b78ed7e",
        "address": "0x0A848614a0676D959b8F5881603111a9Bae234cf",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 8,
        "blockHash": "0x636a12ab2b8618b01249c5ce0d8ee8812f837a3e607e2d22d33c56ef6e66cc77"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28989078,
        "transactionHash": "0x260d1feffbe51096e20ea4b42c169827097a3d710dc1cd151c28dee43b78ed7e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000011f2241bf12f1a640f78e5d1a0d3302d77fb5e78",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002ea8b00c22ae000000000000000000000000000000000000000000000000001bfa3e14f7f39223000000000000000000000000000000000000000000000887d98e152c29b7ffe30000000000000000000000000000000000000000000000001bcb9564ebd0e423000000000000000000000000000000000000000000000887d9bcbddc35daade3",
        "logIndex": 9,
        "blockHash": "0x636a12ab2b8618b01249c5ce0d8ee8812f837a3e607e2d22d33c56ef6e66cc77"
      }
    ],
    "blockNumber": 28989078,
    "cumulativeGasUsed": "4158486",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "967698d1808c678140f321c8026df8e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"EvCampaignUriSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cheaterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"}],\"name\":\"EvChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cheaterId\",\"type\":\"uint256\"}],\"name\":\"EvCheat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentUri\",\"type\":\"string\"}],\"name\":\"EvCheckIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EvFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"}],\"name\":\"EvJudgement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenList\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"status\",\"type\":\"bool[]\"}],\"name\":\"EvModifyRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EvRegisterSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"EvSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EvSignUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EvSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"}],\"name\":\"EvVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hostReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"EvWithDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_challengeIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_idx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"allowlists\",\"type\":\"uint256[]\"}],\"name\":\"admit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cheaterId\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeJudgedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengeRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"challengerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cheaterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agreeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disagreeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengeRiseTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"legal\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheatCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hostReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLength_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"campaignUri_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"}],\"name\":\"judgement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lists\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"targetStatuses\",\"type\":\"bool[]\"}],\"name\":\"modifyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"properties\",\"outputs\":[{\"internalType\":\"enum Campaign.TokenStatus\",\"name\":\"tokenStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"contentUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setCampaignUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum Consts.CampaignStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEpochsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengeRecordId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"admit(uint256[])\":{\"details\":\"campaign owner admit several address to participate this campaign\",\"params\":{\"allowlists\":\"allowed tokenId array\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"checkIn(string,uint256)\":{\"details\":\"user check in\",\"params\":{\"contentUri\":\"string of ipfs uri or other decentralize storage\"}},\"claim(uint256)\":{\"details\":\"user claim reward after campaign settled\"},\"claimAndWithdraw(uint256)\":{\"details\":\"host who participate the campaign claim reward and withdraw host reward\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"modifyRegistry(uint256[],bool[])\":{\"details\":\"once campaign owner admit some address by mistakecan modify via this function but more gas-expensive\",\"params\":{\"lists\":\"modified tokenId list array\",\"targetStatuses\":\"corresponding status array\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"settle()\":{\"details\":\"everyone can call the function to settle reward\"},\"signUp()\":{\"details\":\"user stake token and want to participate this campaign\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"host withdraw host reward\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Campaign.sol\":\"Campaign\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Campaign.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport './interface/ICampaign.sol';\\nimport '@chainlink/contracts/src/v0.8/AutomationCompatible.sol';\\n\\nimport { Consts } from './Consts.sol';\\n\\n// TODO: merkle tree root to valid user, don't use enumerable\\ncontract Campaign is ICampaign, OwnableUpgradeable, ERC721Upgradeable, AutomationCompatible {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  IERC20Upgradeable public targetToken;\\n  uint256 public requiredAmount;\\n  Consts.CampaignStatus public override status;\\n\\n  string public campaignUri;\\n  uint256 public startTime;\\n  uint256 public totalEpochsCount;\\n  uint256 public period;\\n\\n  uint256 public lastEpochEndTime;\\n  uint256 public currentEpoch;\\n\\n  uint256 public _idx;\\n  uint256 public _challengeIdx;\\n  uint256 public challengeJudgedCount;\\n  uint256 public cheatCount;\\n\\n  uint256 public sharedReward;\\n  uint256 public hostReward;\\n  uint256 public protocolFee;\\n  uint256 public successTokensCount;\\n\\n  // epoch => tokenId => Record\\n  mapping(uint256 => mapping(uint256 => Record)) public records;\\n\\n  // tokenId => token status\\n  mapping(uint256 => TokenProperty) public properties;\\n\\n  //challengeRecordId => tokenId => voter\\n  mapping(uint256 => mapping(uint256 => Voter)) public voters;\\n\\n  //challengeRecordId => ChallengeRecord\\n  mapping(uint256 => ChallengeRecord) public challengeRecords;\\n\\n  //for voted: true = voted; false = not voted;\\n  //for choice: true = think cheat; false = think not cheat;\\n  struct Voter {\\n    bool voted;\\n    bool choice;\\n  }\\n\\n  //for result: true = cheat; false = not cheat;\\n  //for state: true = over; false = working;\\n  //for legal: true = over 2/3; false = not enough voter;\\n  struct ChallengeRecord {\\n    uint256 challengerId;\\n    uint256 cheaterId;\\n    uint256 agreeCount;\\n    uint256 disagreeCount;\\n    uint256 challengeRiseTime;\\n    bool result;\\n    bool state;\\n    bool legal;\\n  }\\n\\n  struct TokenProperty {\\n    TokenStatus tokenStatus;\\n    uint256 pendingReward;\\n  }\\n\\n  enum TokenStatus {\\n    INVALID,\\n    EXIT,\\n    SIGNED,\\n    ADMITTED,\\n    ACHIEVED,\\n    FAILED,\\n    REKT\\n  }\\n\\n  struct Record {\\n    string contentUri;\\n  }\\n\\n  // implementation cannot be initialize\\n  constructor() initializer {}\\n\\n  function initialize(\\n    address owner,\\n    IERC20Upgradeable token_,\\n    uint256 amount_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 startTime_,\\n    uint256 totalPeriod_,\\n    uint256 periodLength_,\\n    string memory campaignUri_\\n  ) public override initializer {\\n    require(address(token_) != address(0), 'Campaign: invalid token');\\n    require(amount_ != 0, 'Campaign: invalid amount');\\n\\n    _transferOwnership(owner);\\n    __ERC721_init_unchained(name_, symbol_);\\n\\n    targetToken = token_;\\n    requiredAmount = amount_;\\n    startTime = startTime_;\\n    lastEpochEndTime = startTime_;\\n    totalEpochsCount = totalPeriod_;\\n    period = periodLength_;\\n    campaignUri = campaignUri_;\\n  }\\n\\n  function setCampaignUri(string calldata newUri) external override onlyOwner {\\n    campaignUri = newUri;\\n    emit EvCampaignUriSet(campaignUri);\\n  }\\n\\n  //\\n  /**\\n   * @dev user stake token and want to participate this campaign\\n   */\\n  function signUp() external override onlyNotStarted {\\n    require(balanceOf(msg.sender) == 0, 'Campaign: already signed');\\n\\n    IERC20Upgradeable(targetToken).safeTransferFrom(msg.sender, address(this), requiredAmount);\\n\\n    uint256 tokenId = _idx;\\n    _idx += 1;\\n\\n    _safeMint(msg.sender, tokenId);\\n\\n    properties[tokenId].tokenStatus = TokenStatus.SIGNED;\\n    properties[tokenId].pendingReward = requiredAmount;\\n\\n    emit EvSignUp(tokenId);\\n  }\\n\\n  /**\\n   * @dev campaign owner admit several address to participate this campaign\\n   * @param allowlists allowed tokenId array\\n   */\\n  function admit(uint256[] calldata allowlists) external onlyNotStarted onlyOwner {\\n    for (uint256 i = 0; i < allowlists.length; i++) {\\n      uint256 tokenId = allowlists[i];\\n\\n      TokenProperty memory property = properties[tokenId];\\n\\n      require(property.pendingReward == requiredAmount, 'Campaign: stake not match');\\n      require(property.tokenStatus == TokenStatus.SIGNED, 'Campaign: not signed up');\\n\\n      properties[tokenId].tokenStatus = TokenStatus.ADMITTED;\\n\\n      emit EvRegisterSuccessfully(tokenId);\\n    }\\n  }\\n\\n  /**\\n   * @dev once campaign owner admit some address by mistake\\n   * @dev can modify via this function but more gas-expensive\\n   * @param lists modified tokenId list array\\n   * @param targetStatuses corresponding status array\\n   */\\n  function modifyRegistry(uint256[] calldata lists, bool[] calldata targetStatuses) external onlyNotStarted onlyOwner {\\n    for (uint256 i = 1; i < lists.length; i++) {\\n      uint256 tokenId = lists[i];\\n      bool targetStatus = targetStatuses[i];\\n      if (targetStatus) {\\n        // require(properties[tokenId].tokenStatus == TokenStatus.SIGNED, 'Campaign: not signed');\\n        properties[tokenId].tokenStatus = TokenStatus.ADMITTED;\\n      } else {\\n        // require(properties[tokenId].tokenStatus == TokenStatus.ADMITTED, 'Campaign: not admitted');\\n        properties[tokenId].tokenStatus = TokenStatus.SIGNED;\\n      }\\n    }\\n    emit EvModifyRegistry(lists, targetStatuses);\\n  }\\n\\n  /**\\n   * @dev user check in\\n   * @param contentUri string of ipfs uri or other decentralize storage\\n   */\\n  function checkIn(string calldata contentUri, uint256 tokenId)\\n    external\\n    override\\n    onlyTokenHolder(tokenId)\\n    onlyStarted\\n    onlyAdmitted(tokenId)\\n  {\\n    _checkEpoch();\\n    records[currentEpoch][tokenId] = Record(contentUri);\\n\\n    emit EvCheckIn(currentEpoch, tokenId, contentUri);\\n  }\\n\\n  function challenge(uint256 challengerId, uint256 cheaterId)\\n    external\\n    override\\n    onlyTokenHolder(challengerId)\\n    onlyStarted\\n    onlyAdmitted(challengerId)\\n    onlyAdmitted(cheaterId)\\n    onlyChallengeAllowed\\n  {\\n    uint256 challengeRecordId = _challengeIdx;\\n    _challengeIdx += 1;\\n\\n    challengeRecords[challengeRecordId].challengerId = challengerId;\\n    challengeRecords[challengeRecordId].cheaterId = cheaterId;\\n    challengeRecords[challengeRecordId].challengeRiseTime = block.timestamp;\\n    challengeRecords[challengeRecordId].state = true;\\n\\n    emit EvChallenge(challengerId, cheaterId, challengeRecordId);\\n  }\\n\\n  function vote(\\n    uint256 tokenId,\\n    uint256 challengeRecordId,\\n    bool choice\\n  )\\n    external\\n    override\\n    onlyTokenHolder(tokenId)\\n    onlyStarted\\n    onlyAdmitted(tokenId)\\n    onlyChallengeExist(challengeRecordId)\\n    onlyChallengeNotEnded(challengeRecordId)\\n  {\\n    voters[challengeRecordId][tokenId].voted = true;\\n    voters[challengeRecordId][tokenId].choice = choice;\\n\\n    if (choice == true) {\\n      challengeRecords[challengeRecordId].agreeCount += 1;\\n    } else {\\n      challengeRecords[challengeRecordId].disagreeCount += 1;\\n    }\\n\\n    emit EvVote(tokenId, challengeRecordId);\\n  }\\n\\n  function judgement(uint256 challengeRecordId)\\n    external\\n    override\\n    onlyChallengeEnded(challengeRecordId)\\n    onlyChallengeExist(challengeRecordId)\\n    onlyNotJudged(challengeRecordId)\\n  {\\n    uint256 _challengerId = challengeRecords[challengeRecordId].challengerId;\\n    uint256 _cheaterId = challengeRecords[challengeRecordId].cheaterId;\\n    uint256 _count = challengeRecords[challengeRecordId].agreeCount + challengeRecords[challengeRecordId].disagreeCount;\\n\\n    require(_count >= (_idx * Consts.legalVoterRatio) / Consts.SCALE, 'Challenge: not enough voter');\\n\\n    challengeJudgedCount += 1;\\n\\n    bool _result = (challengeRecords[challengeRecordId].agreeCount > challengeRecords[challengeRecordId].disagreeCount);\\n    challengeRecords[challengeRecordId].result = _result;\\n    challengeRecords[challengeRecordId].state = true;\\n\\n    if (_result) {\\n      properties[_cheaterId].tokenStatus = TokenStatus.FAILED;\\n\\n      uint256 _tranReward = properties[_cheaterId].pendingReward;\\n      properties[_cheaterId].pendingReward = 0;\\n      properties[challengeRecords[challengeRecordId].challengerId].pendingReward +=\\n        (_tranReward * Consts.challengerSuccessRatio) /\\n        Consts.SCALE;\\n      sharedReward += (_tranReward * Consts.successSharedRatio) / Consts.SCALE;\\n      protocolFee += (_tranReward * Consts.successProtocolRatio) / Consts.SCALE;\\n\\n      cheatCount += 1;\\n\\n      emit EvFailure(_cheaterId);\\n      emit EvCheat(_cheaterId);\\n    } else {\\n      uint256 _tranReward = ((properties[_challengerId].pendingReward) * Consts.challengerFailRatio) / Consts.SCALE;\\n      properties[challengeRecords[challengeRecordId].challengerId].pendingReward =\\n        ((properties[challengeRecords[challengeRecordId].challengerId].pendingReward) *\\n          (Consts.SCALE - Consts.challengerFailRatio)) /\\n        Consts.SCALE;\\n      sharedReward += (_tranReward * Consts.failSharedRatio) / Consts.SCALE;\\n      protocolFee += (_tranReward * Consts.failProtocolRatio) / Consts.SCALE;\\n    }\\n\\n    emit EvJudgement(challengeRecordId);\\n  }\\n\\n  function forceEnd() external onlyEnoughCheater onlyAllJudged {\\n    _forceSettle();\\n  }\\n\\n  /**\\n   * @dev everyone can call the function to settle reward\\n   */\\n  function settle() external override {\\n    _settle();\\n  }\\n\\n  /**\\n   * @dev user claim reward after campaign settled\\n   */\\n  function claim(uint256 tokenId) external override onlyTokenHolder(tokenId) onlyAllJudged {\\n    _claim(tokenId);\\n  }\\n\\n  /**\\n   * @dev host who participate the campaign claim reward and withdraw host reward\\n   */\\n  function claimAndWithdraw(uint256 tokenId) external override onlyOwner onlyTokenHolder(tokenId) onlyAllJudged {\\n    _claim(tokenId);\\n    _withdraw();\\n  }\\n\\n  /**\\n   * @dev host withdraw host reward\\n   */\\n  function withdraw() external override onlyOwner onlySettled {\\n    _withdraw();\\n  }\\n\\n  /**\\n   * @dev\\n   */\\n  function checkUpkeep(\\n    bytes calldata /* checkData */\\n  )\\n    external\\n    view\\n    override\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory /* performData */\\n    )\\n  {\\n    upkeepNeeded = block.timestamp - lastEpochEndTime > period;\\n  }\\n\\n  /**\\n   *\\n   */\\n  function performUpkeep(\\n    bytes calldata /* performData */\\n  ) external override {\\n    _checkEpoch();\\n  }\\n\\n  /**\\n   * @dev\\n   */\\n  function _claim(uint256 tokenId) private {\\n    if (status != Consts.CampaignStatus.SETTLED) {\\n      _settle();\\n    }\\n\\n    uint256 reward = properties[tokenId].pendingReward == 0\\n      ? 0\\n      : properties[tokenId].pendingReward + sharedReward / successTokensCount;\\n\\n    IERC20Upgradeable(targetToken).safeTransfer(msg.sender, reward);\\n\\n    properties[tokenId].pendingReward = 0;\\n\\n    emit EvClaimReward(tokenId, reward);\\n  }\\n\\n  /**\\n   * @dev host withdraw host reward\\n   */\\n  function _withdraw() private {\\n    uint256 reward = hostReward;\\n    hostReward = 0;\\n\\n    IERC20Upgradeable(targetToken).safeTransfer(msg.sender, reward);\\n\\n    IERC20Upgradeable(targetToken).safeTransfer(Consts.PROTOCOL_RECIPIENT, protocolFee);\\n\\n    emit EvWithDraw(msg.sender, reward, protocolFee);\\n  }\\n\\n  /**\\n   * @dev someone will call the function to settle the campaign\\n   */\\n  function _settle() private onlyEnded {\\n    successTokensCount = _idx;\\n    for (uint256 tokenId = 0; tokenId < _idx; tokenId++) {\\n      for (uint256 j = 0; j < totalEpochsCount; j++) {\\n        string memory content = records[j][tokenId].contentUri;\\n        if (bytes(content).length == 0) {\\n          uint256 penalty = properties[tokenId].pendingReward;\\n          hostReward += (penalty * Consts.HOST_REWARD) / Consts.DECIMAL;\\n          protocolFee += (penalty * Consts.PROTOCOL_FEE) / Consts.DECIMAL;\\n          sharedReward += penalty - hostReward - protocolFee;\\n          properties[tokenId].pendingReward = 0;\\n          successTokensCount = successTokensCount - 1;\\n          emit EvFailure(tokenId);\\n          break;\\n        }\\n      }\\n      emit EvSuccess(tokenId);\\n    }\\n    // If nobody success, sharedReward come to protocol\\n    if (successTokensCount == 0) {\\n      protocolFee += sharedReward;\\n      sharedReward = 0;\\n    }\\n    status = Consts.CampaignStatus.SETTLED;\\n\\n    emit EvSettle(msg.sender);\\n  }\\n\\n  function _forceSettle() private onlyEnoughCheater {\\n    successTokensCount = _idx;\\n    for (uint256 tokenId = 0; tokenId < _idx; tokenId++) {\\n      for (uint256 j = 0; j < totalEpochsCount; j++) {\\n        string memory content = records[j][tokenId].contentUri;\\n        if (bytes(content).length == 0) {\\n          uint256 penalty = properties[tokenId].pendingReward;\\n          hostReward += (penalty * Consts.HOST_REWARD) / Consts.DECIMAL;\\n          protocolFee += (penalty * Consts.PROTOCOL_FEE) / Consts.DECIMAL;\\n          sharedReward += penalty - hostReward - protocolFee;\\n          properties[tokenId].pendingReward = 0;\\n          successTokensCount = successTokensCount - 1;\\n          emit EvFailure(tokenId);\\n          break;\\n        }\\n      }\\n      emit EvSuccess(tokenId);\\n    }\\n    // If nobody success, sharedReward come to protocol\\n    if (successTokensCount == 0) {\\n      protocolFee += sharedReward;\\n      sharedReward = 0;\\n    }\\n    status = Consts.CampaignStatus.SETTLED;\\n\\n    emit EvSettle(msg.sender);\\n  }\\n\\n  function _checkEpoch() private {\\n    if (block.timestamp - lastEpochEndTime > period) {\\n      uint256 n = (block.timestamp - lastEpochEndTime) / period;\\n      currentEpoch += n;\\n      lastEpochEndTime += period * n;\\n    }\\n\\n    require(currentEpoch < totalEpochsCount, 'Campaign: checkEpoch too late');\\n  }\\n\\n  // Do not allow transfer\\n  function _beforeTokenTransfer(\\n    address from,\\n    address,\\n    uint256\\n  ) internal pure override {\\n    require(from == address(0), 'Campaign: Could not transfer');\\n  }\\n\\n  function _readTokenHolder(uint256 tokenId) private view {\\n    require(ownerOf(tokenId) == msg.sender, 'Campaign: not token holder');\\n  }\\n\\n  function _getAdmitted(uint256 tokenId) internal view {\\n    require(properties[tokenId].tokenStatus == TokenStatus.ADMITTED, 'Campaign: not admitted');\\n  }\\n\\n  function _readChallengeExist(uint256 challengeRecordId) private view {\\n    require(challengeRecordId < _challengeIdx, 'ChallengeRecord: not exist');\\n  }\\n\\n  function _checkSettled() private view {\\n    require(status == Consts.CampaignStatus.SETTLED, 'Campaign: not settled');\\n  }\\n\\n  function _checkEnded() private view {\\n    require(block.timestamp > startTime + totalEpochsCount * period, 'Campaign: not ended');\\n  }\\n\\n  function _checkNotStarted() private view {\\n    require(block.timestamp < startTime, 'Campaign: already started');\\n  }\\n\\n  function _checkStarted() private view {\\n    require(block.timestamp >= startTime, 'Campaign: not start');\\n  }\\n\\n  function _checkAllJudged() private view {\\n    require(_challengeIdx == challengeJudgedCount, 'Challenge: not all judged');\\n  }\\n\\n  function _checkEnoughCheater() private view {\\n    require(cheatCount >= (_idx * Consts.cheaterRatio) / Consts.SCALE, 'Campaign: not enough cheater');\\n  }\\n\\n  modifier onlyTokenHolder(uint256 tokenId) {\\n    _readTokenHolder(tokenId);\\n    _;\\n  }\\n\\n  modifier onlySettled() {\\n    _checkSettled();\\n    _;\\n  }\\n\\n  modifier onlyEnded() {\\n    _checkEnded();\\n    _;\\n  }\\n\\n  modifier onlyStarted() {\\n    _checkStarted();\\n    _;\\n  }\\n\\n  modifier onlyNotStarted() {\\n    _checkNotStarted();\\n    _;\\n  }\\n\\n  modifier onlyAdmitted(uint256 tokenId) {\\n    _getAdmitted(tokenId);\\n    _;\\n  }\\n\\n  modifier onlyChallengeExist(uint256 challengeRecordId) {\\n    _readChallengeExist(challengeRecordId);\\n    _;\\n  }\\n\\n  modifier onlyChallengeNotEnded(uint256 challengeRecordId) {\\n    require(block.timestamp < challengeRecords[challengeRecordId].challengeRiseTime + 7 days, 'Challenge: ended');\\n    _;\\n  }\\n\\n  modifier onlyChallengeEnded(uint256 challengeRecordId) {\\n    require(block.timestamp >= challengeRecords[challengeRecordId].challengeRiseTime + 7 days, 'Challenge: not ended');\\n    _;\\n  }\\n\\n  modifier onlyChallengeAllowed() {\\n    require(block.timestamp <= startTime + totalEpochsCount * period + 1 days, 'Challenge: not allowed');\\n    _;\\n  }\\n\\n  modifier onlyNotJudged(uint256 challengeRecordId) {\\n    require(challengeRecords[challengeRecordId].state == false, 'Challenge: already judged');\\n    _;\\n  }\\n\\n  modifier onlyAllJudged() {\\n    _checkAllJudged();\\n    _;\\n  }\\n\\n  modifier onlyEnoughCheater() {\\n    _checkEnoughCheater();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0a96dd11bfc0fff5149407d6b2d067f170ff14ae63580166e076426e46075c4d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Consts.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.15;\\n\\ninterface KeeperRegistrarInterface {\\n  function register(\\n    string memory name,\\n    bytes calldata encryptedEmail,\\n    address upkeepContract,\\n    uint32 gasLimit,\\n    address adminAddress,\\n    bytes calldata checkData,\\n    uint96 amount,\\n    uint8 source,\\n    address sender\\n  ) external;\\n}\\n\\nlibrary Consts {\\n  //\\n  uint256 public constant DECIMAL = 10**6;\\n  uint256 public constant PROTOCOL_FEE = 10**5;\\n  uint256 public constant HOST_REWARD = 2 * 10**5;\\n\\n  // challenge\\n  uint8 constant legalVoterRatio = 66;\\n  uint8 constant cheaterRatio = 30;\\n  uint8 constant challengerSuccessRatio = 60;\\n  uint8 constant successSharedRatio = 30;\\n  uint8 constant successProtocolRatio = 10;\\n  uint8 constant challengerFailRatio = 40;\\n  uint8 constant failSharedRatio = 75;\\n  uint8 constant failProtocolRatio = 25;\\n  uint8 constant SCALE = 100;\\n\\n  bytes32 public constant SALT = keccak256(abi.encode('Sisyphus Protocol'));\\n\\n  // tmp vitalik.eth\\n  address public constant PROTOCOL_RECIPIENT = 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045;\\n  address public constant UPKEEP_ADMIN = 0x11F2241Bf12f1a640f78e5d1A0d3302D77fB5e78;\\n\\n  // chainlink\\n  bytes4 public constant registerSig = KeeperRegistrarInterface.register.selector;\\n  // LinkSend\\n  uint96 public constant MIN_LINK_AMOUNT = 5000000000000000000;\\n  // upKeep GasLimit\\n  uint32 public constant UPKEEP_GAS_LIMIT = 5000000;\\n\\n  // upKeep Cancel Delay same as the number in KeeperRegistry\\n  uint256 public constant CANCELATION_DELAY = 50;\\n\\n  uint64 public constant UINT64_MAX = 2**64 - 1;\\n\\n  enum CampaignType {\\n    IN_VALID,\\n    DAILY,\\n    WEEKLY\\n  }\\n\\n  enum CampaignStatus {\\n    IN_VALID,\\n    NOT_START,\\n    ON_GOING,\\n    ENDED,\\n    SETTLED\\n  }\\n}\\n\",\"keccak256\":\"0x238a5ea99eeb27fa611cc5328eb2c561cff95b649fec3d8baa036b843b0bc0d6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/ICampaign.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport { Consts } from '../Consts.sol';\\n\\ninterface ICampaign {\\n  function initialize(\\n    address owner,\\n    IERC20Upgradeable token_,\\n    uint256 amount_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 startTime_,\\n    uint256 totalPeriod_,\\n    uint256 periodLength_,\\n    string memory campaignUri_\\n  ) external;\\n\\n  function status() external view returns (Consts.CampaignStatus);\\n\\n  // owner update content uri\\n  function setCampaignUri(string calldata newUri) external;\\n\\n  // user sign up the campaign\\n  function signUp() external;\\n\\n  // host allow user to participate\\n  function admit(uint256[] calldata) external;\\n\\n  // user check at a fixed frequency\\n  function checkIn(string calldata, uint256) external;\\n\\n  // settle the reward\\n  function settle() external;\\n\\n  // user claim reward after campaign ended\\n  function claim(uint256 tokenId) external;\\n\\n  function claimAndWithdraw(uint256 tokenId) external;\\n\\n  function withdraw() external;\\n\\n  function challenge(uint256, uint256) external;\\n\\n  function vote(\\n    uint256,\\n    uint256,\\n    bool\\n  ) external;\\n\\n  function judgement(uint256) external;\\n\\n  function forceEnd() external;\\n\\n  event EvCampaignUriSet(string newUri);\\n\\n  event EvSignUp(uint256 tokenId);\\n\\n  event EvRegisterSuccessfully(uint256 tokenId);\\n\\n  event EvCheckIn(uint256 epoch, uint256 tokenId, string contentUri);\\n\\n  event EvModifyRegistry(uint256[] tokenList, bool[] status);\\n\\n  // settle the campaign event\\n  event EvSettle(address user);\\n\\n  event EvClaimReward(uint256 tokenId, uint256 amount);\\n  // who fail\\n  event EvFailure(uint256 tokenId);\\n  // who success\\n  event EvSuccess(uint256 tokenId);\\n\\n  event EvWithDraw(address host, uint256 hostReward, uint256 protocolFee);\\n\\n  event EvChallenge(uint256 challengerId, uint256 cheaterId, uint256 challengeRecordId);\\n\\n  event EvVote(uint256 tokenId, uint256 challengeRecordId);\\n\\n  event EvJudgement(uint256 challengeRecordId);\\n\\n  event EvCheat(uint256 cheaterId);\\n}\\n\",\"keccak256\":\"0x50fd07ccc97f42745938512a76df8a8890b7e44884f93de6edb9673a33ddad96\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200013d60201b62001dbe1760201c565b15801562000063575060005460ff166001145b620000cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000ef576000805461ff0019166101001790555b801562000136576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b506200014c565b6001600160a01b03163b151590565b614291806200015c6000396000f3fe608060405234801561001057600080fd5b50600436106103575760003560e01c8063715018a6116101c8578063bf96ae6311610104578063e86a5309116100a2578063f2fde38b1161007c578063f2fde38b14610728578063f62b46c91461073b578063f7b108081461074e578063fba00cbd1461078957600080fd5b8063e86a5309146106da578063e985e9c5146106e3578063ef78d4fd1461071f57600080fd5b8063c87b56dd116100de578063c87b56dd146106a2578063d5d22165146106b5578063db498812146106be578063dfa447ce146106d157600080fd5b8063bf96ae63146105f7578063bfa6f912146105ff578063c771766d1461069957600080fd5b806395d89b4111610171578063a22cb4651161014b578063a22cb465146105bf578063b0e21e8a146105d2578063b6f625e6146105db578063b88d4fde146105e457600080fd5b806395d89b411461059b57806396bc7434146105a35780639cc8525d146105ac57600080fd5b806384e33501116101a257806384e335011461056e5780638da5cb5b146105775780639397f8e21461058857600080fd5b8063715018a614610554578063766718081461055c57806378e979251461056557600080fd5b8063379607f5116102975780636352211e116102405780636efcaab51161021a5780636efcaab51461051d578063703064d11461052557806370a082311461053857806370f42df81461054b57600080fd5b80636352211e146104d65780636a18ff7a146104e95780636e04ff0d146104fc57600080fd5b80634585e33b116102715780634585e33b146104b257806348b9ef40146104c55780634ee0ab0d146104ce57600080fd5b8063379607f5146104845780633ccfd60b1461049757806342842e0e1461049f57600080fd5b80631a5975481161030457806327e61c25116102de57806327e61c2514610434578063280058ee146104475780632e4148901461045e578063327107f71461047157600080fd5b80631a597548146103f4578063200d2ed21461040757806323b872dd1461042157600080fd5b8063095ea7b311610335578063095ea7b3146103c45780630c0b2bdd146103d957806311da60b4146103ec57600080fd5b806301ffc9a71461035c57806306fdde0314610384578063081812fc14610399575b600080fd5b61036f61036a3660046136d7565b6107d7565b60405190151581526020015b60405180910390f35b61038c6108bc565b60405161037b919061374c565b6103ac6103a736600461375f565b61094e565b6040516001600160a01b03909116815260200161037b565b6103d76103d236600461379d565b610975565b005b6103d76103e7366004613815565b610aab565b6103d7610ba4565b6103d7610402366004613881565b610bae565b60cb546104149060ff1681565b60405161037b91906138d9565b6103d761042f3660046138f3565b610d57565b6103d761044236600461375f565b610dde565b61045060d35481565b60405190815260200161037b565b6103d761046c366004613934565b61122f565b60c9546103ac906001600160a01b031681565b6103d761049236600461375f565b61135f565b6103d761137e565b6103d76104ad3660046138f3565b611396565b6103d76104c0366004613998565b6113b1565b61045060ca5481565b6103d76113b9565b6103ac6104e436600461375f565b6113d1565b6103d76104f73660046139dc565b611436565b61050f61050a366004613998565b61159d565b60405161037b929190613a15565b61038c6115bc565b6103d7610533366004613adc565b61164a565b610450610546366004613bad565b611872565b61045060d95481565b6103d761190c565b61045060d15481565b61045060cd5481565b61045060d55481565b6033546001600160a01b03166103ac565b6103d7610596366004613bca565b61191e565b61038c6119f1565b61045060d65481565b61038c6105ba366004613934565b611a00565b6103d76105cd366004613c16565b611aa9565b61045060d85481565b61045060ce5481565b6103d76105f2366004613c4f565b611ab4565b6103d7611b42565b61065861060d36600461375f565b60dd60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909160ff808216916101008104821691620100009091041688565b6040805198895260208901979097529587019490945260608601929092526080850152151560a0840152151560c0830152151560e08201526101000161037b565b61045060d05481565b61038c6106b036600461375f565b611c3d565b61045060d45481565b6103d76106cc366004613998565b611cb1565b61045060d75481565b61045060d25481565b61036f6106f1366004613ccf565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b61045060cf5481565b6103d7610736366004613bad565b611d03565b6103d761074936600461375f565b611d93565b61077b61075c36600461375f565b60db602052600090815260409020805460019091015460ff9091169082565b60405161037b929190613cfd565b6107c0610797366004613934565b60dc60209081526000928352604080842090915290825290205460ff8082169161010090041682565b60408051921515835290151560208301520161037b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061086a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108b657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060609780546108cb90613d1b565b80601f01602080910402602001604051908101604052809291908181526020018280546108f790613d1b565b80156109445780601f1061091957610100808354040283529160200191610944565b820191906000526020600020905b81548152906001019060200180831161092757829003601f168201915b5050505050905090565b600061095982611dcd565b506000908152609b60205260409020546001600160a01b031690565b6000610980826113d1565b9050806001600160a01b0316836001600160a01b031603610a0e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610a2a5750610a2a81336106f1565b610a9c5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610a05565b610aa68383611e31565b505050565b610ab3611eac565b610abb611efd565b60015b83811015610b61576000858583818110610ada57610ada613d55565b9050602002013590506000848484818110610af757610af7613d55565b9050602002016020810190610b0c9190613d6b565b90508015610b3257600082815260db60205260409020805460ff19166003179055610b4c565b600082815260db60205260409020805460ff191660021790555b50508080610b5990613d9e565b915050610abe565b507e896c158ae8c63b50648f3ace621592a536dc686bb71ea91e8c1a75207e26fd84848484604051610b969493929190613db8565b60405180910390a150505050565b610bac611f57565b565b610bb6611eac565b610bbe611efd565b60005b81811015610aa6576000838383818110610bdd57610bdd613d55565b60209081029290920135600081815260db90935260408084208151808301909252805492955090925090829060ff166006811115610c1d57610c1d6138c3565b6006811115610c2e57610c2e6138c3565b8152602001600182015481525050905060ca54816020015114610c935760405162461bcd60e51b815260206004820152601960248201527f43616d706169676e3a207374616b65206e6f74206d61746368000000000000006044820152606401610a05565b600281516006811115610ca857610ca86138c3565b14610cf55760405162461bcd60e51b815260206004820152601760248201527f43616d706169676e3a206e6f74207369676e65642075700000000000000000006044820152606401610a05565b600082815260db6020908152604091829020805460ff1916600317905590518381527f0898a2d0f11ee389113f47ac39e4c57338d20de87eab1ff9bcce61256c868c85910160405180910390a150508080610d4f90613d9e565b915050610bc1565b610d6133826121f7565b610dd35760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610a05565b610aa6838383612276565b600081815260dd60205260409020600401548190610dff9062093a80613e54565b421015610e4e5760405162461bcd60e51b815260206004820152601460248201527f4368616c6c656e67653a206e6f7420656e6465640000000000000000000000006044820152606401610a05565b81610e588161245b565b600083815260dd60205260409020600501548390610100900460ff1615610ec15760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e67653a20616c7265616479206a7564676564000000000000006044820152606401610a05565b600084815260dd60205260408120805460018201546003830154600290930154919390929091610ef19190613e54565b60d254909150606490610f0690604290613e6c565b610f109190613ea1565b811015610f5f5760405162461bcd60e51b815260206004820152601b60248201527f4368616c6c656e67653a206e6f7420656e6f75676820766f74657200000000006044820152606401610a05565b600160d46000828254610f729190613e54565b9091555050600087815260dd60205260409020600381015460028201546005909201805461ff00199290931191821661ffff199093169290921761010017909155801561110657600083815260db60205260408120805460ff1916600517815560010180549190556064610fe7603c83613e6c565b610ff19190613ea1565b60008a815260dd6020908152604080832054835260db9091528120600101805490919061101f908490613e54565b9091555060649050611032601e83613e6c565b61103c9190613ea1565b60d6600082825461104d9190613e54565b9091555060649050611060600a83613e6c565b61106a9190613ea1565b60d8600082825461107b9190613e54565b92505081905550600160d560008282546110959190613e54565b90915550506040518481527f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a782099060200160405180910390a16040518481527f7bd432623a7ded907d0b1d373f5979fadde9c0f579f29ae990736e560c2a1aaa9060200160405180910390a1506111f2565b600084815260db602052604081206001015460649061112790602890613e6c565b6111319190613ea1565b90506064611140602882613eb5565b60008b815260dd6020908152604080832054835260db90915290206001015461116c9160ff1690613e6c565b6111769190613ea1565b60008a815260dd6020908152604080832054835260db90915290206001015560646111a2604b83613e6c565b6111ac9190613ea1565b60d660008282546111bd9190613e54565b90915550606490506111d0601983613e6c565b6111da9190613ea1565b60d860008282546111eb9190613e54565b9091555050505b6040518881527f3caa68ace909b33d20e5ff96e9c98e4f6b20d3490307a1c09b28bea2e71893d69060200160405180910390a15050505050505050565b81611239816124ac565b61124161250c565b8261124b8161255e565b826112558161255e565b60cf5460ce546112659190613e6c565b60cd546112729190613e54565b61127f9062015180613e54565b4211156112ce5760405162461bcd60e51b815260206004820152601660248201527f4368616c6c656e67653a206e6f7420616c6c6f776564000000000000000000006044820152606401610a05565b60d380549060019060006112e28385613e54565b9091555050600081815260dd602090815260409182902088815560018101889055426004820155600501805461ff00191661010017905581518881529081018790529081018290527f41b86b8e6a50d1879c8fe4ff449470156b8c2b6c02117dafd10625d300e4aacd9060600160405180910390a1505050505050565b80611369816124ac565b6113716125d0565b61137a82612623565b5050565b611386611efd565b61138e6126f9565b610bac61275f565b610aa683838360405180602001604052806000815250611ab4565b61137a6127f2565b6113c16128b7565b6113c96125d0565b610bac612924565b6000818152609960205260408120546001600160a01b0316806108b65760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610a05565b82611440816124ac565b61144861250c565b836114528161255e565b8361145c8161245b565b600085815260dd6020526040902060040154859061147d9062093a80613e54565b42106114cb5760405162461bcd60e51b815260206004820152601060248201527f4368616c6c656e67653a20656e646564000000000000000000000000000000006044820152606401610a05565b600086815260dc602090815260408083208a845290915290208054600161ffff199091166101008815159081029190911782179092550361153357600086815260dd60205260408120600201805460019290611528908490613e54565b9091555061155b9050565b600086815260dd60205260408120600301805460019290611555908490613e54565b90915550505b60408051888152602081018890527fe412d87c65a2ecd9a42cbdcd9b35239448cd2ec046dbe0d6af0eee194ec6173e910160405180910390a150505050505050565b6000606060cf5460d054426115b29190613ed8565b1191509250929050565b60cc80546115c990613d1b565b80601f01602080910402602001604051908101604052809291908181526020018280546115f590613d1b565b80156116425780601f1061161757610100808354040283529160200191611642565b820191906000526020600020905b81548152906001019060200180831161162557829003601f168201915b505050505081565b600054610100900460ff161580801561166a5750600054600160ff909116105b806116845750303b158015611684575060005460ff166001145b6116f65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a05565b6000805460ff191660011790558015611719576000805461ff0019166101001790555b6001600160a01b03891661176f5760405162461bcd60e51b815260206004820152601760248201527f43616d706169676e3a20696e76616c696420746f6b656e0000000000000000006044820152606401610a05565b876000036117bf5760405162461bcd60e51b815260206004820152601860248201527f43616d706169676e3a20696e76616c696420616d6f756e7400000000000000006044820152606401610a05565b6117c88a612b58565b6117d28787612bb7565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b1617905560ca88905560cd85905560d085905560ce84905560cf83905560cc61181f8382613f3d565b508015611866576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b60006001600160a01b0382166118f05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610a05565b506001600160a01b03166000908152609a602052604090205490565b611914611efd565b610bac6000612b58565b80611928816124ac565b61193061250c565b8161193a8161255e565b6119426127f2565b604080516020601f87018190048102820183018352810186815290918291908890889081908501838280828437600092018290525093909452505060d154815260da602090815260408083208884529091529020825190915081906119a79082613f3d565b509050507f0de15cde05bed13731732bfe8f1ff5a69a8be94505d2e381f23997b07af8dd8560d1548487876040516119e29493929190613ffd565b60405180910390a15050505050565b6060609880546108cb90613d1b565b60da602090815260009283526040808420909152908252902080548190611a2690613d1b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5290613d1b565b8015611a9f5780601f10611a7457610100808354040283529160200191611a9f565b820191906000526020600020905b815481529060010190602001808311611a8257829003601f168201915b5050505050905081565b61137a338383612c4d565b611abe33836121f7565b611b305760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610a05565b611b3c84848484612d1b565b50505050565b611b4a611eac565b611b5333611872565b15611ba05760405162461bcd60e51b815260206004820152601860248201527f43616d706169676e3a20616c7265616479207369676e656400000000000000006044820152606401610a05565b60ca5460c954611bbf916001600160a01b039091169033903090612da4565b60d28054906001906000611bd38385613e54565b90915550611be390503382612e55565b600081815260db6020908152604091829020805460ff1916600217815560ca5460019091015590518281527fcd169e01d559b6d336962db715a67dc5fd03521032de891b679200894ec219f391015b60405180910390a150565b6060611c4882611dcd565b6000611c5f60408051602081019091526000815290565b90506000815111611c7f5760405180602001604052806000815250611caa565b80611c8984612e6f565b604051602001611c9a92919061403a565b6040516020818303038152906040525b9392505050565b611cb9611efd565b60cc611cc6828483614069565b507f9554c0ad8824b12a4301321d81a1a6d3be9e533b040fe09a8d7dfeaccb27618160cc604051611cf7919061412a565b60405180910390a15050565b611d0b611efd565b6001600160a01b038116611d875760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a05565b611d9081612b58565b50565b611d9b611efd565b80611da5816124ac565b611dad6125d0565b611db682612623565b61137a61275f565b6001600160a01b03163b151590565b6000818152609960205260409020546001600160a01b0316611d905760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610a05565b6000818152609b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190611e73826113d1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60cd544210610bac5760405162461bcd60e51b815260206004820152601960248201527f43616d706169676e3a20616c72656164792073746172746564000000000000006044820152606401610a05565b6033546001600160a01b03163314610bac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a05565b611f5f612fa4565b60d25460d95560005b60d25481101561218b5760005b60ce5481101561214557600081815260da6020908152604080832085845290915281208054611fa390613d1b565b80601f0160208091040260200160405190810160405280929190818152602001828054611fcf90613d1b565b801561201c5780601f10611ff15761010080835404028352916020019161201c565b820191906000526020600020905b815481529060010190602001808311611fff57829003601f168201915b50505050509050805160000361213257600083815260db6020526040902060010154620f424061204f62030d4083613e6c565b6120599190613ea1565b60d7600082825461206a9190613e54565b90915550620f42409050612081620186a083613e6c565b61208b9190613ea1565b60d8600082825461209c9190613e54565b909155505060d85460d7546120b19083613ed8565b6120bb9190613ed8565b60d660008282546120cc9190613e54565b9091555050600084815260db6020526040812060019081019190915560d9546120f59190613ed8565b60d9556040518481527f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a782099060200160405180910390a15050612145565b508061213d81613d9e565b915050611f75565b506040518181527f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3559060200160405180910390a18061218381613d9e565b915050611f68565b5060d9546000036121b55760d65460d860008282546121aa9190613e54565b9091555050600060d6555b60cb805460ff191660041790556040513381527f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f19060200160405180910390a1565b600080612203836113d1565b9050806001600160a01b0316846001600160a01b0316148061224a57506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b8061226e5750836001600160a01b03166122638461094e565b6001600160a01b0316145b949350505050565b826001600160a01b0316612289826113d1565b6001600160a01b0316146123055760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610a05565b6001600160a01b0382166123805760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a05565b61238b83838361300f565b612396600082611e31565b6001600160a01b0383166000908152609a602052604081208054600192906123bf908490613ed8565b90915550506001600160a01b0382166000908152609a602052604081208054600192906123ed908490613e54565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60d3548110611d905760405162461bcd60e51b815260206004820152601a60248201527f4368616c6c656e67655265636f72643a206e6f742065786973740000000000006044820152606401610a05565b336124b6826113d1565b6001600160a01b031614611d905760405162461bcd60e51b815260206004820152601a60248201527f43616d706169676e3a206e6f7420746f6b656e20686f6c6465720000000000006044820152606401610a05565b60cd54421015610bac5760405162461bcd60e51b815260206004820152601360248201527f43616d706169676e3a206e6f74207374617274000000000000000000000000006044820152606401610a05565b6003600082815260db602052604090205460ff166006811115612583576125836138c3565b14611d905760405162461bcd60e51b815260206004820152601660248201527f43616d706169676e3a206e6f742061646d6974746564000000000000000000006044820152606401610a05565b60d45460d35414610bac5760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e67653a206e6f7420616c6c206a7564676564000000000000006044820152606401610a05565b600460cb5460ff16600481111561263c5761263c6138c3565b1461264957612649611f57565b600081815260db6020526040812060010154156126915760d95460d6546126709190613ea1565b600083815260db602052604090206001015461268c9190613e54565b612694565b60005b60c9549091506126ae906001600160a01b03163383613066565b600082815260db602090815260408083206001019290925581518481529081018390527f7cb904b3cfc4c896696085c26766cebf2de422ae3864a0112b5e2fd9ec1efaf89101611cf7565b600460cb5460ff166004811115612712576127126138c3565b14610bac5760405162461bcd60e51b815260206004820152601560248201527f43616d706169676e3a206e6f7420736574746c656400000000000000000000006044820152606401610a05565b60d78054600090915560c95461277f906001600160a01b03163383613066565b60d85460c9546127b0916001600160a01b039091169073d8da6bf26964af9d7eed9e03e53415d37aa9604590613066565b60d8546040805133815260208101849052908101919091527f7a1c31090abe490bfd8379cbbaeef735a3e3c87ee34925f16d0fa3ff4e06115590606001611c32565b60cf5460d0546128029042613ed8565b111561286457600060cf5460d0544261281b9190613ed8565b6128259190613ea1565b90508060d160008282546128399190613e54565b909155505060cf5461284c908290613e6c565b60d0600082825461285d9190613e54565b9091555050505b60ce5460d15410610bac5760405162461bcd60e51b815260206004820152601d60248201527f43616d706169676e3a20636865636b45706f636820746f6f206c6174650000006044820152606401610a05565b60d2546064906128c990601e90613e6c565b6128d39190613ea1565b60d5541015610bac5760405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e3a206e6f7420656e6f7567682063686561746572000000006044820152606401610a05565b61292c6128b7565b60d25460d95560005b60d25481101561218b5760005b60ce54811015612b1257600081815260da602090815260408083208584529091528120805461297090613d1b565b80601f016020809104026020016040519081016040528092919081815260200182805461299c90613d1b565b80156129e95780601f106129be576101008083540402835291602001916129e9565b820191906000526020600020905b8154815290600101906020018083116129cc57829003601f168201915b505050505090508051600003612aff57600083815260db6020526040902060010154620f4240612a1c62030d4083613e6c565b612a269190613ea1565b60d76000828254612a379190613e54565b90915550620f42409050612a4e620186a083613e6c565b612a589190613ea1565b60d86000828254612a699190613e54565b909155505060d85460d754612a7e9083613ed8565b612a889190613ed8565b60d66000828254612a999190613e54565b9091555050600084815260db6020526040812060019081019190915560d954612ac29190613ed8565b60d9556040518481527f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a782099060200160405180910390a15050612b12565b5080612b0a81613d9e565b915050612942565b506040518181527f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3559060200160405180910390a180612b5081613d9e565b915050612935565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16612c345760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a05565b6097612c408382613f3d565b506098610aa68282613f3d565b816001600160a01b0316836001600160a01b031603612cae5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a05565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612d26848484612276565b612d32848484846130af565b611b3c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a05565b6040516001600160a01b0380851660248301528316604482015260648101829052611b3c9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613250565b61137a828260405180602001604052806000815250613335565b606081600003612eb257505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612edc5780612ec681613d9e565b9150612ed59050600a83613ea1565b9150612eb6565b60008167ffffffffffffffff811115612ef757612ef7613a30565b6040519080825280601f01601f191660200182016040528015612f21576020820181803683370190505b5090505b841561226e57612f36600183613ed8565b9150612f43600a866141b5565b612f4e906030613e54565b60f81b818381518110612f6357612f63613d55565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612f9d600a86613ea1565b9450612f25565b60cf5460ce54612fb49190613e6c565b60cd54612fc19190613e54565b4211610bac5760405162461bcd60e51b815260206004820152601360248201527f43616d706169676e3a206e6f7420656e646564000000000000000000000000006044820152606401610a05565b6001600160a01b03831615610aa65760405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e3a20436f756c64206e6f74207472616e73666572000000006044820152606401610a05565b6040516001600160a01b038316602482015260448101829052610aa69084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612df1565b60006001600160a01b0384163b15613245576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061310c9033908990889088906004016141c9565b6020604051808303816000875af1925050508015613147575060408051601f3d908101601f1916820190925261314491810190614205565b60015b6131fa573d808015613175576040519150601f19603f3d011682016040523d82523d6000602084013e61317a565b606091505b5080516000036131f25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a05565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061226e565b506001949350505050565b60006132a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133be9092919063ffffffff16565b805190915015610aa657808060200190518101906132c39190614222565b610aa65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a05565b61333f83836133cd565b61334c60008484846130af565b610aa65760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a05565b606061226e8484600085613528565b6001600160a01b0382166134235760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a05565b6000818152609960205260409020546001600160a01b0316156134885760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a05565b6134946000838361300f565b6001600160a01b0382166000908152609a602052604081208054600192906134bd908490613e54565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060824710156135a05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a05565b6001600160a01b0385163b6135f75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a05565b600080866001600160a01b03168587604051613613919061423f565b60006040518083038185875af1925050503d8060008114613650576040519150601f19603f3d011682016040523d82523d6000602084013e613655565b606091505b5091509150613665828286613670565b979650505050505050565b6060831561367f575081611caa565b82511561368f5782518084602001fd5b8160405162461bcd60e51b8152600401610a05919061374c565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611d9057600080fd5b6000602082840312156136e957600080fd5b8135611caa816136a9565b60005b8381101561370f5781810151838201526020016136f7565b83811115611b3c5750506000910152565b600081518084526137388160208601602086016136f4565b601f01601f19169290920160200192915050565b602081526000611caa6020830184613720565b60006020828403121561377157600080fd5b5035919050565b6001600160a01b0381168114611d9057600080fd5b803561379881613778565b919050565b600080604083850312156137b057600080fd5b82356137bb81613778565b946020939093013593505050565b60008083601f8401126137db57600080fd5b50813567ffffffffffffffff8111156137f357600080fd5b6020830191508360208260051b850101111561380e57600080fd5b9250929050565b6000806000806040858703121561382b57600080fd5b843567ffffffffffffffff8082111561384357600080fd5b61384f888389016137c9565b9096509450602087013591508082111561386857600080fd5b50613875878288016137c9565b95989497509550505050565b6000806020838503121561389457600080fd5b823567ffffffffffffffff8111156138ab57600080fd5b6138b7858286016137c9565b90969095509350505050565b634e487b7160e01b600052602160045260246000fd5b60208101600583106138ed576138ed6138c3565b91905290565b60008060006060848603121561390857600080fd5b833561391381613778565b9250602084013561392381613778565b929592945050506040919091013590565b6000806040838503121561394757600080fd5b50508035926020909101359150565b60008083601f84011261396857600080fd5b50813567ffffffffffffffff81111561398057600080fd5b60208301915083602082850101111561380e57600080fd5b600080602083850312156139ab57600080fd5b823567ffffffffffffffff8111156139c257600080fd5b6138b785828601613956565b8015158114611d9057600080fd5b6000806000606084860312156139f157600080fd5b83359250602084013591506040840135613a0a816139ce565b809150509250925092565b821515815260406020820152600061226e6040830184613720565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613a6157613a61613a30565b604051601f8501601f19908116603f01168101908282118183101715613a8957613a89613a30565b81604052809350858152868686011115613aa257600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613acd57600080fd5b611caa83833560208501613a46565b60008060008060008060008060006101208a8c031215613afb57600080fd5b613b048a61378d565b9850613b1260208b0161378d565b975060408a0135965060608a013567ffffffffffffffff80821115613b3657600080fd5b613b428d838e01613abc565b975060808c0135915080821115613b5857600080fd5b613b648d838e01613abc565b965060a08c0135955060c08c0135945060e08c013593506101008c0135915080821115613b9057600080fd5b50613b9d8c828d01613abc565b9150509295985092959850929598565b600060208284031215613bbf57600080fd5b8135611caa81613778565b600080600060408486031215613bdf57600080fd5b833567ffffffffffffffff811115613bf657600080fd5b613c0286828701613956565b909790965060209590950135949350505050565b60008060408385031215613c2957600080fd5b8235613c3481613778565b91506020830135613c44816139ce565b809150509250929050565b60008060008060808587031215613c6557600080fd5b8435613c7081613778565b93506020850135613c8081613778565b925060408501359150606085013567ffffffffffffffff811115613ca357600080fd5b8501601f81018713613cb457600080fd5b613cc387823560208401613a46565b91505092959194509250565b60008060408385031215613ce257600080fd5b8235613ced81613778565b91506020830135613c4481613778565b6040810160078410613d1157613d116138c3565b9281526020015290565b600181811c90821680613d2f57607f821691505b602082108103613d4f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613d7d57600080fd5b8135611caa816139ce565b634e487b7160e01b600052601160045260246000fd5b60006000198203613db157613db1613d88565b5060010190565b6040815283604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851115613df157600080fd5b8460051b808760608501376060908301838103820160208086019190915291810185905285916000916080015b86831015613e47578335613e31816139ce565b1515815292810192600192909201918101613e1e565b9998505050505050505050565b60008219821115613e6757613e67613d88565b500190565b6000816000190483118215151615613e8657613e86613d88565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613eb057613eb0613e8b565b500490565b600060ff821660ff841680821015613ecf57613ecf613d88565b90039392505050565b600082821015613eea57613eea613d88565b500390565b601f821115610aa657600081815260208120601f850160051c81016020861015613f165750805b601f850160051c820191505b81811015613f3557828155600101613f22565b505050505050565b815167ffffffffffffffff811115613f5757613f57613a30565b613f6b81613f658454613d1b565b84613eef565b602080601f831160018114613fa05760008415613f885750858301515b600019600386901b1c1916600185901b178555613f35565b600085815260208120601f198616915b82811015613fcf57888601518255948401946001909101908401613fb0565b5085821015613fed5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b6000835161404c8184602088016136f4565b8351908301906140608183602088016136f4565b01949350505050565b67ffffffffffffffff83111561408157614081613a30565b6140958361408f8354613d1b565b83613eef565b6000601f8411600181146140c957600085156140b15750838201355b600019600387901b1c1916600186901b178355614123565b600083815260209020601f19861690835b828110156140fa57868501358255602094850194600190920191016140da565b50868210156141175760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060208083526000845461413e81613d1b565b8084870152604060018084166000811461415f5760018114614179576141a7565b60ff198516838a01528284151560051b8a010195506141a7565b896000528660002060005b8581101561419f5781548b8201860152908301908801614184565b8a0184019650505b509398975050505050505050565b6000826141c4576141c4613e8b565b500690565b60006001600160a01b038087168352808616602084015250836040830152608060608301526141fb6080830184613720565b9695505050505050565b60006020828403121561421757600080fd5b8151611caa816136a9565b60006020828403121561423457600080fd5b8151611caa816139ce565b600082516142518184602087016136f4565b919091019291505056fea2646970667358221220b0b7df261cee66456d90bce64ab311e3dff2546efd93205e694b6804dc7da04864736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103575760003560e01c8063715018a6116101c8578063bf96ae6311610104578063e86a5309116100a2578063f2fde38b1161007c578063f2fde38b14610728578063f62b46c91461073b578063f7b108081461074e578063fba00cbd1461078957600080fd5b8063e86a5309146106da578063e985e9c5146106e3578063ef78d4fd1461071f57600080fd5b8063c87b56dd116100de578063c87b56dd146106a2578063d5d22165146106b5578063db498812146106be578063dfa447ce146106d157600080fd5b8063bf96ae63146105f7578063bfa6f912146105ff578063c771766d1461069957600080fd5b806395d89b4111610171578063a22cb4651161014b578063a22cb465146105bf578063b0e21e8a146105d2578063b6f625e6146105db578063b88d4fde146105e457600080fd5b806395d89b411461059b57806396bc7434146105a35780639cc8525d146105ac57600080fd5b806384e33501116101a257806384e335011461056e5780638da5cb5b146105775780639397f8e21461058857600080fd5b8063715018a614610554578063766718081461055c57806378e979251461056557600080fd5b8063379607f5116102975780636352211e116102405780636efcaab51161021a5780636efcaab51461051d578063703064d11461052557806370a082311461053857806370f42df81461054b57600080fd5b80636352211e146104d65780636a18ff7a146104e95780636e04ff0d146104fc57600080fd5b80634585e33b116102715780634585e33b146104b257806348b9ef40146104c55780634ee0ab0d146104ce57600080fd5b8063379607f5146104845780633ccfd60b1461049757806342842e0e1461049f57600080fd5b80631a5975481161030457806327e61c25116102de57806327e61c2514610434578063280058ee146104475780632e4148901461045e578063327107f71461047157600080fd5b80631a597548146103f4578063200d2ed21461040757806323b872dd1461042157600080fd5b8063095ea7b311610335578063095ea7b3146103c45780630c0b2bdd146103d957806311da60b4146103ec57600080fd5b806301ffc9a71461035c57806306fdde0314610384578063081812fc14610399575b600080fd5b61036f61036a3660046136d7565b6107d7565b60405190151581526020015b60405180910390f35b61038c6108bc565b60405161037b919061374c565b6103ac6103a736600461375f565b61094e565b6040516001600160a01b03909116815260200161037b565b6103d76103d236600461379d565b610975565b005b6103d76103e7366004613815565b610aab565b6103d7610ba4565b6103d7610402366004613881565b610bae565b60cb546104149060ff1681565b60405161037b91906138d9565b6103d761042f3660046138f3565b610d57565b6103d761044236600461375f565b610dde565b61045060d35481565b60405190815260200161037b565b6103d761046c366004613934565b61122f565b60c9546103ac906001600160a01b031681565b6103d761049236600461375f565b61135f565b6103d761137e565b6103d76104ad3660046138f3565b611396565b6103d76104c0366004613998565b6113b1565b61045060ca5481565b6103d76113b9565b6103ac6104e436600461375f565b6113d1565b6103d76104f73660046139dc565b611436565b61050f61050a366004613998565b61159d565b60405161037b929190613a15565b61038c6115bc565b6103d7610533366004613adc565b61164a565b610450610546366004613bad565b611872565b61045060d95481565b6103d761190c565b61045060d15481565b61045060cd5481565b61045060d55481565b6033546001600160a01b03166103ac565b6103d7610596366004613bca565b61191e565b61038c6119f1565b61045060d65481565b61038c6105ba366004613934565b611a00565b6103d76105cd366004613c16565b611aa9565b61045060d85481565b61045060ce5481565b6103d76105f2366004613c4f565b611ab4565b6103d7611b42565b61065861060d36600461375f565b60dd60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909160ff808216916101008104821691620100009091041688565b6040805198895260208901979097529587019490945260608601929092526080850152151560a0840152151560c0830152151560e08201526101000161037b565b61045060d05481565b61038c6106b036600461375f565b611c3d565b61045060d45481565b6103d76106cc366004613998565b611cb1565b61045060d75481565b61045060d25481565b61036f6106f1366004613ccf565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b61045060cf5481565b6103d7610736366004613bad565b611d03565b6103d761074936600461375f565b611d93565b61077b61075c36600461375f565b60db602052600090815260409020805460019091015460ff9091169082565b60405161037b929190613cfd565b6107c0610797366004613934565b60dc60209081526000928352604080842090915290825290205460ff8082169161010090041682565b60408051921515835290151560208301520161037b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061086a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108b657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060609780546108cb90613d1b565b80601f01602080910402602001604051908101604052809291908181526020018280546108f790613d1b565b80156109445780601f1061091957610100808354040283529160200191610944565b820191906000526020600020905b81548152906001019060200180831161092757829003601f168201915b5050505050905090565b600061095982611dcd565b506000908152609b60205260409020546001600160a01b031690565b6000610980826113d1565b9050806001600160a01b0316836001600160a01b031603610a0e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610a2a5750610a2a81336106f1565b610a9c5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610a05565b610aa68383611e31565b505050565b610ab3611eac565b610abb611efd565b60015b83811015610b61576000858583818110610ada57610ada613d55565b9050602002013590506000848484818110610af757610af7613d55565b9050602002016020810190610b0c9190613d6b565b90508015610b3257600082815260db60205260409020805460ff19166003179055610b4c565b600082815260db60205260409020805460ff191660021790555b50508080610b5990613d9e565b915050610abe565b507e896c158ae8c63b50648f3ace621592a536dc686bb71ea91e8c1a75207e26fd84848484604051610b969493929190613db8565b60405180910390a150505050565b610bac611f57565b565b610bb6611eac565b610bbe611efd565b60005b81811015610aa6576000838383818110610bdd57610bdd613d55565b60209081029290920135600081815260db90935260408084208151808301909252805492955090925090829060ff166006811115610c1d57610c1d6138c3565b6006811115610c2e57610c2e6138c3565b8152602001600182015481525050905060ca54816020015114610c935760405162461bcd60e51b815260206004820152601960248201527f43616d706169676e3a207374616b65206e6f74206d61746368000000000000006044820152606401610a05565b600281516006811115610ca857610ca86138c3565b14610cf55760405162461bcd60e51b815260206004820152601760248201527f43616d706169676e3a206e6f74207369676e65642075700000000000000000006044820152606401610a05565b600082815260db6020908152604091829020805460ff1916600317905590518381527f0898a2d0f11ee389113f47ac39e4c57338d20de87eab1ff9bcce61256c868c85910160405180910390a150508080610d4f90613d9e565b915050610bc1565b610d6133826121f7565b610dd35760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610a05565b610aa6838383612276565b600081815260dd60205260409020600401548190610dff9062093a80613e54565b421015610e4e5760405162461bcd60e51b815260206004820152601460248201527f4368616c6c656e67653a206e6f7420656e6465640000000000000000000000006044820152606401610a05565b81610e588161245b565b600083815260dd60205260409020600501548390610100900460ff1615610ec15760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e67653a20616c7265616479206a7564676564000000000000006044820152606401610a05565b600084815260dd60205260408120805460018201546003830154600290930154919390929091610ef19190613e54565b60d254909150606490610f0690604290613e6c565b610f109190613ea1565b811015610f5f5760405162461bcd60e51b815260206004820152601b60248201527f4368616c6c656e67653a206e6f7420656e6f75676820766f74657200000000006044820152606401610a05565b600160d46000828254610f729190613e54565b9091555050600087815260dd60205260409020600381015460028201546005909201805461ff00199290931191821661ffff199093169290921761010017909155801561110657600083815260db60205260408120805460ff1916600517815560010180549190556064610fe7603c83613e6c565b610ff19190613ea1565b60008a815260dd6020908152604080832054835260db9091528120600101805490919061101f908490613e54565b9091555060649050611032601e83613e6c565b61103c9190613ea1565b60d6600082825461104d9190613e54565b9091555060649050611060600a83613e6c565b61106a9190613ea1565b60d8600082825461107b9190613e54565b92505081905550600160d560008282546110959190613e54565b90915550506040518481527f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a782099060200160405180910390a16040518481527f7bd432623a7ded907d0b1d373f5979fadde9c0f579f29ae990736e560c2a1aaa9060200160405180910390a1506111f2565b600084815260db602052604081206001015460649061112790602890613e6c565b6111319190613ea1565b90506064611140602882613eb5565b60008b815260dd6020908152604080832054835260db90915290206001015461116c9160ff1690613e6c565b6111769190613ea1565b60008a815260dd6020908152604080832054835260db90915290206001015560646111a2604b83613e6c565b6111ac9190613ea1565b60d660008282546111bd9190613e54565b90915550606490506111d0601983613e6c565b6111da9190613ea1565b60d860008282546111eb9190613e54565b9091555050505b6040518881527f3caa68ace909b33d20e5ff96e9c98e4f6b20d3490307a1c09b28bea2e71893d69060200160405180910390a15050505050505050565b81611239816124ac565b61124161250c565b8261124b8161255e565b826112558161255e565b60cf5460ce546112659190613e6c565b60cd546112729190613e54565b61127f9062015180613e54565b4211156112ce5760405162461bcd60e51b815260206004820152601660248201527f4368616c6c656e67653a206e6f7420616c6c6f776564000000000000000000006044820152606401610a05565b60d380549060019060006112e28385613e54565b9091555050600081815260dd602090815260409182902088815560018101889055426004820155600501805461ff00191661010017905581518881529081018790529081018290527f41b86b8e6a50d1879c8fe4ff449470156b8c2b6c02117dafd10625d300e4aacd9060600160405180910390a1505050505050565b80611369816124ac565b6113716125d0565b61137a82612623565b5050565b611386611efd565b61138e6126f9565b610bac61275f565b610aa683838360405180602001604052806000815250611ab4565b61137a6127f2565b6113c16128b7565b6113c96125d0565b610bac612924565b6000818152609960205260408120546001600160a01b0316806108b65760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610a05565b82611440816124ac565b61144861250c565b836114528161255e565b8361145c8161245b565b600085815260dd6020526040902060040154859061147d9062093a80613e54565b42106114cb5760405162461bcd60e51b815260206004820152601060248201527f4368616c6c656e67653a20656e646564000000000000000000000000000000006044820152606401610a05565b600086815260dc602090815260408083208a845290915290208054600161ffff199091166101008815159081029190911782179092550361153357600086815260dd60205260408120600201805460019290611528908490613e54565b9091555061155b9050565b600086815260dd60205260408120600301805460019290611555908490613e54565b90915550505b60408051888152602081018890527fe412d87c65a2ecd9a42cbdcd9b35239448cd2ec046dbe0d6af0eee194ec6173e910160405180910390a150505050505050565b6000606060cf5460d054426115b29190613ed8565b1191509250929050565b60cc80546115c990613d1b565b80601f01602080910402602001604051908101604052809291908181526020018280546115f590613d1b565b80156116425780601f1061161757610100808354040283529160200191611642565b820191906000526020600020905b81548152906001019060200180831161162557829003601f168201915b505050505081565b600054610100900460ff161580801561166a5750600054600160ff909116105b806116845750303b158015611684575060005460ff166001145b6116f65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a05565b6000805460ff191660011790558015611719576000805461ff0019166101001790555b6001600160a01b03891661176f5760405162461bcd60e51b815260206004820152601760248201527f43616d706169676e3a20696e76616c696420746f6b656e0000000000000000006044820152606401610a05565b876000036117bf5760405162461bcd60e51b815260206004820152601860248201527f43616d706169676e3a20696e76616c696420616d6f756e7400000000000000006044820152606401610a05565b6117c88a612b58565b6117d28787612bb7565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b1617905560ca88905560cd85905560d085905560ce84905560cf83905560cc61181f8382613f3d565b508015611866576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b60006001600160a01b0382166118f05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610a05565b506001600160a01b03166000908152609a602052604090205490565b611914611efd565b610bac6000612b58565b80611928816124ac565b61193061250c565b8161193a8161255e565b6119426127f2565b604080516020601f87018190048102820183018352810186815290918291908890889081908501838280828437600092018290525093909452505060d154815260da602090815260408083208884529091529020825190915081906119a79082613f3d565b509050507f0de15cde05bed13731732bfe8f1ff5a69a8be94505d2e381f23997b07af8dd8560d1548487876040516119e29493929190613ffd565b60405180910390a15050505050565b6060609880546108cb90613d1b565b60da602090815260009283526040808420909152908252902080548190611a2690613d1b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5290613d1b565b8015611a9f5780601f10611a7457610100808354040283529160200191611a9f565b820191906000526020600020905b815481529060010190602001808311611a8257829003601f168201915b5050505050905081565b61137a338383612c4d565b611abe33836121f7565b611b305760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610a05565b611b3c84848484612d1b565b50505050565b611b4a611eac565b611b5333611872565b15611ba05760405162461bcd60e51b815260206004820152601860248201527f43616d706169676e3a20616c7265616479207369676e656400000000000000006044820152606401610a05565b60ca5460c954611bbf916001600160a01b039091169033903090612da4565b60d28054906001906000611bd38385613e54565b90915550611be390503382612e55565b600081815260db6020908152604091829020805460ff1916600217815560ca5460019091015590518281527fcd169e01d559b6d336962db715a67dc5fd03521032de891b679200894ec219f391015b60405180910390a150565b6060611c4882611dcd565b6000611c5f60408051602081019091526000815290565b90506000815111611c7f5760405180602001604052806000815250611caa565b80611c8984612e6f565b604051602001611c9a92919061403a565b6040516020818303038152906040525b9392505050565b611cb9611efd565b60cc611cc6828483614069565b507f9554c0ad8824b12a4301321d81a1a6d3be9e533b040fe09a8d7dfeaccb27618160cc604051611cf7919061412a565b60405180910390a15050565b611d0b611efd565b6001600160a01b038116611d875760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a05565b611d9081612b58565b50565b611d9b611efd565b80611da5816124ac565b611dad6125d0565b611db682612623565b61137a61275f565b6001600160a01b03163b151590565b6000818152609960205260409020546001600160a01b0316611d905760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610a05565b6000818152609b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190611e73826113d1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60cd544210610bac5760405162461bcd60e51b815260206004820152601960248201527f43616d706169676e3a20616c72656164792073746172746564000000000000006044820152606401610a05565b6033546001600160a01b03163314610bac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a05565b611f5f612fa4565b60d25460d95560005b60d25481101561218b5760005b60ce5481101561214557600081815260da6020908152604080832085845290915281208054611fa390613d1b565b80601f0160208091040260200160405190810160405280929190818152602001828054611fcf90613d1b565b801561201c5780601f10611ff15761010080835404028352916020019161201c565b820191906000526020600020905b815481529060010190602001808311611fff57829003601f168201915b50505050509050805160000361213257600083815260db6020526040902060010154620f424061204f62030d4083613e6c565b6120599190613ea1565b60d7600082825461206a9190613e54565b90915550620f42409050612081620186a083613e6c565b61208b9190613ea1565b60d8600082825461209c9190613e54565b909155505060d85460d7546120b19083613ed8565b6120bb9190613ed8565b60d660008282546120cc9190613e54565b9091555050600084815260db6020526040812060019081019190915560d9546120f59190613ed8565b60d9556040518481527f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a782099060200160405180910390a15050612145565b508061213d81613d9e565b915050611f75565b506040518181527f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3559060200160405180910390a18061218381613d9e565b915050611f68565b5060d9546000036121b55760d65460d860008282546121aa9190613e54565b9091555050600060d6555b60cb805460ff191660041790556040513381527f7069a5d4cbf1f64db906d1dd29276702df7e9c795ef1746d7a1ca5449c4893f19060200160405180910390a1565b600080612203836113d1565b9050806001600160a01b0316846001600160a01b0316148061224a57506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b8061226e5750836001600160a01b03166122638461094e565b6001600160a01b0316145b949350505050565b826001600160a01b0316612289826113d1565b6001600160a01b0316146123055760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610a05565b6001600160a01b0382166123805760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a05565b61238b83838361300f565b612396600082611e31565b6001600160a01b0383166000908152609a602052604081208054600192906123bf908490613ed8565b90915550506001600160a01b0382166000908152609a602052604081208054600192906123ed908490613e54565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60d3548110611d905760405162461bcd60e51b815260206004820152601a60248201527f4368616c6c656e67655265636f72643a206e6f742065786973740000000000006044820152606401610a05565b336124b6826113d1565b6001600160a01b031614611d905760405162461bcd60e51b815260206004820152601a60248201527f43616d706169676e3a206e6f7420746f6b656e20686f6c6465720000000000006044820152606401610a05565b60cd54421015610bac5760405162461bcd60e51b815260206004820152601360248201527f43616d706169676e3a206e6f74207374617274000000000000000000000000006044820152606401610a05565b6003600082815260db602052604090205460ff166006811115612583576125836138c3565b14611d905760405162461bcd60e51b815260206004820152601660248201527f43616d706169676e3a206e6f742061646d6974746564000000000000000000006044820152606401610a05565b60d45460d35414610bac5760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e67653a206e6f7420616c6c206a7564676564000000000000006044820152606401610a05565b600460cb5460ff16600481111561263c5761263c6138c3565b1461264957612649611f57565b600081815260db6020526040812060010154156126915760d95460d6546126709190613ea1565b600083815260db602052604090206001015461268c9190613e54565b612694565b60005b60c9549091506126ae906001600160a01b03163383613066565b600082815260db602090815260408083206001019290925581518481529081018390527f7cb904b3cfc4c896696085c26766cebf2de422ae3864a0112b5e2fd9ec1efaf89101611cf7565b600460cb5460ff166004811115612712576127126138c3565b14610bac5760405162461bcd60e51b815260206004820152601560248201527f43616d706169676e3a206e6f7420736574746c656400000000000000000000006044820152606401610a05565b60d78054600090915560c95461277f906001600160a01b03163383613066565b60d85460c9546127b0916001600160a01b039091169073d8da6bf26964af9d7eed9e03e53415d37aa9604590613066565b60d8546040805133815260208101849052908101919091527f7a1c31090abe490bfd8379cbbaeef735a3e3c87ee34925f16d0fa3ff4e06115590606001611c32565b60cf5460d0546128029042613ed8565b111561286457600060cf5460d0544261281b9190613ed8565b6128259190613ea1565b90508060d160008282546128399190613e54565b909155505060cf5461284c908290613e6c565b60d0600082825461285d9190613e54565b9091555050505b60ce5460d15410610bac5760405162461bcd60e51b815260206004820152601d60248201527f43616d706169676e3a20636865636b45706f636820746f6f206c6174650000006044820152606401610a05565b60d2546064906128c990601e90613e6c565b6128d39190613ea1565b60d5541015610bac5760405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e3a206e6f7420656e6f7567682063686561746572000000006044820152606401610a05565b61292c6128b7565b60d25460d95560005b60d25481101561218b5760005b60ce54811015612b1257600081815260da602090815260408083208584529091528120805461297090613d1b565b80601f016020809104026020016040519081016040528092919081815260200182805461299c90613d1b565b80156129e95780601f106129be576101008083540402835291602001916129e9565b820191906000526020600020905b8154815290600101906020018083116129cc57829003601f168201915b505050505090508051600003612aff57600083815260db6020526040902060010154620f4240612a1c62030d4083613e6c565b612a269190613ea1565b60d76000828254612a379190613e54565b90915550620f42409050612a4e620186a083613e6c565b612a589190613ea1565b60d86000828254612a699190613e54565b909155505060d85460d754612a7e9083613ed8565b612a889190613ed8565b60d66000828254612a999190613e54565b9091555050600084815260db6020526040812060019081019190915560d954612ac29190613ed8565b60d9556040518481527f939e6ef49701507f032296ab644b4aebf199222450de6622bb5f9550c7a782099060200160405180910390a15050612b12565b5080612b0a81613d9e565b915050612942565b506040518181527f8990a2cca2ad5b32ae72395c0db570652316a7903178764820232d8fe5d2b3559060200160405180910390a180612b5081613d9e565b915050612935565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16612c345760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a05565b6097612c408382613f3d565b506098610aa68282613f3d565b816001600160a01b0316836001600160a01b031603612cae5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a05565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612d26848484612276565b612d32848484846130af565b611b3c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a05565b6040516001600160a01b0380851660248301528316604482015260648101829052611b3c9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613250565b61137a828260405180602001604052806000815250613335565b606081600003612eb257505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612edc5780612ec681613d9e565b9150612ed59050600a83613ea1565b9150612eb6565b60008167ffffffffffffffff811115612ef757612ef7613a30565b6040519080825280601f01601f191660200182016040528015612f21576020820181803683370190505b5090505b841561226e57612f36600183613ed8565b9150612f43600a866141b5565b612f4e906030613e54565b60f81b818381518110612f6357612f63613d55565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612f9d600a86613ea1565b9450612f25565b60cf5460ce54612fb49190613e6c565b60cd54612fc19190613e54565b4211610bac5760405162461bcd60e51b815260206004820152601360248201527f43616d706169676e3a206e6f7420656e646564000000000000000000000000006044820152606401610a05565b6001600160a01b03831615610aa65760405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e3a20436f756c64206e6f74207472616e73666572000000006044820152606401610a05565b6040516001600160a01b038316602482015260448101829052610aa69084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612df1565b60006001600160a01b0384163b15613245576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061310c9033908990889088906004016141c9565b6020604051808303816000875af1925050508015613147575060408051601f3d908101601f1916820190925261314491810190614205565b60015b6131fa573d808015613175576040519150601f19603f3d011682016040523d82523d6000602084013e61317a565b606091505b5080516000036131f25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a05565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061226e565b506001949350505050565b60006132a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133be9092919063ffffffff16565b805190915015610aa657808060200190518101906132c39190614222565b610aa65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a05565b61333f83836133cd565b61334c60008484846130af565b610aa65760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a05565b606061226e8484600085613528565b6001600160a01b0382166134235760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a05565b6000818152609960205260409020546001600160a01b0316156134885760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a05565b6134946000838361300f565b6001600160a01b0382166000908152609a602052604081208054600192906134bd908490613e54565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060824710156135a05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a05565b6001600160a01b0385163b6135f75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a05565b600080866001600160a01b03168587604051613613919061423f565b60006040518083038185875af1925050503d8060008114613650576040519150601f19603f3d011682016040523d82523d6000602084013e613655565b606091505b5091509150613665828286613670565b979650505050505050565b6060831561367f575081611caa565b82511561368f5782518084602001fd5b8160405162461bcd60e51b8152600401610a05919061374c565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611d9057600080fd5b6000602082840312156136e957600080fd5b8135611caa816136a9565b60005b8381101561370f5781810151838201526020016136f7565b83811115611b3c5750506000910152565b600081518084526137388160208601602086016136f4565b601f01601f19169290920160200192915050565b602081526000611caa6020830184613720565b60006020828403121561377157600080fd5b5035919050565b6001600160a01b0381168114611d9057600080fd5b803561379881613778565b919050565b600080604083850312156137b057600080fd5b82356137bb81613778565b946020939093013593505050565b60008083601f8401126137db57600080fd5b50813567ffffffffffffffff8111156137f357600080fd5b6020830191508360208260051b850101111561380e57600080fd5b9250929050565b6000806000806040858703121561382b57600080fd5b843567ffffffffffffffff8082111561384357600080fd5b61384f888389016137c9565b9096509450602087013591508082111561386857600080fd5b50613875878288016137c9565b95989497509550505050565b6000806020838503121561389457600080fd5b823567ffffffffffffffff8111156138ab57600080fd5b6138b7858286016137c9565b90969095509350505050565b634e487b7160e01b600052602160045260246000fd5b60208101600583106138ed576138ed6138c3565b91905290565b60008060006060848603121561390857600080fd5b833561391381613778565b9250602084013561392381613778565b929592945050506040919091013590565b6000806040838503121561394757600080fd5b50508035926020909101359150565b60008083601f84011261396857600080fd5b50813567ffffffffffffffff81111561398057600080fd5b60208301915083602082850101111561380e57600080fd5b600080602083850312156139ab57600080fd5b823567ffffffffffffffff8111156139c257600080fd5b6138b785828601613956565b8015158114611d9057600080fd5b6000806000606084860312156139f157600080fd5b83359250602084013591506040840135613a0a816139ce565b809150509250925092565b821515815260406020820152600061226e6040830184613720565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613a6157613a61613a30565b604051601f8501601f19908116603f01168101908282118183101715613a8957613a89613a30565b81604052809350858152868686011115613aa257600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613acd57600080fd5b611caa83833560208501613a46565b60008060008060008060008060006101208a8c031215613afb57600080fd5b613b048a61378d565b9850613b1260208b0161378d565b975060408a0135965060608a013567ffffffffffffffff80821115613b3657600080fd5b613b428d838e01613abc565b975060808c0135915080821115613b5857600080fd5b613b648d838e01613abc565b965060a08c0135955060c08c0135945060e08c013593506101008c0135915080821115613b9057600080fd5b50613b9d8c828d01613abc565b9150509295985092959850929598565b600060208284031215613bbf57600080fd5b8135611caa81613778565b600080600060408486031215613bdf57600080fd5b833567ffffffffffffffff811115613bf657600080fd5b613c0286828701613956565b909790965060209590950135949350505050565b60008060408385031215613c2957600080fd5b8235613c3481613778565b91506020830135613c44816139ce565b809150509250929050565b60008060008060808587031215613c6557600080fd5b8435613c7081613778565b93506020850135613c8081613778565b925060408501359150606085013567ffffffffffffffff811115613ca357600080fd5b8501601f81018713613cb457600080fd5b613cc387823560208401613a46565b91505092959194509250565b60008060408385031215613ce257600080fd5b8235613ced81613778565b91506020830135613c4481613778565b6040810160078410613d1157613d116138c3565b9281526020015290565b600181811c90821680613d2f57607f821691505b602082108103613d4f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613d7d57600080fd5b8135611caa816139ce565b634e487b7160e01b600052601160045260246000fd5b60006000198203613db157613db1613d88565b5060010190565b6040815283604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851115613df157600080fd5b8460051b808760608501376060908301838103820160208086019190915291810185905285916000916080015b86831015613e47578335613e31816139ce565b1515815292810192600192909201918101613e1e565b9998505050505050505050565b60008219821115613e6757613e67613d88565b500190565b6000816000190483118215151615613e8657613e86613d88565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613eb057613eb0613e8b565b500490565b600060ff821660ff841680821015613ecf57613ecf613d88565b90039392505050565b600082821015613eea57613eea613d88565b500390565b601f821115610aa657600081815260208120601f850160051c81016020861015613f165750805b601f850160051c820191505b81811015613f3557828155600101613f22565b505050505050565b815167ffffffffffffffff811115613f5757613f57613a30565b613f6b81613f658454613d1b565b84613eef565b602080601f831160018114613fa05760008415613f885750858301515b600019600386901b1c1916600185901b178555613f35565b600085815260208120601f198616915b82811015613fcf57888601518255948401946001909101908401613fb0565b5085821015613fed5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b6000835161404c8184602088016136f4565b8351908301906140608183602088016136f4565b01949350505050565b67ffffffffffffffff83111561408157614081613a30565b6140958361408f8354613d1b565b83613eef565b6000601f8411600181146140c957600085156140b15750838201355b600019600387901b1c1916600186901b178355614123565b600083815260209020601f19861690835b828110156140fa57868501358255602094850194600190920191016140da565b50868210156141175760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060208083526000845461413e81613d1b565b8084870152604060018084166000811461415f5760018114614179576141a7565b60ff198516838a01528284151560051b8a010195506141a7565b896000528660002060005b8581101561419f5781548b8201860152908301908801614184565b8a0184019650505b509398975050505050505050565b6000826141c4576141c4613e8b565b500690565b60006001600160a01b038087168352808616602084015250836040830152608060608301526141fb6080830184613720565b9695505050505050565b60006020828403121561421757600080fd5b8151611caa816136a9565b60006020828403121561423457600080fd5b8151611caa816139ce565b600082516142518184602087016136f4565b919091019291505056fea2646970667358221220b0b7df261cee66456d90bce64ab311e3dff2546efd93205e694b6804dc7da04864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "admit(uint256[])": {
        "details": "campaign owner admit several address to participate this campaign",
        "params": {
          "allowlists": "allowed tokenId array"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "checkIn(string,uint256)": {
        "details": "user check in",
        "params": {
          "contentUri": "string of ipfs uri or other decentralize storage"
        }
      },
      "claim(uint256)": {
        "details": "user claim reward after campaign settled"
      },
      "claimAndWithdraw(uint256)": {
        "details": "host who participate the campaign claim reward and withdraw host reward"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "modifyRegistry(uint256[],bool[])": {
        "details": "once campaign owner admit some address by mistakecan modify via this function but more gas-expensive",
        "params": {
          "lists": "modified tokenId list array",
          "targetStatuses": "corresponding status array"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "settle()": {
        "details": "everyone can call the function to settle reward"
      },
      "signUp()": {
        "details": "user stake token and want to participate this campaign"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "host withdraw host reward"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 464,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 467,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2340,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 336,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 456,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2610,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1032,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 1034,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 1038,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1042,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1046,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1052,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1894,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 3764,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "targetToken",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20Upgradeable)686"
      },
      {
        "astId": 3766,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "requiredAmount",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 3770,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "status",
        "offset": 0,
        "slot": "203",
        "type": "t_enum(CampaignStatus)6262"
      },
      {
        "astId": 3772,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "campaignUri",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 3774,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "startTime",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 3776,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalEpochsCount",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 3778,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "period",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 3780,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "lastEpochEndTime",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 3782,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "currentEpoch",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 3784,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_idx",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 3786,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_challengeIdx",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 3788,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "challengeJudgedCount",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 3790,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "cheatCount",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 3792,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "sharedReward",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 3794,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "hostReward",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 3796,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "protocolFee",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 3798,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "successTokensCount",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 3805,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "records",
        "offset": 0,
        "slot": "218",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Record)3861_storage))"
      },
      {
        "astId": 3810,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "properties",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_uint256,t_struct(TokenProperty)3850_storage)"
      },
      {
        "astId": 3817,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "voters",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Voter)3827_storage))"
      },
      {
        "astId": 3822,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "challengeRecords",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_uint256,t_struct(ChallengeRecord)3844_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)686": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_enum(CampaignStatus)6262": {
        "encoding": "inplace",
        "label": "enum Consts.CampaignStatus",
        "numberOfBytes": "1"
      },
      "t_enum(TokenStatus)3858": {
        "encoding": "inplace",
        "label": "enum Campaign.TokenStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Record)3861_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Campaign.Record))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Record)3861_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Voter)3827_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Campaign.Voter))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Voter)3827_storage)"
      },
      "t_mapping(t_uint256,t_struct(ChallengeRecord)3844_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Campaign.ChallengeRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(ChallengeRecord)3844_storage"
      },
      "t_mapping(t_uint256,t_struct(Record)3861_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Campaign.Record)",
        "numberOfBytes": "32",
        "value": "t_struct(Record)3861_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenProperty)3850_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Campaign.TokenProperty)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenProperty)3850_storage"
      },
      "t_mapping(t_uint256,t_struct(Voter)3827_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Campaign.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)3827_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChallengeRecord)3844_storage": {
        "encoding": "inplace",
        "label": "struct Campaign.ChallengeRecord",
        "members": [
          {
            "astId": 3829,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "challengerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3831,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "cheaterId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3833,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "agreeCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3835,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "disagreeCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3837,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "challengeRiseTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3839,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "result",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 3841,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "state",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 3843,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "legal",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Record)3861_storage": {
        "encoding": "inplace",
        "label": "struct Campaign.Record",
        "members": [
          {
            "astId": 3860,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "contentUri",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenProperty)3850_storage": {
        "encoding": "inplace",
        "label": "struct Campaign.TokenProperty",
        "members": [
          {
            "astId": 3847,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "tokenStatus",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TokenStatus)3858"
          },
          {
            "astId": 3849,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "pendingReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)3827_storage": {
        "encoding": "inplace",
        "label": "struct Campaign.Voter",
        "members": [
          {
            "astId": 3824,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "voted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3826,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "choice",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}