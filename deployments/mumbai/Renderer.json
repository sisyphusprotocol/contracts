{
  "address": "0x0C68509d5de931E2b1A4585290C8A811767C731f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "renderTokenById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x377df0a9012ba9c4eb09ba7003b2dada4f5c1268e6328d745b8586c70cf7f2d1",
  "receipt": {
    "to": null,
    "from": "0x11F2241Bf12f1a640f78e5d1A0d3302D77fB5e78",
    "contractAddress": "0x0C68509d5de931E2b1A4585290C8A811767C731f",
    "transactionIndex": 14,
    "gasUsed": "1415860",
    "logsBloom": "0x
    "blockHash": "0x774fe79fcb836fcb6948578738bf4c2c7d763cf2e3b41a27747d15fa6942e6e2",
    "transactionHash": "0x377df0a9012ba9c4eb09ba7003b2dada4f5c1268e6328d745b8586c70cf7f2d1",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 29118385,
        "transactionHash": "0x377df0a9012ba9c4eb09ba7003b2dada4f5c1268e6328d745b8586c70cf7f2d1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000011f2241bf12f1a640f78e5d1a0d3302d77fb5e78",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000078b9364870c00000000000000000000000000000000000000000000000000218bac14851f2af9000000000000000000000000000000000000000000001783ed454956a90dedb30000000000000000000000000000000000000000000000002184208120981ef9000000000000000000000000000000000000000000001783ed4cd4ea0d94f9b3",
        "logIndex": 49,
        "blockHash": "0x774fe79fcb836fcb6948578738bf4c2c7d763cf2e3b41a27747d15fa6942e6e2"
      }
    ],
    "blockNumber": 29118385,
    "cumulativeGasUsed": "3469344",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e24ac4a13ca99c1011043cdab655ee59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"renderTokenById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Renderer.sol\":\"Renderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Consts.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.15;\\n\\ninterface KeeperRegistrarInterface {\\n  function register(\\n    string memory name,\\n    bytes calldata encryptedEmail,\\n    address upkeepContract,\\n    uint32 gasLimit,\\n    address adminAddress,\\n    bytes calldata checkData,\\n    uint96 amount,\\n    uint8 source,\\n    address sender\\n  ) external;\\n}\\n\\nlibrary Consts {\\n  //\\n  uint256 public constant DECIMAL = 10**6;\\n  uint256 public constant PROTOCOL_FEE = 10**5;\\n  uint256 public constant HOST_REWARD = 2 * 10**5;\\n\\n  /// @dev challenge related constant, in percent\\n  /// @dev minimal required vote ratio for a valid challenge judgement\\n  uint8 public constant legalVoterRatio = 66;\\n  /// @dev the campaign exit if enough people are challenged as cheater\\n  uint8 public constant cheaterRatio = 30;\\n  /// @dev if challenge success, how many shared to challenger\\n  uint8 public constant challengerSuccessRatio = 60;\\n  /// @dev if challenge success, how many shared to voter\\n  uint8 public constant successSharedRatio = 30;\\n  /// @dev if challenge success, how many shared to protocol\\n  uint8 public constant successProtocolRatio = 10;\\n  /// @dev if challenge fail, how many decrease\\n  uint8 public constant challengerFailRatio = 40;\\n  /// @dev if challenge fail, how many shared to voter\\n  uint8 public constant failSharedRatio = 75;\\n  /// @dev if challenge success, how many shared to protocol\\n  uint8 public constant failProtocolRatio = 25;\\n  uint8 public constant SCALE = 100;\\n\\n  bytes32 public constant SALT = keccak256(abi.encode('Sisyphus Protocol'));\\n\\n  // tmp vitalik.eth\\n  address public constant PROTOCOL_RECIPIENT = 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045;\\n  address public constant UPKEEP_ADMIN = 0x11F2241Bf12f1a640f78e5d1A0d3302D77fB5e78;\\n\\n  // chainlink\\n  bytes4 public constant registerSig = KeeperRegistrarInterface.register.selector;\\n  // LinkSend\\n  uint96 public constant MIN_LINK_AMOUNT = 5000000000000000000;\\n  // upKeep GasLimit\\n  uint32 public constant UPKEEP_GAS_LIMIT = 5000000;\\n\\n  // upKeep Cancel Delay same as the number in KeeperRegistry\\n  uint256 public constant CANCELATION_DELAY = 50;\\n\\n  uint64 public constant UINT64_MAX = 2**64 - 1;\\n\\n  enum CampaignType {\\n    IN_VALID,\\n    DAILY,\\n    WEEKLY\\n  }\\n\\n  enum CampaignStatus {\\n    IN_VALID,\\n    NOT_START,\\n    ON_GOING,\\n    ENDED,\\n    SETTLED\\n  }\\n}\\n\",\"keccak256\":\"0xc8e3d12b91caa7da8f9466d2fd6ad70eff0be96a9de3df7e345cb34cde6a14fd\",\"license\":\"BUSL-1.1\"},\"contracts/Renderer.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Base64.sol';\\n\\nimport './interface/IRenderer.sol';\\nimport './interface/ICampaign.sol';\\n\\ncontract Renderer is IRenderer {\\n  // caller must be Campaign Contract\\n  function renderTokenById(uint256 id) public view override returns (string memory) {\\n    uint256 dayCount = (ICampaign(msg.sender).period() * ICampaign(msg.sender).totalEpochsCount()) / 86400;\\n    string memory period = string(abi.encode(Strings.toString(dayCount), 'Days'));\\n    string memory result = ICampaign(msg.sender).getTokenProperties(id).tokenStatus == ICampaign.TokenStatus.FAILED\\n      ? 'Bravo'\\n      : 'Failed';\\n    uint256 process = ((ICampaign(msg.sender).currentEpoch() + 1) * 100) / (ICampaign(msg.sender).totalEpochsCount());\\n    return renderSvg(address(uint160(id)), IERC721Metadata(msg.sender).name(), result, period, process);\\n  }\\n\\n  /**\\n   * @param addr user addr\\n   * @param name campaign's name, such as Writing Protocol\\n   * @param period such as 14 days\\n   * @param result such as Not Start, Bravo, Failed\\n   * @param process in percent, 0-100\\n   */\\n  function renderSvg(\\n    address addr,\\n    string memory name,\\n    string memory period,\\n    string memory result,\\n    uint256 process\\n  ) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg width=\\\"114\\\" height=\\\"175\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g filter=\\\"url(#prefix__filter0_d_774_3790)\\\"><rect x=\\\"2\\\" width=\\\"110\\\" height=\\\"171.459\\\" rx=\\\"8.715\\\" fill=\\\"url(#prefix__paint0_linear_774_3790)\\\" shape-rendering=\\\"crispEdges\\\"/></g><text dx=\\\"60\\\" dy=\\\"18\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" style=\\\"height:100px\\\" font-size=\\\"7\\\" fill=\\\"#000\\\">',\\n          _shortenAddr(addr),\\n          '</text><text dx=\\\"55\\\" dy=\\\"110\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" style=\\\"height:100px\\\" font-size=\\\"7\\\" fill=\\\"#000\\\">',\\n          result,\\n          '</text><text dx=\\\"60\\\" dy=\\\"140\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" style=\\\"height:100px\\\" font-size=\\\"6\\\" fill=\\\"#000\\\">',\\n          name,\\n          '</text><text dx=\\\"60\\\" dy=\\\"154\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" style=\\\"height:100px\\\" font-size=\\\"7\\\" fill=\\\"#000\\\">',\\n          period,\\n          '</text><g filter=\\\"url(#prefix__filter1_dd_774_3790)\\\" shape-rendering=\\\"crispEdges\\\"><circle cx=\\\"19.811\\\" cy=\\\"17.42\\\" r=\\\"10.765\\\" fill=\\\"#D9D9D9\\\" fill-opacity=\\\".39\\\"/><circle cx=\\\"19.811\\\" cy=\\\"17.42\\\" r=\\\"10.329\\\" stroke=\\\"#000\\\" stroke-opacity=\\\".5\\\" stroke-width=\\\".872\\\"/></g><rect x=\\\"17.267\\\" y=\\\"117.438\\\" width=\\\"82\\\" height=\\\"6.655\\\" rx=\\\"3.327\\\" fill=\\\"#fff\\\"/><rect x=\\\"17.267\\\" y=\\\"117.438\\\" width=\\\"',\\n          _calculateProgressNumber(process),\\n          '\\\" height=\\\"6.655\\\" rx=\\\"3.327\\\" fill=\\\"#FD93FF\\\"/><defs><filter id=\\\"prefix__filter0_d_774_3790\\\" x=\\\".257\\\" y=\\\"0\\\" width=\\\"113.486\\\" height=\\\"174.945\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"1.743\\\"/><feGaussianBlur stdDeviation=\\\".872\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\\\"/><feBlend in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_774_3790\\\"/><feBlend in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_774_3790\\\" result=\\\"shape\\\"/></filter><filter id=\\\"prefix__filter1_dd_774_3790\\\" x=\\\"7.303\\\" y=\\\"6.655\\\" width=\\\"25.016\\\" height=\\\"25.016\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"1.743\\\"/><feGaussianBlur stdDeviation=\\\".872\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\\\"/><feBlend in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_774_3790\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"1.743\\\"/><feGaussianBlur stdDeviation=\\\".872\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\\\"/><feBlend in2=\\\"effect1_dropShadow_774_3790\\\" result=\\\"effect2_dropShadow_774_3790\\\"/><feBlend in=\\\"SourceGraphic\\\" in2=\\\"effect2_dropShadow_774_3790\\\" result=\\\"shape\\\"/></filter><linearGradient id=\\\"prefix__paint0_linear_774_3790\\\" x1=\\\"57\\\" y1=\\\"0\\\" x2=\\\"57\\\" y2=\\\"171.459\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#FDFBC2\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#CF70D5\\\" stop-opacity=\\\".27\\\"/></linearGradient></defs></svg>'\\n        )\\n      );\\n  }\\n\\n  function _calculateProgressNumber(uint256 process) private pure returns (string memory) {\\n    return Strings.toString((process * 82) / 100);\\n  }\\n\\n  function _substring(\\n    string memory str,\\n    uint256 startIndex,\\n    uint256 endIndex\\n  ) private pure returns (string memory) {\\n    bytes memory strBytes = bytes(str);\\n    bytes memory result = new bytes(endIndex - startIndex);\\n    for (uint256 i = startIndex; i < endIndex; i++) {\\n      result[i - startIndex] = strBytes[i];\\n    }\\n    return string(result);\\n  }\\n\\n  function _shortenAddr(address addr) private pure returns (string memory) {\\n    uint256 value = uint160(addr);\\n    bytes memory allBytes = bytes(Strings.toHexString(value, 20));\\n\\n    string memory newString = string(allBytes);\\n\\n    return string(abi.encodePacked(_substring(newString, 0, 6), '...', _substring(newString, 38, 42)));\\n  }\\n}\\n\",\"keccak256\":\"0x06e5a81e8d6eb7d5b23ecf1af488e1fc58211163bfd8fc57c815f02beaf81e75\",\"license\":\"BUSL-1.1\"},\"contracts/interface/ICampaign.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport { Consts } from '../Consts.sol';\\n\\ninterface ICampaign {\\n  //for voted: true = voted; false = not voted;\\n  //for choice: true = think cheat; false = think not cheat;\\n  struct Voter {\\n    bool voted;\\n    bool choice;\\n  }\\n\\n  //for result: true = cheat; false = not cheat;\\n  //for state: true = over; false = working;\\n  //for legal: true = over 2/3; false = not enough voter;\\n  struct ChallengeRecord {\\n    uint256 challengerId;\\n    uint256 cheaterId;\\n    uint256 epoch;\\n    uint256 agreeCount;\\n    uint256 disagreeCount;\\n    uint256 challengeRiseTime;\\n    bool result;\\n    bool state;\\n    bool legal;\\n  }\\n\\n  struct TokenProperty {\\n    TokenStatus tokenStatus;\\n    uint256 pendingReward;\\n  }\\n\\n  enum TokenStatus {\\n    INVALID,\\n    EXIT,\\n    SIGNED,\\n    ADMITTED,\\n    ACHIEVED,\\n    FAILED,\\n    REKT\\n  }\\n\\n  struct Record {\\n    string contentUri;\\n  }\\n\\n  function initialize(\\n    address owner,\\n    IERC20Upgradeable token_,\\n    uint256 amount_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 startTime_,\\n    uint256 totalPeriod_,\\n    uint256 periodLength_,\\n    string memory campaignUri_\\n  ) external;\\n\\n  function status() external view returns (Consts.CampaignStatus);\\n\\n  function totalEpochsCount() external view returns (uint256);\\n\\n  function period() external view returns (uint256);\\n\\n  function currentEpoch() external view returns (uint256);\\n\\n  function getTokenProperties(uint256 tokenId) external view returns (TokenProperty memory);\\n\\n  // owner update content uri\\n  function setCampaignUri(string calldata newUri) external;\\n\\n  // user sign up the campaign\\n  function signUp() external;\\n\\n  // host allow user to participate\\n  function admit(uint256[] calldata) external;\\n\\n  // user check at a fixed frequency\\n  function checkIn(string calldata, uint256) external;\\n\\n  // settle the reward\\n  function settle() external;\\n\\n  // user claim reward after campaign ended\\n  function claim(uint256 tokenId) external;\\n\\n  function claimAndWithdraw(uint256 tokenId) external;\\n\\n  function withdraw() external;\\n\\n  function challenge(\\n    uint256,\\n    uint256,\\n    uint256\\n  ) external;\\n\\n  function vote(\\n    uint256,\\n    uint256,\\n    bool\\n  ) external;\\n\\n  function judgement(uint256) external;\\n\\n  function forceEnd() external;\\n\\n  // epoch update event;\\n  event EpochUpdated(uint256 currentEpoch);\\n\\n  event EvCampaignUriSet(string newUri);\\n\\n  event EvSignUp(uint256 tokenId);\\n\\n  event EvRegisterSuccessfully(uint256 tokenId);\\n\\n  event EvCheckIn(uint256 epoch, uint256 tokenId, string contentUri);\\n\\n  event EvModifyRegistry(uint256[] tokenList, bool[] status);\\n\\n  // settle the campaign event\\n  event EvSettle(address user);\\n\\n  event EvClaimReward(uint256 tokenId, uint256 amount);\\n  // who fail\\n  event EvFailure(uint256 tokenId);\\n  // who success\\n  event EvSuccess(uint256 tokenId);\\n\\n  event EvWithDraw(address host, uint256 hostReward, uint256 protocolFee);\\n\\n  event EvChallenge(uint256 challengerId, uint256 cheaterId, uint256 challengeRecordId);\\n\\n  event EvVote(uint256 tokenId, uint256 challengeRecordId);\\n\\n  event EvJudgement(uint256 challengeRecordId);\\n\\n  event EvCheat(uint256 cheaterId);\\n}\\n\",\"keccak256\":\"0xde93bb5fd8ec080be1dc0ac74ed3f4a262240e58fc12c5442e424eccc1ef855c\",\"license\":\"BUSL-1.1\"},\"contracts/interface/IRenderer.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\ninterface IRenderer {\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1a955e4bfaeac19da74a96edae00a556d52ee3d99886fefd11340acb7fe9ebc4\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}